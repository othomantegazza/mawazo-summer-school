---
title: "Robust Summary Statistics"
author: "Otho Mantegazza"
execute: 
  echo: true
format:
  revealjs:
    theme: [simple, style/theme.scss]
    footer: '[Home](../index.html) | [2022 CBSER Summer School](https://mawazoinstitute.org/cbser-summer-school)'
editor_options: 
  chunk_output_type: console
---

```{r}
#| include: false
library(dplyr)
library(readr)
library(magrittr)
library(tidyr)
library(palmerpenguins)
library(tibble)
library(ggplot2)
library(readr)
library(here)
library(ggbeeswarm)

theme_update(axis.title = element_text(size = 15),
             axis.text = element_text(size = 15),
             strip.text = element_text(size = 15))

violet <- '#6d07a8'
```

# Summary Statistics

## Concise summaries

When we mentioned the boxplot, we talked about robust summary statistics. First of all, what is a summary statistic?

A Summary statistic describes a property of a distribution in one single number.

For example:

- The **mean** represents the **central tendency** of a distribution.
- The **standard deviation** represents its **dispersion**.

**None** of these statistics is robust toward outliers.

## Mean and Standard Deviation {.scrollable}

### - Mean

```{r}
#| echo: false
penguins_summary <- function(pengs) {
  pengs %>% 
    group_by(species) %>% 
    summarise(m = mean(bill_depth_mm, na.rm = T),
              sd = sd(bill_depth_mm, na.rm = T),
              med = median(bill_depth_mm, na.rm = T),
              q1 = quantile(bill_depth_mm, na.rm = T)['25%'],
              q3 = quantile(bill_depth_mm, na.rm = T)['75%'],
              iqr = IQR(bill_depth_mm, na.rm = T),
              mad = mad(bill_depth_mm, na.rm = T))
}

penguins_summarized <- 
  penguins %>% 
  penguins_summary()

p <- 
  penguins %>% 
  ggplot(aes(x = bill_depth_mm,
             fill = species)) +
  geom_histogram(binwidth = .4) +
  labs(y = 'count') +
  guides(fill = 'none') +
  facet_grid(rows = 'species')
```


::: {style="color:red;"}

$mean(x) = \frac{1}{n} \sum_{i=i}^{n} x_{i}$ 

:::

::: {style="height: 750px; width: 1000px;"}
 
```{r}
#| echo: false
#| fig.height: 7
#| fig-width: 7

p_mean <- 
  p +
  geom_vline(data = penguins_summarized,
            aes(xintercept = m),
            colour = 'red',
            size = 2,
            lty = '11') +
  geom_label(data = penguins_summarized,
            aes(x = m,
                y = 1,
                label = m %>% round(1)),
            fill = 'white',
            colour = 'red',
            hjust = -0.2,
            vjust = 0)

p_mean
```

:::

### - Standatrd Deviation

::: {style="color:red;"}

$SD = \sqrt{\frac{1}{N-1} \sum_{i=1}^N \left(x_i - \bar{x}\right)^2}$

:::
 
::: {style="height: 750px; width: 1000px;"}
 
```{r}
#| echo: false
#| fig.height: 7
#| fig-width: 7

p_sd <- 
  p +
  geom_segment(data = penguins_summarized,
            aes(x = m-sd/2,
                xend = m+sd/2,
                y = 15,
                yend = 15),
            lty = '11',
            colour = 'red',
            size = 2) +
  geom_label(data = penguins_summarized,
            aes(x = m,
                y = 15,
                label = sd %>% round(1)),
            fill = 'white',
            colour = 'red',
            hjust = .5,
            vjust = -.4) 
p_sd
```

:::

## Mean and SD are not robust to outlier

What if I'm distracted and forget to write a comma when I collect the data.

```{r}
penguins$bill_depth_mm %>% range(na.rm = T)
```

With this snipped we multiply the max value of `bill_depth_mm` by 10.

```{r}
penguins_bad <- 
  penguins %>% 
    mutate(
      bill_depth_mm = bill_depth_mm %>% 
        {
          if_else(. == max(., na.rm = T),
                    true = .*10,
                    false = .)
        }
    )
```

With this chunk of code I've added an outlier at in the variable `bill_depth_mm` at `r (penguins$bill_depth_mm %>% max(na.rm = T))*10` mm. Let's see what happens.


```{r}
#| echo: false
penguins_bad_summarized <- 
  penguins_bad %>% 
  penguins_summary()

p_bad <- 
  penguins_bad %>% 
  ggplot(aes(x = bill_depth_mm,
             fill = species)) +
  geom_histogram(binwidth = .4) +
  guides(fill = 'none') +
  facet_grid(rows = 'species') +
  geom_segment(
    data = . %>% filter(species == 'Adelie'),
    aes(y = 15,
        yend = 2.5,
        x = max(bill_depth_mm, na.rm = T),
        xend = max(bill_depth_mm, na.rm = T)),
    arrow = arrow(length = unit(0.5, "cm")),
    size = 2
  ) 
```


## Mean and SD with an outlier at 215 mm {.scrollable}

I've added an outlier to the `Adelie` species, let's see what happens graphically

::: {style="height: 750px; width: 1000px;"}
 
```{r}
#| echo: false
#| fig.height: 7
#| fig-width: 7

p_bad
```

:::

In the next plots I **will not represent the outlier graphically** because it stretches the x axis too much.
 
Mean and SD are heavily influenced by the outlier. 

### The mean of Adelie is influenced by the outlier at 215 mm

::: {style="height: 750px; width: 1000px;"}
 
```{r}
#| echo: false
#| fig.height: 7
#| fig-width: 7

p +
  geom_vline(data = penguins_bad_summarized,
            aes(xintercept = m),
            colour = 'red',
            size = 2,
            lty = '11') +
  geom_label(data = penguins_bad_summarized,
            aes(x = m,
                y = 1,
                label = m %>% round(1)),
            fill = 'white',
            colour = 'red',
            hjust = -0.2,
            vjust = 0)
```

:::

### The SD of Adelie is influenced by the outlier 215 mm

::: {style="height: 750px; width: 1000px;"}
 
```{r}
#| echo: false
#| fig.height: 7
#| fig-width: 7

p +
  geom_segment(data = penguins_bad_summarized,
            aes(x = m-sd/2,
                xend = m+sd/2,
                y = 15,
                yend = 15),
            lty = '11',
            colour = 'red',
            size = 2) +
  geom_label(data = penguins_bad_summarized,
            aes(x = m,
                y = 15,
                label = sd %>% round(1)),
            fill = 'white',
            colour = 'red',
            hjust = .5,
            vjust = -.4) 
```

:::

# Robust Summary Statistics


## Median and Interquartile Range (IQR)

### Median

The median represents a the **central tendency** of a distribution, it is the value that splits the bigger 50% (half) of the data from the smaller half.


### Interquartile Range (IQR)

The IQR range represents how a distribution is **dispersed**, it is the range between the 1st and the 3rd quartile.

- The **1st quartile** splits the smaller 25% of a distribution from the rest.
- The **3rd quartile** splits the bigger 75% of a distribution from the rest.

## Median and IQR without outlier  {.scrollable}

### - Median

::: {style="height: 750px; width: 1000px;"}
 
```{r}
#| echo: false
#| fig.height: 7
#| fig-width: 7
p_median <- 
  p +
  geom_vline(data = penguins_summarized,
            aes(xintercept = med),
            colour = violet,
            size = 2) +
  geom_label(data = penguins_summarized,
            aes(x = med,
                y = 1,
                label = med %>% round(1)),
            fill = 'white',
            colour = violet,
            hjust = -0.2,
            vjust = 0)

p_median
```

:::

### - IQR

::: {style="height: 750px; width: 1000px;"}
 
```{r}
#| echo: false
#| fig.height: 7
#| fig-width: 7

p +
  geom_segment(data = penguins_summarized,
            aes(x = q1,
                xend = q3,
                y = 15,
                yend = 15),
            colour = violet,
            size = 2) +
  geom_label(data = penguins_summarized,
            aes(x = med,
                y = 15,
                label = iqr %>% round(1)),
            fill = 'white',
            colour = violet,
            hjust = .5,
            vjust = -.4) 
```

:::

## Median and IQR with an outlier at 215 mm {.scrollable}

### The median is not influenced by the outlier at 215 mm

::: {style="height: 750px; width: 1000px;"}
 
```{r}
#| echo: false
#| fig.height: 7
#| fig-width: 7

p_median <- 
  p +
  geom_vline(data = penguins_bad_summarized,
            aes(xintercept = med),
            colour = violet,
            size = 2) +
  geom_label(data = penguins_bad_summarized,
            aes(x = med,
                y = 1,
                label = med %>% round(1)),
            fill = 'white',
            colour = violet,
            hjust = -0.2,
            vjust = 0)

p_median
```

:::

### The median is not influenced by the outlier at 215 mm

::: {style="height: 750px; width: 1000px;"}
 
```{r}
#| echo: false
#| fig.height: 7
#| fig-width: 7
p +
  geom_segment(data = penguins_bad_summarized,
            aes(x = q1,
                xend = q3,
                y = 15,
                yend = 15),
            colour = violet,
            size = 2) +
  geom_label(data = penguins_summarized,
            aes(x = med,
                y = 15,
                label = iqr %>% round(1)),
            fill = 'white',
            colour = violet,
            hjust = .5,
            vjust = -.4) 
```

:::

# References

## Referece - Summaries

Summary statistic without outlier.

```{r}
penguins_summarized
```

Summary statistic with an outlier at 215 mm.

```{r}
penguins_bad_summarized
```

## Reference - Functions

- Mean: `mean()`
- Standard Deviation: `sd()`
- Median: `median()` or `quantile()['50%']`
- 1st quartile: `quantile()['25%']`
- 3rd quartile: `quantile()['75%']`
- IQR: `iqr()`

Use `na.rm = TRUE` with all those function to ignore **missing values**.

## Take home 

::: {.smallish}

- When we have many data, we often have to **reduce** them to simple indicators with summary statistics.

- No statisitic is perfect, some, such as mean and standard deviation are more precise, but they **"break"** easilt if the data with "non-ideal" data.

- Others are such as **median** and **IQR** are simpler and less sophisticated, but are better at capturing the essence of the data in "non-ideal" situation, i.e. **robust**.

- The word **robust** is often use to describe statistical methods. It means that the method is unlikely to break when the data are not perfect and the condition are worse than ideal.

Read: [Introduction to data science | Chapter 12 - Robust Summaries](https://rafalab.github.io/dsbook/robust-summaries.html)

::: 

## Exercise {.exercise .smallish}

The `storm` dataset is loaded in R with the tidyverse. It stores attributes from hurricanes in the US over the years 1975-2020.

- What are the mean and the median `wind` speed?
- What are the mean and the median air `pressure` in the storm center?

Investigate the `wind` and `pressure` variables with histograms and boxplots, how are the data distributed? are there any outlier?

What if you stratify those two variables by `status`, do you see some interesting pattern?

Stratify the data by `name`, extract the 5 hurricanes with the highest mean wind speed the 5 hurricanes with highest median wind speed. Are they the same?


```{r}
#| eval: false
#| echo: false
storms %>% 
  ggplot(aes(x = wind)) +
  geom_histogram()

storms$wind %>% mean()
storms$wind %>% median()

storms %>% 
  ggplot(aes(x = pressure)) +
  geom_histogram()

storms$pressure %>% mean()
storms$pressure %>% median()

storms %>% 
  ggplot(aes(x = wind,
             y = pressure)) +
  geom_point()
  

storms %>% 
  ggplot(aes(x = wind,
             y = pressure)) +
  # geom_point() +
  geom_boxplot(aes(group = cut_width(wind, 4))) 

storms %>% 
  ggplot(aes(x = status,
             y = wind))  +
  geom_boxplot()

storms %>% 
  ggplot(aes(x = status,
             y = pressure))  +
  geom_boxplot()

storms %>% 
  ggplot(aes(x = pressure))  +
  geom_histogram() +
  facet_grid(rows  = 'status')

storms %>% 
  ggplot(aes(x = wind))  +
  geom_histogram() +
  facet_grid(rows  = 'status')

storms %>% 
  ggplot(aes(x = lat,
             y = wind,
             group = cut_width(lat, width = 2))) +
  geom_boxplot()


storms %>% 
  ggplot(aes(x = long,
             y = lat)) +
  geom_hex() +
  facet_wrap(facets = 'status', ncol = 2)

storms %>% 
  ggplot(aes(x = wind)) +
  geom_histogram() +
  facet_grid(facets = 'month')

storms %>% 
  ggplot(aes(x = long,
             y = lat,
             colour = wind)) +
  geom_point()

strongest_storms <- 
  storms %>% 
  group_by(name) %>% 
  summarise(median_wind = median(wind),
            n = n()) %>% 
  arrange(desc(median_wind)) %>% 
  slice(1:30)

storms %>% 
  filter(name %in% strongest_storms$name) %>% 
  ggplot(aes(x = wind)) +
  geom_histogram() +
  facet_wrap(facets = 'name')

storms %>% 
  filter(name %in% strongest_storms$name) %>% 
  ggplot(aes(x = long,
             y = lat,
             colour = wind)) +
  geom_point() +
  facet_wrap(facets = 'name')
```

