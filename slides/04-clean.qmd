---
title: "Get and Clean Data"
subtitle: "Tidyverse - Part 3"
author: "Otho Mantegazza"
execute: 
  echo: true
format:
  revealjs:
    theme: [simple, style/theme.scss]
    incremental: true
    footer: '[2022 CBSER Summer School](https://www.summercompschool.mawazoinstitute.org/)'
editor_options: 
  chunk_output_type: console
---

```{r}
#| include: false
library(dplyr)
library(readr)
library(magrittr)
library(tidyr)
library(palmerpenguins)
library(tibble)
library(ggplot2)
library(readr)
library(here)
```

# Tidy Data

## A couple of words on tidy data

More often than not when we speak about **datasets**, we speak about rectangular data, i.e., data in **two-dimensional table**, with rows and columns.


When we work on rectangular data, we try to get shape them according to the  **[Tidy Data Principles](https://tidyr.tidyverse.org/articles/tidy-data.html)**:

1. Every column is a variable.
2. Every row is an observation.
3. Every cell is a single value.

. . . 

When we get new data, they generally aren't in a tidy shape...

# Tools: Read Data with Readr

## Readr

:::: {.columns}

::: {.column width="40%"}
![](https://raw.githubusercontent.com/rstudio/hex-stickers/master/SVG/readr.svg)
:::

::: {.column width="60%"}

[Readr](https://readr.tidyverse.org/) is a package that loads (reads) **Rectangular Text** data in R.

It's fast, it guesses column types explicitly and it's pipe friendly

You can use it to read both local data and online data from a URL.

For example we can use it to read data in CSV and TSV formats and many more.

:::

::::

## Read the Palmer Pengunis dataset {.scrollable}

We can use again on the [Palmer Penguins Dataset](https://allisonhorst.github.io/palmerpenguins/)

The [source code of this package](https://github.com/allisonhorst/palmerpenguins/), is on github; we can find the [tidy CSV data](https://raw.githubusercontent.com/allisonhorst/palmerpenguins/main/inst/extdata/penguins.csv) in the [inst/exdata folder](https://github.com/allisonhorst/palmerpenguins/tree/main/inst/extdata).

. . .

```{r}
#| message: true
penguin_csv_url <- 'https://raw.githubusercontent.com/allisonhorst/palmerpenguins/main/inst/extdata/penguins.csv'

read_csv(penguin_csv_url)
```

## {.scrollable}

The tibble that we have loaded and generate d from CSV is not identical to the one that comes already loaded with the `palmerpenguins` package:

```{r}
penguins_from_csv <- 
  penguin_csv_url %>% 
  read_csv()

identical(
  penguins_from_csv,
  palmerpenguins::penguins
)
```

Let's compare them side by side

:::: {.columns}

::: {.column width="50%"}

```{r}
palmerpenguins::penguins %>% 
  glimpse(width = 40)
```

:::

::: {.column width="50%"}

```{r}
penguins_from_csv %>% 
  glimpse(width = 40)
```

:::

::::

Can you spot that column types are different?

<br>
<br>

## Parsing {.smallish}

When we read data from text encoded "delimited" files, such as CSV, we use function that [parse](https://en.wikipedia.org/wiki/Parsing) the file.

When we parse something, we formalize its structure applying a set of grammatical rules.

No parsing rule is perfect, thus we must often review the results and "fix" parsing "mistakes".

```{r}
# specify column types manually

penguins_from_csv <-
  penguin_csv_url %>% 
  read_csv(
    col_types = cols(
      species = col_factor(),
      island = col_factor(),
      flipper_length_mm = col_integer(),
      body_mass_g = col_integer(),
      sex = col_factor(),
      year = col_integer()
    )
  )
```

## Exercise {.exercise}

Find the source code of the [readr package](https://readr.tidyverse.org/).

In the `inst/extdata` folder you can find 10 datasets that display different challenges that you might enconter when you have to load data from an external file.

Load in R at least 3 of those datasets using functions from `readr`.

Get help from [readr's documentation](https://readr.tidyverse.org/) and the [data import chapter](https://r4ds.had.co.nz/data-import.html) of r4ds.

Which function did you use? Did you encounter any parsing failure? How did you fix it?


## Read a dataset from PANGAEA

```{r}

```

