---
title: "Manipulate Data"
subtitle: "Tidyverse - Part 1"
author: "Otho Mantegazza"
execute: 
  echo: true
format:
  revealjs:
    theme: [simple, style/theme.scss]
    incremental: true
    footer: '[2022 CBSER Summer School](https://www.summercompschool.mawazoinstitute.org/)'
editor_options: 
  chunk_output_type: console
---

```{r}
#| include: false
library(dplyr)
library(magrittr)
library(tidyr)
library(palmerpenguins)
library(tibble)
library(skimr)
```


# Intro to the Tidyverse

## The [Tidyverse](https://www.tidyverse.org/packages/) is an ecosystem of packages for Data Science

All the packages share a common design:

  - One function does one thing, well.
  - Designed for pipes.
  - Extensive documentation.
  - Non-standard evaluation, to write code quickly and easily.

. . .
  
All packages can be loaded with `library(tidyverse)`, but you can also load single packages one by one.

# Data: Palmer Penguins {background-image="https://upload.wikimedia.org/wikipedia/commons/a/a3/Gentoo_Penguin_AdF.jpg"}

:::small
[Photo credits: Arturo de Frias Marques]
:::

## {background-image="https://allisonhorst.github.io/palmerpenguins/reference/figures/lter_penguins.png" background-position='center' background-size='contain'}

## We first explore the Palmer Penguins Dataset

The [Penguins Dataset](https://allisonhorst.github.io/palmerpenguins/) stores real data about palmer penguins. This R data package was developed and is maintained by Allison Horst, Alison Hill and Kirsten Gorman for teaching purposes.

. . . 

Let's install the package...

```{r}
#| eval: false
install.packages('palmerpenguins')
```

. . . 

...and load it in R.

```{r}
library(palmerpenguins)
```

## `palmerpenguins` exports two datasets {auto-animate="true"}

```{r}
penguins_raw
```


## `palmerpenguins` exports two datasets {auto-animate="true"}

```{r}
penguins
```

We will use the first one: `penguins`, which has already been cleaned.

## Exercise {.exercise}

The print method for a tibble gives you a reasonable overview of the data stored in it.

Can you get more details with the package [skimr](https://docs.ropensci.org/skimr/)?

Check its documentation, install it, try it out on the `penguins` dataset. Comment on the output. 


# Tools: dplyr

## A grammar for data manipulation

:::: {.columns}

::: {.column width="40%"}
![](https://raw.githubusercontent.com/rstudio/hex-stickers/master/SVG/dplyr.svg)
:::

::: {.column width="60%" .smallish}

[Dplyr](https://dplyr.tidyverse.org/) provides a grammar for manipulating data, with many useful verbs:

- `mutate()` adds new variables that are functions of existing variables
- `select()` picks variables based on their names.
- `filter()` picks cases based on their values.
- `summarise()` reduces multiple values down to a single summary.
- `group_by()` performs operations by group.

:::

::::

## We can apply those verbs to manipulate data {auto-animate="true"}

```{r}
penguins %>%
  mutate(bill_length_meters = bill_length_mm/1000)
```


## We can apply those verbs to manipulate data {auto-animate="true"}

```{r}
penguins %>%
  select(bill_length_mm) %>% 
  mutate(bill_length_meters = bill_length_mm/1000)
```

## We can apply those verbs to manipulate data {auto-animate="true"}

```{r}
penguins %>%
  select(species, island, bill_length_mm) %>% 
  mutate(bill_length_meters = bill_length_mm/1000)
```

## We can apply those verbs to manipulate data {auto-animate="true"}

```{r}
penguins %>%
 count(island)
```

## We can apply those verbs to manipulate data {auto-animate="true"}

```{r}
penguins %>%
  select(species, island, bill_length_mm) %>% 
  filter(island == 'Dream') %>% 
  mutate(bill_length_meters = bill_length_mm/1000)
```

## We can apply those verbs to manipulate data {auto-animate="true"}

```{r}
penguins %>%
  select(species, island, bill_length_mm) %>% 
  filter(island == 'Dream') %>% 
  mutate(bill_length_meters = bill_length_mm/1000) %>% 
  group_by(species)
```

## We can apply those verbs to manipulate data {auto-animate="true"}

```{r}
penguins %>%
  select(species, island, bill_length_mm) %>% 
  filter(island == 'Dream') %>% 
  mutate(bill_length_meters = bill_length_mm/1000) %>% 
  group_by(species) %>% 
  summarise(mean_bill_length_mm = mean(bill_length_mm),
            sd_bill_length_mm = sd(bill_length_mm))
```


## We can apply those verbs to manipulate data {auto-animate="true"}

```{r}
dream_summary <- 
  penguins %>%
  select(species, island, bill_length_mm) %>% 
  filter(island == 'Dream') %>% 
  mutate(bill_length_meters = bill_length_mm/1000) %>% 
  group_by(species) %>% 
  summarise(mean_bill_length_mm = mean(bill_length_mm),
            sd_bill_length_mm = sd(bill_length_mm))
```

Let's assign the output to a new variable `dream_summary`.

## {.big}

In the previous code we have seen also two additional aspects that feature heavily in the tidyverse:

- The Pipe `%>%`.
- Non-Standard Evaluation.

## The Pipe `%>%`

:::: {.columns}

::: {.column width="40%"}
![](https://raw.githubusercontent.com/rstudio/hex-stickers/master/SVG/pipe.svg)
:::

::: {.column width="10%"}
:::

::: {.column width="50%"}

The pipe is provided by the package [magrittr](https://magrittr.tidyverse.org/), it's a forwarding operator:

<br>

It takes the ouput of what comes before (LHS) and sends it to the first argument of the function that comes after (RHS).

<br>

[`LHS %>% RHS`]{.big}

:::

::::

## The Pipe `%>%` {auto-animate="true"}

For example, you could write:

```{r}
select(penguins, species, body_mass_g)
```

## The Pipe `%>%` {auto-animate="true"}

...but if you use the pipe, your code is easier to read...

```{r}
penguins %>% select(species, body_mass_g)
```

## The Pipe `%>%` {auto-animate="true"}

...especially if you have to perform many operations one after the other...

```{r}
penguins %>%
  select(species, body_mass_g) %>% 
  filter(species == 'Adelie')
  
```

## The Pipe `%>%` {auto-animate="true"}

...that otherwise would force you to nest your code horribly.

```{r}
filter(
  select(
    penguins,
    species, body_mass_g
  ),
  species == 'Adelie'
)

```

## Non-Standard Evaluation

This one is difficult...

. . . 

Which argument does the function `select()` take? Let's check it in its help page with `?select`.

```{r}
?select
```

Under the `Usage` section it says:

```
select(.data, ...)
```

. . .

And then in the section `Arguments` the help page says:

```
.data: A data frame, data frame extension (e.g. a tibble), or a lazy data frame (e.g. from dbplyr or dtplyr). See Methods, below, for more details.

...: <tidy-select> One or more unquoted expressions separated by commas. Variable names can be used as if they were positions in the data frame, so expressions like x:y can be used to select a range of variables.
```

## Non-Standard Evaluation

So, what are do we mean if we write:

```{r}
#| eval: false
penguins %>% 
  select(species, island)
```

. . .

The `penguins` tibble is fills the`.data` parameter through the pipe `%>%`.

The unquoted names `species, island` fill the argument `...`, they represent the names of the columns to be selected.

. . .

But the name of columns in a tibble is a character vector.

```{r}
colnames(penguins)
```

## Non-Standard Evaluation

Through non-standard evaluation, in the function select, we can call element of a character vector like if they were variables (without quoting them).

```{r}
#| eval: false
penguins %>% 
  select(species, island)
```

The variables `species` and `island` don't exist outside of the dplyr function `select()`.

```{r}
#| error: true
species
```

## {.big}

With non-standard evaluation we can write names without quoting them. This makes writing code for iterative data exploration faster.

. . .

If you come from a more strict programming language, it could be hard to get use to this behaviour.

. . .

Most function of the Tidyverse do non-standard evaluation.

## Exercise {.exercise}

With the penguin dataset:

- Select all **numeric** variables (columns).

- Convert all variables that are expressed in **millimeters** into **meters**, rename them accordingly.

## Exercise {.exercise}

Move all the defined variable of the `penguins` dataset (`species`, `island`, `sex`, `year`) to the left of the measured variables.

Does any of the defined variables has missing data? In case remove the corresponding row.

Then group the dataset by all of those variable defined variables and estimate the minimum for each measured variable of each group. 

## Exercise {.exercise}

How many penguins have `bill_length_mm` above average?

Repeat the analysis for each species.



