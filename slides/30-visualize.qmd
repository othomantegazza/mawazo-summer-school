---
title: "Data Visualization"
subtitle: "Tidyverse - Part 2"
author: "Otho Mantegazza"
execute: 
  echo: true
format:
  revealjs:
    theme: [simple, style/theme.scss]
    footer:  '[Home](../index.html) | [2022 CBSER Summer School](https://www.summercompschool.mawazoinstitute.org/)'
editor_options: 
  chunk_output_type: console
---

```{r}
#| include: false
library(dplyr)
library(magrittr)
library(tidyr)
library(palmerpenguins)
library(tibble)
library(ggplot2)
library(readr)
library(here)
```

# {.big}

“The simple graph has brought more information to the data analyst’s mind than any other device.”

<br>

“The greatest value of a picture is when it forces us to notice what we never expected to see.”

<br>

\— John Tukey

# Why Dataviz?

## We are bad at recognizing pattern from raw data {.scrollable}

```{r}
#| echo: false
hobbes <- 
  here('data-int', 'hobbes.csv') %>% 
  read_csv() %>% 
  select(x, y)

calvin <-
  here('data-int', 'calvin.csv') %>% 
  read_csv() %>% 
  select(x, y) %>% 
  mutate(y = y*1.3,
         x = x*1.3,
         x = x - 20,
         y = y+300)

tiger_attack <- 
  bind_rows(calvin, hobbes) %>% 
  sample_n(size = n()) %>% 
  filter(x < 900) %>% 
  mutate(y = y %>% {
    scales::rescale(
      x = .,
      to = c(range(.)[2], range(.)[1]),
      from = range(.))
  })

tiger_attack %>% 
  print(n = Inf)
```

## Summary statistics might help us

var: x

```{r}
#| echo: false
tiger_attack$x %>% summary()
```

var: y

```{r}
#| echo: false
tiger_attack$y %>% summary()
```

correlation between x, y

```{r}
#| echo: false
tiger_attack %>% 
  {
    cor(.$x, .$y)
  } %>% 
  print()
```

## {}

```{r}
#| echo: false
#| fig-height: 7

grey <- 'grey80'

p0 <- 
  tiger_attack %>% 
  ggplot(aes(x = x,
             y = y)) +
  coord_fixed() +
  scale_y_continuous(limits = c(0, NA),
                     expand = expansion(mult = 0, add = 0)) +
  scale_x_continuous(limits = c(0, NA),
                     expand = expansion(mult = 0, add = 0)) +
  theme_minimal()


p0 +
  geom_smooth(method = 'lm') 
```

## {}

```{r}
#| echo: false
#| fig-height: 7
p1 <-
  p0 +
  geom_smooth(method = 'lm', colour = grey)
  
p1 +
  geom_smooth(method = 'lm', formula = y ~ poly(x, 2))
```


## {}

```{r}
#| echo: false
#| fig-height: 7
p2 <- 
  p1 +
  geom_smooth(method = 'lm', formula = y ~ poly(x, 2), colour = grey)

p2 +
  geom_smooth(method = 'lm', formula = y ~ poly(x, 5))

```

## {}

```{r}
#| echo: false
#| fig-height: 7

p3 <- 
  p2 +
  geom_smooth(method = 'lm', formula = y ~ poly(x, 5), colour = grey)

p3 +
  geom_point(size = .7)
```

## {}

![](img/ch1.jpg){.absolute top=5}

![](img/ch2.jpg){.fragment .absolute top=60 left=400 height=500}

![](img/ch3.jpg){.fragment .absolute style="top:220px; transform:rotate(340deg)"}

# Data Vizualization for Whom?

## Who needs your dataviz? {.nonincremental}

You generally visualize data for two types of people:

::: {.nonincremental}

- Yourself.
- Others.

:::

. . .

When you make dataviz for **yourself**, your aim is **explorative** and your goal is to generate as **many** raw graphs as **quickly** as possible to gain insights on your data.

. . .

When you make dataviz for **others**, your aim is **communicative** and you work to be as **clear** and as **understandable** as possible.

## Exercise {.exercise .smallish}

::: fragment
With the `penguin` dataset:

- Make a histogram of the variable `bill_length_mm`. Repeat the same histogram, but use colors to differentiate `species`.

- Make a histogram of `bill_depth_mm`, but only for female penguins.

- Make a scatterplot of `flipper_length_mm` vs `body_mass_g`, use colors to differentiate species.

:::
::: fragment
Get help from ggplot2's documentation.

- On [ggplot2's book](https://ggplot2-book.org/).
- On [R4DS book](https://r4ds.had.co.nz/data-visualisation.html]).
- On [ggplot2's website](https://ggplot2.tidyverse.org/).
:::

# Tools: ggplot2

## A grammar of graphics

:::: {.columns}

::: {.column width="40%"}
![](https://raw.githubusercontent.com/rstudio/hex-stickers/master/SVG/ggplot2.svg)
:::

::: {.column width="60%" .smallish}

[ggplot2](https://ggplot2.tidyverse.org/) is one of the main tools for declaring graphics in R.

It is based on the grammar of graphics.

It can be used both for explorative analysis and for publication ready graphs.

:::

::::

## The grammar of graphics {.smallish}

The grammar of graphics is a unifying framework to conceptualize and program datavisualization.

It states that most graphics are composed of:

- A default dataset and set of mappings from variables to aesthetics.
- One or more layers, with each layer having one geometric object, one statistical transformation, one position adjustment, and optionally, one dataset and set of aesthetic mappings,
- One scale for each aesthetic mapping used.
- A coordinate system.
- The facet specification.

[Hadley Wickham - A Layered Grammar of Graphics, 2010](...)

## Let's put it in practice 

We take dataset (`penguins`) and decide that we want to map a set of **variables** to **aesthetics** specification...

:::: {.columns}
::: {.column width="50%"}

### Variables

- `bill_length_mm`
- `bill_depth_mm`
- `island`
- `sex`

:::
::: {.column width="50%"}

### Aesthetics

- x
- y
- colour
- shape

::: 
::::

## Let's put it in practice 

```{mermaid}
%%| fig-width: 5
flowchart LR
  bill_length_mm --> x
  bill_depth_mm --> y
  island --> colour
  sex --> shape
  subgraph Variable
  bill_length_mm
  bill_depth_mm
  island
  sex
  end
  subgraph aesthetics
  x
  y
  colour
  shape
  end
```


## {auto-animate="true"}

A default **dataset**...

:::: {.columns}

::: {.column width="40%"}

```{r}
p <- 
  penguins %>% 
  drop_na(species, sex) %>% 
  ggplot()
```

:::

::: {.column width="60%"}

```{r}
#| fig-width: 6
#| fig-height: 5
#| echo: false
p
```


:::

::::

## {auto-animate="true"}

A default dataset and set of mappings from **variables** to **aesthetics**.

:::: {.columns}

::: {.column width="40%"}


```{r}
p <- 
  penguins %>% 
  drop_na(species, sex) %>% 
  ggplot(
    aes(x = bill_length_mm,
        y = bill_depth_mm,
        colour = species,
        shape = sex)
    )
```

:::

::: {.column width="60%"}

```{r}
#| fig-width: 6
#| fig-height: 5
#| echo: false
p
```


:::

::::

## {auto-animate="true"}

One or more layers, with each layer having one **geometric** object...

:::: {.columns}

::: {.column width="40%"}


```{r}
p <- 
  penguins %>% 
  drop_na(species, sex) %>% 
  ggplot(
    aes(x = bill_length_mm,
        y = bill_depth_mm,
        colour = species,
        shape = sex)
  ) + 
  geom_point()
```

:::

::: {.column width="60%"}

```{r}
#| fig-width: 6
#| fig-height: 5
#| echo: false
p
```


:::

::::


## {auto-animate="true"}

...and a **statistical transformation**.

:::: {.columns}

::: {.column width="40%"}


```{r}
p <- 
  penguins %>% 
  drop_na(species, sex) %>% 
  ggplot(
    aes(x = bill_length_mm,
        y = bill_depth_mm,
        colour = species,
        shape = sex)
  ) + 
  geom_point() +
  geom_smooth()
```

:::

::: {.column width="60%"}

```{r}
#| fig-width: 6
#| fig-height: 5
#| echo: false
p
```


:::

::::

## {auto-animate="true"}

...and a **statistical transformation**.

:::: {.columns}

::: {.column width="40%"}


```{r}
p <- 
  penguins %>% 
  drop_na(species, sex) %>% 
  ggplot(
    aes(x = bill_length_mm,
        y = bill_depth_mm,
        colour = species,
        shape = sex)
  ) + 
  geom_point() +
  geom_smooth(method = 'lm')
```

:::

::: {.column width="60%"}

```{r}
#| fig-width: 6
#| fig-height: 5
#| echo: false
p
```


:::

::::

## {auto-animate="true"}

The **facet** specification.

:::: {.columns}

::: {.column width="40%"}


```{r}
p <- 
  penguins %>%
  drop_na(species, sex) %>% 
  ggplot(
    aes(x = bill_length_mm,
        y = bill_depth_mm,
        colour = species,
        shape = sex)
  ) + 
  geom_point() +
  geom_smooth(method = 'lm') +
  facet_wrap(facets = 'sex',
             ncol = 1)
```

:::

::: {.column width="60%"}

```{r}
#| fig-width: 6
#| fig-height: 5
#| echo: false
p
```


:::

::::

## {auto-animate="true"}

We can also modify the **coordinate system**, if needed.

:::: {.columns}

::: {.column width="40%"}


```{r}
p <- 
  penguins %>%
  drop_na(species, sex) %>% 
  ggplot(
    aes(x = bill_length_mm,
        y = bill_depth_mm,
        colour = species,
        shape = sex)
  ) + 
  geom_point() +
  geom_smooth(method = 'lm') +
  facet_wrap(facets = 'sex',
             ncol = 1) +
  scale_y_log10()
```

:::

::: {.column width="60%"}

```{r}
#| fig-width: 6
#| fig-height: 5
#| echo: false
p
```


:::

::::

## Exercise {.exercise}

```{r}
#| include: false

penguins %>% 
  ggplot(aes(x = species)) +
  geom_bar()
```

Take the `penguins` dataset; make a [bar chart](https://ggplot2.tidyverse.org/reference/geom_bar.html?q=geom_bar) that counts how many penguins have been recorded for each species.

- which variable are you mapping to each aesthetic specification?
- Which geometric object are you using?
- Are you using a statistical transformation?


# Explore your data with graphics 

## Graphical exploration

You can use **graphics** to **learn** what's inside our data.

<br>

First, **asking questions** about data then, **plotting** them with different **visual models** to highlight and learn about data patterns, we can go through these two steps iteratively (plot, rinse and repeat).

## Visual models

A **visual model** is a specific type of graph, designed for a specific purpose.

<br>

[ggplot provides many basic visual models](https://ggplot2.tidyverse.org/reference/index.html#geoms) in its set of `geom_*` functions.

<br>

Niche and advanced visual models can be found in its [ecosystem of extensions](https://exts.ggplot2.tidyverse.org/gallery/).


## Visual models

Examples of visual models used in exploratory data analysis are:

:::: {.columns}

::: {.column width="50%"}

### one variable

- barplots.
- histograms.
- boxplots.

:::

::: {.column width="50%"}

### two variables

- scatterplots.
- heatmaps.

:::

::::

Don't feel limited to these visual models, we learn to program because we want flexibility.

## Histograms

```{r}
penguins %>% ggplot(aes(x = flipper_length_mm, fill = species)) + geom_histogram()
```

## Histograms

```{r}
penguins %>% ggplot(aes(x = flipper_length_mm, fill = species)) + geom_histogram()
```

## Boxplots

:::: {.columns}

::: {.column width="40%"}

Robust summary statistics displayed (median, IQR, outliers).

::: 

::: {.column width="50%"}

![](https://upload.wikimedia.org/wikipedia/commons/1/1a/Boxplot_vs_PDF.svg) 
:::

::::

::: {.small}

Image source: [Wikipedia](https://en.wikipedia.org/wiki/Box_plot)

:::

## Boxplots

```{r}
penguins %>%
  ggplot(aes(x = species, y = flipper_length_mm, fill = sex)) + geom_boxplot()
```

## Scatterplots

```{r}
penguins %>% 
  ggplot(aes(x = flipper_length_mm, y= body_mass_g, colour = species)) + geom_point()
```

## Heatmaps

```{r}
penguins %>% 
  ggplot(aes(x = flipper_length_mm, body_mass_g)) +
  geom_hex(bins = c(20, 20*0.010))
```

## Heatmaps

```{r}
#| echo: false
penguins %>% 
  ggplot(aes(x = flipper_length_mm, body_mass_g)) +
  geom_hex(bins = c(20, 20*0.010)) +
  scale_fill_gradient(low = 'grey70', high = 'blue')
```

## Heatmaps

```{r}
#| eval: false
penguins %>% 
  ggplot(aes(x = flipper_length_mm, body_mass_g)) +
  geom_hex(bins = c(20, 20*0.010)) +
  scale_fill_gradient(low = 'grey70', high = 'blue')
```

## Exercise {.exercise}

Make a histogram of the continuous variables in the penguins dataset but compute the bin statistics before making the plot.

