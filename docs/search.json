[
  {
    "objectID": "slides/00-intro.html#the-r-project-for-statistical-computing",
    "href": "slides/00-intro.html#the-r-project-for-statistical-computing",
    "title": "About R",
    "section": "The R Project for Statistical Computing",
    "text": "The R Project for Statistical Computing\nhttps://www.r-project.org/\n\nStarted in 1991 by Ross Ihaka and Robert Gentleman at the University of Auckland (NZ).\nMade open source in 1995.\nOfficial ‚Äúpeer reviewed‚Äù packages are hosted on CRAN.\nHas multiple ‚Äúuniverses‚Äù of packages, including Bioconductor dedicated to bioinformatics, and the Tidyverse for Data Science.\nGreat for analyzing data, for statistics, for research and for communicating data to others."
  },
  {
    "objectID": "slides/00-intro.html#a-bit-more-on-r",
    "href": "slides/00-intro.html#a-bit-more-on-r",
    "title": "About R",
    "section": "A bit more on R",
    "text": "A bit more on R\n\nWe are going to use the Tidyverse. But you might have to learn also a bit of the original idiom, now called base R, which sometimes helps if you have to programm your own functions.\nWe are going to use R in visual studio code as you did for Python, but you might want to try out also Rstudio, which is a great open source IDE dedicated to R."
  },
  {
    "objectID": "slides/00-intro.html#as-always-stackoverflow-is-your-friend",
    "href": "slides/00-intro.html#as-always-stackoverflow-is-your-friend",
    "title": "About R",
    "section": "As always, stackoverflow is your friend",
    "text": "As always, stackoverflow is your friend\nIf you need help, as always, Google and Stackoverflow are your friends.\n\nBut sometimes you need to learn on a support that is structured, nuanced and detailed‚Ä¶ üìö"
  },
  {
    "objectID": "slides/00-intro.html#a-helpful-and-welcoming-community",
    "href": "slides/00-intro.html#a-helpful-and-welcoming-community",
    "title": "About R",
    "section": "A helpful and welcoming community üìö",
    "text": "A helpful and welcoming community üìö\nOne of the things that makes R great is its community of users and programmer.\nIt is open source and open access oriented and highly dedicated to lowering the barrier to learning R and data science, and make their tools available and usable to everyone."
  },
  {
    "objectID": "slides/00-intro.html#open-books",
    "href": "slides/00-intro.html#open-books",
    "title": "About R",
    "section": "Open Books",
    "text": "Open Books\n\n\nBookdown: a package and a repository for open access books about R."
  },
  {
    "objectID": "slides/00-intro.html#open-books-1",
    "href": "slides/00-intro.html#open-books-1",
    "title": "About R",
    "section": "Open Books",
    "text": "Open Books\n\n\n\nR for Data Science - A gentle introducion to data science with the Tidyverse.\nIntroduction to Data Science - A detailed introduction to Data science by a biostatistician.\nAdvanced R - All you need to know about programming in R.\nIntroduction to Statistical Learning - A detailed introductio to modern statistical methods, implemented in R.\n\n\n\nText Mining in R Dealing with natural language and written text in R.\nTidy Modeling with R R Machine learning framework.\nDesigning and Building Data Science Solutions how to set up a data science project."
  },
  {
    "objectID": "slides/00-intro.html#more",
    "href": "slides/00-intro.html#more",
    "title": "About R",
    "section": "More ‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è",
    "text": "More ‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è\n\nSlack Spaces\n\n\nR for Data Science Community a slack chanel for R networking.\n\n\nBlogs\n\nAlison Hill‚Äôs Blog; great for everything Rmarkdown.\nSimply Statistics; modern statistics and R.\nJulia Silge‚Äôs Blog; learn about R machine learning framework from one of its main developer.\nGina Reynolds Flipbooks; for more tidyverse and Rmarkdown mastery.\nFornkonstin; at the interface between math, art and coding.\nData imaginist; more art in R üé®.\n\nCollaborative Challenges\n\nTidytuesday Tidy and visualize a dataset and share your results with the R community every week on Tuesday.\n\n\n\n\n2022 CBSER Summer School"
  },
  {
    "objectID": "slides/01-meet-r.html#r-understands-you",
    "href": "slides/01-meet-r.html#r-understands-you",
    "title": "Meet R",
    "section": "R understands you",
    "text": "R understands you\nWrite someting at the R console:\n\nA simple number‚Ä¶\n\n2\n\n[1] 2\n\n\n\n\nSome operation‚Ä¶\n\n3 + 7\n\n[1] 10\n\n\n\n\nText must be quoted‚Ä¶\n\n'hello'\n\n[1] \"hello\"\n\n\n\n\nOtherwise it is interpreted as the name of a variable:\n\nmy_var\n\nError in eval(expr, envir, enclos): object 'my_var' not found"
  },
  {
    "objectID": "slides/01-meet-r.html#you-can-define-variables",
    "href": "slides/01-meet-r.html#you-can-define-variables",
    "title": "Meet R",
    "section": "You can define variables",
    "text": "You can define variables\nYou can define a variable with the operator <- .\n\n# a numeric variable\nthis_year <- 2022\n \n# a character variable\nitalian_greetings <- 'ciao'\n\n\nIf you type the name of a variable without quotes, r prints its value:\n\nthis_year\n\n[1] 2022\n\n\n\nitalian_greetings\n\n[1] \"ciao\"\n\n\n\n\nUse the keyboard shortcut alt/option + - to write the assign operator <- more easily."
  },
  {
    "objectID": "slides/01-meet-r.html#data-types",
    "href": "slides/01-meet-r.html#data-types",
    "title": "Meet R",
    "section": "Data Types",
    "text": "Data Types\nWhen you define an object R guesses its type.\n\ntypeof() returns the internal type of an object.\n\ntypeof(this_year)\n\n[1] \"double\"\n\ntypeof(italian_greetings)\n\n[1] \"character\"\n\n\n\n\nclass() returns a the class attribute of an object.\n\nclass(this_year)\n\n[1] \"numeric\"\n\nclass(italian_greetings)\n\n[1] \"character\""
  },
  {
    "objectID": "slides/01-meet-r.html#everything-in-r-is-an-object",
    "href": "slides/01-meet-r.html#everything-in-r-is-an-object",
    "title": "Meet R",
    "section": "Everything in R is an object",
    "text": "Everything in R is an object\nAnd objects have a types.\n\n\nclass(2)\n\n[1] \"numeric\"\n\n\n\n\n\nclass('hello')\n\n[1] \"character\"\n\n\n\n\n\nclass(FALSE)\n\n[1] \"logical\"\n\n\n\n\n\nclass(mean)\n\n[1] \"function\"\n\n\n\n\n\nclass(`<-`)\n\n[1] \"function\"\n\n\n\n\n\nclass(Sys.Date())\n\n[1] \"Date\""
  },
  {
    "objectID": "slides/01-meet-r.html#exercise",
    "href": "slides/01-meet-r.html#exercise",
    "title": "Meet R",
    "section": "Exercise",
    "text": "Exercise\n\nUse the function c(arg_1, arg_2, ..., arg_n) to put together in a vector many objects that you expect to have the same class. Try with different ones.\nNow do the same, but try to put together in a vector data with different types, what happened?\n\n\n\nLearn more about vectors and types at Advanced R."
  },
  {
    "objectID": "slides/01-meet-r.html#vectors-store-one-or-more-data-point-of-the-same-class",
    "href": "slides/01-meet-r.html#vectors-store-one-or-more-data-point-of-the-same-class",
    "title": "Meet R",
    "section": "Vectors store one or more data point of the same class",
    "text": "Vectors store one or more data point of the same class\n\nnum_vector <- c(1, 3, 5, 3, 6)\n\ncharacter_vector <- c('Hi', ',', 'I', 'am', 'a', 'character', 'vector')\n\nlogical_vector <- c(TRUE, FALSE, FALSE, TRUE, FALSE)\n\n\n\n\nclass(num_vector)\n\n[1] \"numeric\"\n\nclass(character_vector)\n\n[1] \"character\"\n\nclass(logical_vector)\n\n[1] \"logical\""
  },
  {
    "objectID": "slides/01-meet-r.html#classes-can-be-coherced",
    "href": "slides/01-meet-r.html#classes-can-be-coherced",
    "title": "Meet R",
    "section": "Classes can be coherced",
    "text": "Classes can be coherced\nTRUE and FALSE can be coerced into numeric zeroes and ones, or also into characters.\n\nc(2, TRUE, 5, FALSE, 4)\n\n[1] 2 1 5 0 4\n\n\n\nNumbers can be coerced into characters.\n\nc('a', TRUE, 5, FALSE, 4)\n\n[1] \"a\"     \"TRUE\"  \"5\"     \"FALSE\" \"4\""
  },
  {
    "objectID": "slides/01-meet-r.html#classes-can-be-coherced-1",
    "href": "slides/01-meet-r.html#classes-can-be-coherced-1",
    "title": "Meet R",
    "section": "Classes can be coherced",
    "text": "Classes can be coherced\nClasses can be coerced explicitly.\n\nlogical_vector <- c(T, F, F, T, T, F)\nlogical_vector\n\n[1]  TRUE FALSE FALSE  TRUE  TRUE FALSE\n\nas.numeric(logical_vector)\n\n[1] 1 0 0 1 1 0\n\nas.character(logical_vector)\n\n[1] \"TRUE\"  \"FALSE\" \"FALSE\" \"TRUE\"  \"TRUE\"  \"FALSE\"\n\n\n\nIf an element can‚Äôt be coerced to the desired class, R returns a missing value (NA).\n\nas.numeric(c('1', 'two', '3'))\n\n[1]  1 NA  3"
  },
  {
    "objectID": "slides/01-meet-r.html#atomic-elements-are-vectors-of-length-1",
    "href": "slides/01-meet-r.html#atomic-elements-are-vectors-of-length-1",
    "title": "Meet R",
    "section": "Atomic elements are vectors of length 1",
    "text": "Atomic elements are vectors of length 1\n\nshort_vector <- 1\nlong_vector <- 1:50\n\n\n\nshort_vector\n\n[1] 1\n\nlong_vector\n\n [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25\n[26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50\n\n\n\n\n\nclass(short_vector)\n\n[1] \"numeric\"\n\nclass(long_vector)\n\n[1] \"integer\"\n\n\n\n\n\nlength(short_vector)\n\n[1] 1\n\nlength(long_vector)\n\n[1] 50"
  },
  {
    "objectID": "slides/01-meet-r.html#most-functions-in-r-are-vectorized",
    "href": "slides/01-meet-r.html#most-functions-in-r-are-vectorized",
    "title": "Meet R",
    "section": "Most functions in R are vectorized",
    "text": "Most functions in R are vectorized\nIf I want to apply an operation over a vector, I can just write it as it is without a for loop. For example:\n\nAdd an integer to every number in a vector:\n\nlong_vector + 100\n\n [1] 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119\n[20] 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138\n[39] 139 140 141 142 143 144 145 146 147 148 149 150\n\n\n\n\nMultiply every number in a vector by an integer:\n\nlong_vector * 2\n\n [1]   2   4   6   8  10  12  14  16  18  20  22  24  26  28  30  32  34  36  38\n[20]  40  42  44  46  48  50  52  54  56  58  60  62  64  66  68  70  72  74  76\n[39]  78  80  82  84  86  88  90  92  94  96  98 100"
  },
  {
    "objectID": "slides/01-meet-r.html#most-functions-in-r-are-vectorized-1",
    "href": "slides/01-meet-r.html#most-functions-in-r-are-vectorized-1",
    "title": "Meet R",
    "section": "Most functions in R are vectorized",
    "text": "Most functions in R are vectorized\nTake the square root of every number in a vector:\n\nsqrt(long_vector)\n\n [1] 1.000000 1.414214 1.732051 2.000000 2.236068 2.449490 2.645751 2.828427\n [9] 3.000000 3.162278 3.316625 3.464102 3.605551 3.741657 3.872983 4.000000\n[17] 4.123106 4.242641 4.358899 4.472136 4.582576 4.690416 4.795832 4.898979\n[25] 5.000000 5.099020 5.196152 5.291503 5.385165 5.477226 5.567764 5.656854\n[33] 5.744563 5.830952 5.916080 6.000000 6.082763 6.164414 6.244998 6.324555\n[41] 6.403124 6.480741 6.557439 6.633250 6.708204 6.782330 6.855655 6.928203\n[49] 7.000000 7.071068"
  },
  {
    "objectID": "slides/01-meet-r.html#exercise-1",
    "href": "slides/01-meet-r.html#exercise-1",
    "title": "Meet R",
    "section": "Exercise",
    "text": "Exercise\n\nGenerate a vector of 100 (semi-) random numbers with a normal distribution.\nUse a for loop (even if you don‚Äôt need one) to multiply eachs number in the vector by 2.\n\n\n\nFor loops in R according to Roger D. Peng."
  },
  {
    "objectID": "slides/01-meet-r.html#extra---lists",
    "href": "slides/01-meet-r.html#extra---lists",
    "title": "Meet R",
    "section": "Extra - Lists",
    "text": "Extra - Lists\nIf you need to collect together and store data of different types, you can use lists.\n\nmy_list <- list(\n  'hello',\n  1,\n  FALSE,\n  1:25\n)\n\nmy_list\n\n[[1]]\n[1] \"hello\"\n\n[[2]]\n[1] 1\n\n[[3]]\n[1] FALSE\n\n[[4]]\n [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25"
  },
  {
    "objectID": "slides/01-meet-r.html#can-we-use-vectors-to-build-a-dataframe",
    "href": "slides/01-meet-r.html#can-we-use-vectors-to-build-a-dataframe",
    "title": "Meet R",
    "section": "Can we use vectors to build a dataframe?",
    "text": "Can we use vectors to build a dataframe?\nWe learned that vector contain elements of the same type, for example, numerics, character, logical.\n\nAccording to the Tidy Data theory, in rectangular dataframes:\n\n\nEach row is an observation.\nEach column is a variable.\n\n\nBy definiton variables of your data, must be made by atomic elements of the same type. So we can use vectors of the same length to build the columns of a dataframe.\nLet‚Äôs try."
  },
  {
    "objectID": "slides/01-meet-r.html#and-we-have-data",
    "href": "slides/01-meet-r.html#and-we-have-data",
    "title": "Meet R",
    "section": "And‚Ä¶ We have data",
    "text": "And‚Ä¶ We have data\nLet‚Äôs prepare three vectors with the first observations of iris and use them to make a dataframe.\n\nsepal_length <- c(5.1, 7.0, 6.3)\n\nsepal_width <- c(3.5, 3.2, 3.3)\n\nspecies <- c('setosa', 'versicolor', 'virginica')\n\niris_simple <- \n  data.frame(\n    species,\n    sepal_length,\n    sepal_width\n  )\n\niris_simple\n\n     species sepal_length sepal_width\n1     setosa          5.1         3.5\n2 versicolor          7.0         3.2\n3  virginica          6.3         3.3"
  },
  {
    "objectID": "slides/01-meet-r.html#and-we-have-data-1",
    "href": "slides/01-meet-r.html#and-we-have-data-1",
    "title": "Meet R",
    "section": "And‚Ä¶ We have data",
    "text": "And‚Ä¶ We have data\nThe variable iris_simple points to a dataframe that stores rectangular data.\n\nclass(iris_simple)\n\n[1] \"data.frame\"\n\n\n\ndim(iris_simple)\n\n[1] 3 3\n\n\n\nWe can access its columns with the operator $. Each column is a vector.\n\niris_simple$sepal_length\n\n[1] 5.1 7.0 6.3\n\n\n\nclass(iris_simple$sepal_length)\n\n[1] \"numeric\"\n\n\n\nis.vector(iris_simple$sepal_length)\n\n[1] TRUE"
  },
  {
    "objectID": "slides/01-meet-r.html#section",
    "href": "slides/01-meet-r.html#section",
    "title": "Meet R",
    "section": "",
    "text": "Now that we have data, let‚Äôs take our first stroll into the Tidyverse."
  },
  {
    "objectID": "slides/01-meet-r.html#tibbles-a-modern-take-on-dataframes",
    "href": "slides/01-meet-r.html#tibbles-a-modern-take-on-dataframes",
    "title": "Meet R",
    "section": "Tibbles: a modern take on dataframes",
    "text": "Tibbles: a modern take on dataframes\nLet‚Äôs attach the whole Tidyverse, which includes also the Tibble package‚Ä¶\n\nlibrary(tidyverse)\n\n\n‚Ä¶and convert our dataframe iris_simple into a tibble.\n\niris_simple <- as_tibble(iris_simple)\n\n\n\nThe print method for a tibble, provides a handy and informative output.\n\niris_simple\n\n# A tibble: 3 √ó 3\n  species    sepal_length sepal_width\n  <chr>             <dbl>       <dbl>\n1 setosa              5.1         3.5\n2 versicolor          7           3.2\n3 virginica           6.3         3.3"
  },
  {
    "objectID": "slides/01-meet-r.html#tibbles-a-modern-take-on-dataframes-1",
    "href": "slides/01-meet-r.html#tibbles-a-modern-take-on-dataframes-1",
    "title": "Meet R",
    "section": "Tibbles: a modern take on dataframes",
    "text": "Tibbles: a modern take on dataframes\nLet‚Äôs compare the print method for the dataframe iris, before and after we convert it to a tibble.\n\niris\n\n    Sepal.Length Sepal.Width Petal.Length Petal.Width    Species\n1            5.1         3.5          1.4         0.2     setosa\n2            4.9         3.0          1.4         0.2     setosa\n3            4.7         3.2          1.3         0.2     setosa\n4            4.6         3.1          1.5         0.2     setosa\n5            5.0         3.6          1.4         0.2     setosa\n6            5.4         3.9          1.7         0.4     setosa\n7            4.6         3.4          1.4         0.3     setosa\n8            5.0         3.4          1.5         0.2     setosa\n9            4.4         2.9          1.4         0.2     setosa\n10           4.9         3.1          1.5         0.1     setosa\n11           5.4         3.7          1.5         0.2     setosa\n12           4.8         3.4          1.6         0.2     setosa\n13           4.8         3.0          1.4         0.1     setosa\n14           4.3         3.0          1.1         0.1     setosa\n15           5.8         4.0          1.2         0.2     setosa\n16           5.7         4.4          1.5         0.4     setosa\n17           5.4         3.9          1.3         0.4     setosa\n18           5.1         3.5          1.4         0.3     setosa\n19           5.7         3.8          1.7         0.3     setosa\n20           5.1         3.8          1.5         0.3     setosa\n21           5.4         3.4          1.7         0.2     setosa\n22           5.1         3.7          1.5         0.4     setosa\n23           4.6         3.6          1.0         0.2     setosa\n24           5.1         3.3          1.7         0.5     setosa\n25           4.8         3.4          1.9         0.2     setosa\n26           5.0         3.0          1.6         0.2     setosa\n27           5.0         3.4          1.6         0.4     setosa\n28           5.2         3.5          1.5         0.2     setosa\n29           5.2         3.4          1.4         0.2     setosa\n30           4.7         3.2          1.6         0.2     setosa\n31           4.8         3.1          1.6         0.2     setosa\n32           5.4         3.4          1.5         0.4     setosa\n33           5.2         4.1          1.5         0.1     setosa\n34           5.5         4.2          1.4         0.2     setosa\n35           4.9         3.1          1.5         0.2     setosa\n36           5.0         3.2          1.2         0.2     setosa\n37           5.5         3.5          1.3         0.2     setosa\n38           4.9         3.6          1.4         0.1     setosa\n39           4.4         3.0          1.3         0.2     setosa\n40           5.1         3.4          1.5         0.2     setosa\n41           5.0         3.5          1.3         0.3     setosa\n42           4.5         2.3          1.3         0.3     setosa\n43           4.4         3.2          1.3         0.2     setosa\n44           5.0         3.5          1.6         0.6     setosa\n45           5.1         3.8          1.9         0.4     setosa\n46           4.8         3.0          1.4         0.3     setosa\n47           5.1         3.8          1.6         0.2     setosa\n48           4.6         3.2          1.4         0.2     setosa\n49           5.3         3.7          1.5         0.2     setosa\n50           5.0         3.3          1.4         0.2     setosa\n51           7.0         3.2          4.7         1.4 versicolor\n52           6.4         3.2          4.5         1.5 versicolor\n53           6.9         3.1          4.9         1.5 versicolor\n54           5.5         2.3          4.0         1.3 versicolor\n55           6.5         2.8          4.6         1.5 versicolor\n56           5.7         2.8          4.5         1.3 versicolor\n57           6.3         3.3          4.7         1.6 versicolor\n58           4.9         2.4          3.3         1.0 versicolor\n59           6.6         2.9          4.6         1.3 versicolor\n60           5.2         2.7          3.9         1.4 versicolor\n61           5.0         2.0          3.5         1.0 versicolor\n62           5.9         3.0          4.2         1.5 versicolor\n63           6.0         2.2          4.0         1.0 versicolor\n64           6.1         2.9          4.7         1.4 versicolor\n65           5.6         2.9          3.6         1.3 versicolor\n66           6.7         3.1          4.4         1.4 versicolor\n67           5.6         3.0          4.5         1.5 versicolor\n68           5.8         2.7          4.1         1.0 versicolor\n69           6.2         2.2          4.5         1.5 versicolor\n70           5.6         2.5          3.9         1.1 versicolor\n71           5.9         3.2          4.8         1.8 versicolor\n72           6.1         2.8          4.0         1.3 versicolor\n73           6.3         2.5          4.9         1.5 versicolor\n74           6.1         2.8          4.7         1.2 versicolor\n75           6.4         2.9          4.3         1.3 versicolor\n76           6.6         3.0          4.4         1.4 versicolor\n77           6.8         2.8          4.8         1.4 versicolor\n78           6.7         3.0          5.0         1.7 versicolor\n79           6.0         2.9          4.5         1.5 versicolor\n80           5.7         2.6          3.5         1.0 versicolor\n81           5.5         2.4          3.8         1.1 versicolor\n82           5.5         2.4          3.7         1.0 versicolor\n83           5.8         2.7          3.9         1.2 versicolor\n84           6.0         2.7          5.1         1.6 versicolor\n85           5.4         3.0          4.5         1.5 versicolor\n86           6.0         3.4          4.5         1.6 versicolor\n87           6.7         3.1          4.7         1.5 versicolor\n88           6.3         2.3          4.4         1.3 versicolor\n89           5.6         3.0          4.1         1.3 versicolor\n90           5.5         2.5          4.0         1.3 versicolor\n91           5.5         2.6          4.4         1.2 versicolor\n92           6.1         3.0          4.6         1.4 versicolor\n93           5.8         2.6          4.0         1.2 versicolor\n94           5.0         2.3          3.3         1.0 versicolor\n95           5.6         2.7          4.2         1.3 versicolor\n96           5.7         3.0          4.2         1.2 versicolor\n97           5.7         2.9          4.2         1.3 versicolor\n98           6.2         2.9          4.3         1.3 versicolor\n99           5.1         2.5          3.0         1.1 versicolor\n100          5.7         2.8          4.1         1.3 versicolor\n101          6.3         3.3          6.0         2.5  virginica\n102          5.8         2.7          5.1         1.9  virginica\n103          7.1         3.0          5.9         2.1  virginica\n104          6.3         2.9          5.6         1.8  virginica\n105          6.5         3.0          5.8         2.2  virginica\n106          7.6         3.0          6.6         2.1  virginica\n107          4.9         2.5          4.5         1.7  virginica\n108          7.3         2.9          6.3         1.8  virginica\n109          6.7         2.5          5.8         1.8  virginica\n110          7.2         3.6          6.1         2.5  virginica\n111          6.5         3.2          5.1         2.0  virginica\n112          6.4         2.7          5.3         1.9  virginica\n113          6.8         3.0          5.5         2.1  virginica\n114          5.7         2.5          5.0         2.0  virginica\n115          5.8         2.8          5.1         2.4  virginica\n116          6.4         3.2          5.3         2.3  virginica\n117          6.5         3.0          5.5         1.8  virginica\n118          7.7         3.8          6.7         2.2  virginica\n119          7.7         2.6          6.9         2.3  virginica\n120          6.0         2.2          5.0         1.5  virginica\n121          6.9         3.2          5.7         2.3  virginica\n122          5.6         2.8          4.9         2.0  virginica\n123          7.7         2.8          6.7         2.0  virginica\n124          6.3         2.7          4.9         1.8  virginica\n125          6.7         3.3          5.7         2.1  virginica\n126          7.2         3.2          6.0         1.8  virginica\n127          6.2         2.8          4.8         1.8  virginica\n128          6.1         3.0          4.9         1.8  virginica\n129          6.4         2.8          5.6         2.1  virginica\n130          7.2         3.0          5.8         1.6  virginica\n131          7.4         2.8          6.1         1.9  virginica\n132          7.9         3.8          6.4         2.0  virginica\n133          6.4         2.8          5.6         2.2  virginica\n134          6.3         2.8          5.1         1.5  virginica\n135          6.1         2.6          5.6         1.4  virginica\n136          7.7         3.0          6.1         2.3  virginica\n137          6.3         3.4          5.6         2.4  virginica\n138          6.4         3.1          5.5         1.8  virginica\n139          6.0         3.0          4.8         1.8  virginica\n140          6.9         3.1          5.4         2.1  virginica\n141          6.7         3.1          5.6         2.4  virginica\n142          6.9         3.1          5.1         2.3  virginica\n143          5.8         2.7          5.1         1.9  virginica\n144          6.8         3.2          5.9         2.3  virginica\n145          6.7         3.3          5.7         2.5  virginica\n146          6.7         3.0          5.2         2.3  virginica\n147          6.3         2.5          5.0         1.9  virginica\n148          6.5         3.0          5.2         2.0  virginica\n149          6.2         3.4          5.4         2.3  virginica\n150          5.9         3.0          5.1         1.8  virginica"
  },
  {
    "objectID": "slides/01-meet-r.html#tibbles-a-modern-take-on-dataframes-2",
    "href": "slides/01-meet-r.html#tibbles-a-modern-take-on-dataframes-2",
    "title": "Meet R",
    "section": "Tibbles: a modern take on dataframes",
    "text": "Tibbles: a modern take on dataframes\nLet‚Äôs compare the print method for the dataframe iris, before and after we convert it to a tibble.\n\nas_tibble(iris)\n\n# A tibble: 150 √ó 5\n   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n          <dbl>       <dbl>        <dbl>       <dbl> <fct>  \n 1          5.1         3.5          1.4         0.2 setosa \n 2          4.9         3            1.4         0.2 setosa \n 3          4.7         3.2          1.3         0.2 setosa \n 4          4.6         3.1          1.5         0.2 setosa \n 5          5           3.6          1.4         0.2 setosa \n 6          5.4         3.9          1.7         0.4 setosa \n 7          4.6         3.4          1.4         0.3 setosa \n 8          5           3.4          1.5         0.2 setosa \n 9          4.4         2.9          1.4         0.2 setosa \n10          4.9         3.1          1.5         0.1 setosa \n# ‚Ä¶ with 140 more rows\n# ‚Ñπ Use `print(n = ...)` to see more rows"
  },
  {
    "objectID": "slides/01-meet-r.html#exercise-2",
    "href": "slides/01-meet-r.html#exercise-2",
    "title": "Meet R",
    "section": "Exercise",
    "text": "Exercise\n\n\nCheck the weather forecast for your hometown (or a place of your choice).\nAssign the forecasted temperature in one vector and the corresponding time in another vector for at least 5 data points.\nMake a dataframe with those two variables.\nWhat‚Äôs the average temperature? And what‚Äôs its standard deviation?\nThen, visualize those data with a line-chart in which the x axis represents time and the y axis represents the forecasted temperature.\n\n\n\n\n2022 CBSER Summer School"
  },
  {
    "objectID": "slides/02-manipulate.html#the-tidyverse-is-an-ecosystem-of-packages-for-data-science",
    "href": "slides/02-manipulate.html#the-tidyverse-is-an-ecosystem-of-packages-for-data-science",
    "title": "Manipulate Data",
    "section": "The Tidyverse is an ecosystem of packages for Data Science",
    "text": "The Tidyverse is an ecosystem of packages for Data Science\nAll the packages share a common design:\n\nOne function does one thing, well.\nDesigned for pipes.\nExtensive user-friendly documentation.\nNon-standard evaluation, to write code quickly and easily.\n\n\nAll packages can be loaded with library(tidyverse), but you can also load single packages one by one."
  },
  {
    "objectID": "slides/02-manipulate.html#we-first-explore-the-palmer-penguins-dataset",
    "href": "slides/02-manipulate.html#we-first-explore-the-palmer-penguins-dataset",
    "title": "Manipulate Data",
    "section": "We first explore the Palmer Penguins Dataset",
    "text": "We first explore the Palmer Penguins Dataset\nThe Penguins Dataset stores real data about palmer penguins. This R data package was developed and is maintained by Allison Horst, Alison Hill and Kirsten Gorman for teaching purposes.\n\nLet‚Äôs install the package‚Ä¶\n\ninstall.packages('palmerpenguins')\n\n\n\n‚Ä¶and load it in R.\n\nlibrary(palmerpenguins)"
  },
  {
    "objectID": "slides/02-manipulate.html#palmerpenguins-exports-two-datasets",
    "href": "slides/02-manipulate.html#palmerpenguins-exports-two-datasets",
    "title": "Manipulate Data",
    "section": "palmerpenguins exports two datasets",
    "text": "palmerpenguins exports two datasets\n\npenguins_raw\n\n# A tibble: 344 √ó 17\n   studyName Sample Num‚Ä¶¬π Species Region Island Stage Indiv‚Ä¶¬≤ Clutc‚Ä¶¬≥ `Date Egg`\n   <chr>            <dbl> <chr>   <chr>  <chr>  <chr> <chr>   <chr>   <date>    \n 1 PAL0708              1 Adelie‚Ä¶ Anvers Torge‚Ä¶ Adul‚Ä¶ N1A1    Yes     2007-11-11\n 2 PAL0708              2 Adelie‚Ä¶ Anvers Torge‚Ä¶ Adul‚Ä¶ N1A2    Yes     2007-11-11\n 3 PAL0708              3 Adelie‚Ä¶ Anvers Torge‚Ä¶ Adul‚Ä¶ N2A1    Yes     2007-11-16\n 4 PAL0708              4 Adelie‚Ä¶ Anvers Torge‚Ä¶ Adul‚Ä¶ N2A2    Yes     2007-11-16\n 5 PAL0708              5 Adelie‚Ä¶ Anvers Torge‚Ä¶ Adul‚Ä¶ N3A1    Yes     2007-11-16\n 6 PAL0708              6 Adelie‚Ä¶ Anvers Torge‚Ä¶ Adul‚Ä¶ N3A2    Yes     2007-11-16\n 7 PAL0708              7 Adelie‚Ä¶ Anvers Torge‚Ä¶ Adul‚Ä¶ N4A1    No      2007-11-15\n 8 PAL0708              8 Adelie‚Ä¶ Anvers Torge‚Ä¶ Adul‚Ä¶ N4A2    No      2007-11-15\n 9 PAL0708              9 Adelie‚Ä¶ Anvers Torge‚Ä¶ Adul‚Ä¶ N5A1    Yes     2007-11-09\n10 PAL0708             10 Adelie‚Ä¶ Anvers Torge‚Ä¶ Adul‚Ä¶ N5A2    Yes     2007-11-09\n# ‚Ä¶ with 334 more rows, 8 more variables: `Culmen Length (mm)` <dbl>,\n#   `Culmen Depth (mm)` <dbl>, `Flipper Length (mm)` <dbl>,\n#   `Body Mass (g)` <dbl>, Sex <chr>, `Delta 15 N (o/oo)` <dbl>,\n#   `Delta 13 C (o/oo)` <dbl>, Comments <chr>, and abbreviated variable names\n#   ¬π‚Äã`Sample Number`, ¬≤‚Äã`Individual ID`, ¬≥‚Äã`Clutch Completion`\n# ‚Ñπ Use `print(n = ...)` to see more rows, and `colnames()` to see all variable names"
  },
  {
    "objectID": "slides/02-manipulate.html#palmerpenguins-exports-two-datasets-1",
    "href": "slides/02-manipulate.html#palmerpenguins-exports-two-datasets-1",
    "title": "Manipulate Data",
    "section": "palmerpenguins exports two datasets",
    "text": "palmerpenguins exports two datasets\n\npenguins\n\n# A tibble: 344 √ó 8\n   species island    bill_length_mm bill_depth_mm flipper_‚Ä¶¬π body_‚Ä¶¬≤ sex    year\n   <fct>   <fct>              <dbl>         <dbl>      <int>   <int> <fct> <int>\n 1 Adelie  Torgersen           39.1          18.7        181    3750 male   2007\n 2 Adelie  Torgersen           39.5          17.4        186    3800 fema‚Ä¶  2007\n 3 Adelie  Torgersen           40.3          18          195    3250 fema‚Ä¶  2007\n 4 Adelie  Torgersen           NA            NA           NA      NA <NA>   2007\n 5 Adelie  Torgersen           36.7          19.3        193    3450 fema‚Ä¶  2007\n 6 Adelie  Torgersen           39.3          20.6        190    3650 male   2007\n 7 Adelie  Torgersen           38.9          17.8        181    3625 fema‚Ä¶  2007\n 8 Adelie  Torgersen           39.2          19.6        195    4675 male   2007\n 9 Adelie  Torgersen           34.1          18.1        193    3475 <NA>   2007\n10 Adelie  Torgersen           42            20.2        190    4250 <NA>   2007\n# ‚Ä¶ with 334 more rows, and abbreviated variable names ¬π‚Äãflipper_length_mm,\n#   ¬≤‚Äãbody_mass_g\n# ‚Ñπ Use `print(n = ...)` to see more rows\n\n\nWe will use the first one: penguins, which has already been cleaned."
  },
  {
    "objectID": "slides/02-manipulate.html#exercise",
    "href": "slides/02-manipulate.html#exercise",
    "title": "Manipulate Data",
    "section": "Exercise",
    "text": "Exercise\nThe print method for a tibble gives you a reasonable overview of the data stored in it.\nCan you get more details with the package skimr?\nCheck its documentation, install it, try it out on the penguins dataset. Comment on the output: is it useful? How?."
  },
  {
    "objectID": "slides/02-manipulate.html#a-grammar-for-data-manipulation",
    "href": "slides/02-manipulate.html#a-grammar-for-data-manipulation",
    "title": "Manipulate Data",
    "section": "A grammar for data manipulation",
    "text": "A grammar for data manipulation\n\n\n\n\nDplyr provides a grammar for manipulating data, with many useful verbs:\n\nmutate() adds new variables that are functions of existing variables\nselect() picks variables based on their names.\nfilter() picks cases based on their values.\nsummarise() reduces multiple values down to a single summary.\ngroup_by() performs operations by group."
  },
  {
    "objectID": "slides/02-manipulate.html#we-can-apply-those-verbs-to-manipulate-data",
    "href": "slides/02-manipulate.html#we-can-apply-those-verbs-to-manipulate-data",
    "title": "Manipulate Data",
    "section": "We can apply those verbs to manipulate data",
    "text": "We can apply those verbs to manipulate data\n\npenguins %>%\n  mutate(bill_length_meters = bill_length_mm/1000)\n\n# A tibble: 344 √ó 9\n   species island    bill_length_mm bill_d‚Ä¶¬π flipp‚Ä¶¬≤ body_‚Ä¶¬≥ sex    year bill_‚Ä¶‚Å¥\n   <fct>   <fct>              <dbl>    <dbl>   <int>   <int> <fct> <int>   <dbl>\n 1 Adelie  Torgersen           39.1     18.7     181    3750 male   2007  0.0391\n 2 Adelie  Torgersen           39.5     17.4     186    3800 fema‚Ä¶  2007  0.0395\n 3 Adelie  Torgersen           40.3     18       195    3250 fema‚Ä¶  2007  0.0403\n 4 Adelie  Torgersen           NA       NA        NA      NA <NA>   2007 NA     \n 5 Adelie  Torgersen           36.7     19.3     193    3450 fema‚Ä¶  2007  0.0367\n 6 Adelie  Torgersen           39.3     20.6     190    3650 male   2007  0.0393\n 7 Adelie  Torgersen           38.9     17.8     181    3625 fema‚Ä¶  2007  0.0389\n 8 Adelie  Torgersen           39.2     19.6     195    4675 male   2007  0.0392\n 9 Adelie  Torgersen           34.1     18.1     193    3475 <NA>   2007  0.0341\n10 Adelie  Torgersen           42       20.2     190    4250 <NA>   2007  0.042 \n# ‚Ä¶ with 334 more rows, and abbreviated variable names ¬π‚Äãbill_depth_mm,\n#   ¬≤‚Äãflipper_length_mm, ¬≥‚Äãbody_mass_g, ‚Å¥‚Äãbill_length_meters\n# ‚Ñπ Use `print(n = ...)` to see more rows"
  },
  {
    "objectID": "slides/02-manipulate.html#we-can-apply-those-verbs-to-manipulate-data-1",
    "href": "slides/02-manipulate.html#we-can-apply-those-verbs-to-manipulate-data-1",
    "title": "Manipulate Data",
    "section": "We can apply those verbs to manipulate data",
    "text": "We can apply those verbs to manipulate data\n\npenguins %>%\n  select(bill_length_mm) %>% \n  mutate(bill_length_meters = bill_length_mm/1000)\n\n# A tibble: 344 √ó 2\n   bill_length_mm bill_length_meters\n            <dbl>              <dbl>\n 1           39.1             0.0391\n 2           39.5             0.0395\n 3           40.3             0.0403\n 4           NA              NA     \n 5           36.7             0.0367\n 6           39.3             0.0393\n 7           38.9             0.0389\n 8           39.2             0.0392\n 9           34.1             0.0341\n10           42               0.042 \n# ‚Ä¶ with 334 more rows\n# ‚Ñπ Use `print(n = ...)` to see more rows"
  },
  {
    "objectID": "slides/02-manipulate.html#we-can-apply-those-verbs-to-manipulate-data-2",
    "href": "slides/02-manipulate.html#we-can-apply-those-verbs-to-manipulate-data-2",
    "title": "Manipulate Data",
    "section": "We can apply those verbs to manipulate data",
    "text": "We can apply those verbs to manipulate data\n\npenguins %>%\n  select(species, island, bill_length_mm) %>% \n  mutate(bill_length_meters = bill_length_mm/1000)\n\n# A tibble: 344 √ó 4\n   species island    bill_length_mm bill_length_meters\n   <fct>   <fct>              <dbl>              <dbl>\n 1 Adelie  Torgersen           39.1             0.0391\n 2 Adelie  Torgersen           39.5             0.0395\n 3 Adelie  Torgersen           40.3             0.0403\n 4 Adelie  Torgersen           NA              NA     \n 5 Adelie  Torgersen           36.7             0.0367\n 6 Adelie  Torgersen           39.3             0.0393\n 7 Adelie  Torgersen           38.9             0.0389\n 8 Adelie  Torgersen           39.2             0.0392\n 9 Adelie  Torgersen           34.1             0.0341\n10 Adelie  Torgersen           42               0.042 \n# ‚Ä¶ with 334 more rows\n# ‚Ñπ Use `print(n = ...)` to see more rows"
  },
  {
    "objectID": "slides/02-manipulate.html#we-can-apply-those-verbs-to-manipulate-data-3",
    "href": "slides/02-manipulate.html#we-can-apply-those-verbs-to-manipulate-data-3",
    "title": "Manipulate Data",
    "section": "We can apply those verbs to manipulate data",
    "text": "We can apply those verbs to manipulate data\n\npenguins %>%\n count(island)\n\n# A tibble: 3 √ó 2\n  island        n\n  <fct>     <int>\n1 Biscoe      168\n2 Dream       124\n3 Torgersen    52"
  },
  {
    "objectID": "slides/02-manipulate.html#we-can-apply-those-verbs-to-manipulate-data-4",
    "href": "slides/02-manipulate.html#we-can-apply-those-verbs-to-manipulate-data-4",
    "title": "Manipulate Data",
    "section": "We can apply those verbs to manipulate data",
    "text": "We can apply those verbs to manipulate data\n\npenguins %>%\n  select(species, island, bill_length_mm) %>% \n  filter(island == 'Dream') %>% \n  mutate(bill_length_meters = bill_length_mm/1000)\n\n# A tibble: 124 √ó 4\n   species island bill_length_mm bill_length_meters\n   <fct>   <fct>           <dbl>              <dbl>\n 1 Adelie  Dream            39.5             0.0395\n 2 Adelie  Dream            37.2             0.0372\n 3 Adelie  Dream            39.5             0.0395\n 4 Adelie  Dream            40.9             0.0409\n 5 Adelie  Dream            36.4             0.0364\n 6 Adelie  Dream            39.2             0.0392\n 7 Adelie  Dream            38.8             0.0388\n 8 Adelie  Dream            42.2             0.0422\n 9 Adelie  Dream            37.6             0.0376\n10 Adelie  Dream            39.8             0.0398\n# ‚Ä¶ with 114 more rows\n# ‚Ñπ Use `print(n = ...)` to see more rows"
  },
  {
    "objectID": "slides/02-manipulate.html#we-can-apply-those-verbs-to-manipulate-data-5",
    "href": "slides/02-manipulate.html#we-can-apply-those-verbs-to-manipulate-data-5",
    "title": "Manipulate Data",
    "section": "We can apply those verbs to manipulate data",
    "text": "We can apply those verbs to manipulate data\n\npenguins %>%\n  select(species, island, bill_length_mm) %>% \n  filter(island == 'Dream') %>% \n  mutate(bill_length_meters = bill_length_mm/1000) %>% \n  group_by(species)\n\n# A tibble: 124 √ó 4\n# Groups:   species [2]\n   species island bill_length_mm bill_length_meters\n   <fct>   <fct>           <dbl>              <dbl>\n 1 Adelie  Dream            39.5             0.0395\n 2 Adelie  Dream            37.2             0.0372\n 3 Adelie  Dream            39.5             0.0395\n 4 Adelie  Dream            40.9             0.0409\n 5 Adelie  Dream            36.4             0.0364\n 6 Adelie  Dream            39.2             0.0392\n 7 Adelie  Dream            38.8             0.0388\n 8 Adelie  Dream            42.2             0.0422\n 9 Adelie  Dream            37.6             0.0376\n10 Adelie  Dream            39.8             0.0398\n# ‚Ä¶ with 114 more rows\n# ‚Ñπ Use `print(n = ...)` to see more rows"
  },
  {
    "objectID": "slides/02-manipulate.html#we-can-apply-those-verbs-to-manipulate-data-6",
    "href": "slides/02-manipulate.html#we-can-apply-those-verbs-to-manipulate-data-6",
    "title": "Manipulate Data",
    "section": "We can apply those verbs to manipulate data",
    "text": "We can apply those verbs to manipulate data\n\npenguins %>%\n  select(species, island, bill_length_mm) %>% \n  filter(island == 'Dream') %>% \n  mutate(bill_length_meters = bill_length_mm/1000) %>% \n  group_by(species) %>% \n  summarise(mean_bill_length_mm = mean(bill_length_mm),\n            sd_bill_length_mm = sd(bill_length_mm))\n\n# A tibble: 2 √ó 3\n  species   mean_bill_length_mm sd_bill_length_mm\n  <fct>                   <dbl>             <dbl>\n1 Adelie                   38.5              2.47\n2 Chinstrap                48.8              3.34"
  },
  {
    "objectID": "slides/02-manipulate.html#we-can-apply-those-verbs-to-manipulate-data-7",
    "href": "slides/02-manipulate.html#we-can-apply-those-verbs-to-manipulate-data-7",
    "title": "Manipulate Data",
    "section": "We can apply those verbs to manipulate data",
    "text": "We can apply those verbs to manipulate data\n\ndream_summary <- \n  penguins %>%\n  select(species, island, bill_length_mm) %>% \n  filter(island == 'Dream') %>% \n  mutate(bill_length_meters = bill_length_mm/1000) %>% \n  group_by(species) %>% \n  summarise(mean_bill_length_mm = mean(bill_length_mm),\n            sd_bill_length_mm = sd(bill_length_mm))\n\nLet‚Äôs assign the output to a new variable dream_summary."
  },
  {
    "objectID": "slides/02-manipulate.html#section-1",
    "href": "slides/02-manipulate.html#section-1",
    "title": "Manipulate Data",
    "section": "",
    "text": "In the previous code we have seen also two additional aspects that feature heavily in the tidyverse:\n\nThe Pipe %>%.\nNon-Standard Evaluation."
  },
  {
    "objectID": "slides/02-manipulate.html#the-pipe",
    "href": "slides/02-manipulate.html#the-pipe",
    "title": "Manipulate Data",
    "section": "The Pipe %>%",
    "text": "The Pipe %>%\n\n\n\n\n\n\nThe pipe is provided by the package magrittr, it‚Äôs a forwarding operator:\n\nIt takes the ouput of what comes before (LHS) and sends it to the first argument of the function that comes after (RHS).\n\nLHS %>% RHS"
  },
  {
    "objectID": "slides/02-manipulate.html#the-pipe-1",
    "href": "slides/02-manipulate.html#the-pipe-1",
    "title": "Manipulate Data",
    "section": "The Pipe %>%",
    "text": "The Pipe %>%\nFor example, you could write:\n\nselect(penguins, species, body_mass_g)\n\n# A tibble: 344 √ó 2\n   species body_mass_g\n   <fct>         <int>\n 1 Adelie         3750\n 2 Adelie         3800\n 3 Adelie         3250\n 4 Adelie           NA\n 5 Adelie         3450\n 6 Adelie         3650\n 7 Adelie         3625\n 8 Adelie         4675\n 9 Adelie         3475\n10 Adelie         4250\n# ‚Ä¶ with 334 more rows\n# ‚Ñπ Use `print(n = ...)` to see more rows"
  },
  {
    "objectID": "slides/02-manipulate.html#the-pipe-2",
    "href": "slides/02-manipulate.html#the-pipe-2",
    "title": "Manipulate Data",
    "section": "The Pipe %>%",
    "text": "The Pipe %>%\n‚Ä¶but if you use the pipe, your code is easier to read‚Ä¶\n\npenguins %>% select(species, body_mass_g)\n\n# A tibble: 344 √ó 2\n   species body_mass_g\n   <fct>         <int>\n 1 Adelie         3750\n 2 Adelie         3800\n 3 Adelie         3250\n 4 Adelie           NA\n 5 Adelie         3450\n 6 Adelie         3650\n 7 Adelie         3625\n 8 Adelie         4675\n 9 Adelie         3475\n10 Adelie         4250\n# ‚Ä¶ with 334 more rows\n# ‚Ñπ Use `print(n = ...)` to see more rows"
  },
  {
    "objectID": "slides/02-manipulate.html#the-pipe-3",
    "href": "slides/02-manipulate.html#the-pipe-3",
    "title": "Manipulate Data",
    "section": "The Pipe %>%",
    "text": "The Pipe %>%\n‚Ä¶especially if you have to perform many operations one after the other‚Ä¶\n\npenguins %>%\n  select(species, body_mass_g) %>% \n  filter(species == 'Adelie')\n\n# A tibble: 152 √ó 2\n   species body_mass_g\n   <fct>         <int>\n 1 Adelie         3750\n 2 Adelie         3800\n 3 Adelie         3250\n 4 Adelie           NA\n 5 Adelie         3450\n 6 Adelie         3650\n 7 Adelie         3625\n 8 Adelie         4675\n 9 Adelie         3475\n10 Adelie         4250\n# ‚Ä¶ with 142 more rows\n# ‚Ñπ Use `print(n = ...)` to see more rows"
  },
  {
    "objectID": "slides/02-manipulate.html#the-pipe-4",
    "href": "slides/02-manipulate.html#the-pipe-4",
    "title": "Manipulate Data",
    "section": "The Pipe %>%",
    "text": "The Pipe %>%\n‚Ä¶that otherwise would force you to nest your code horribly.\n\nfilter(\n  select(\n    penguins,\n    species, body_mass_g\n  ),\n  species == 'Adelie'\n)\n\n# A tibble: 152 √ó 2\n   species body_mass_g\n   <fct>         <int>\n 1 Adelie         3750\n 2 Adelie         3800\n 3 Adelie         3250\n 4 Adelie           NA\n 5 Adelie         3450\n 6 Adelie         3650\n 7 Adelie         3625\n 8 Adelie         4675\n 9 Adelie         3475\n10 Adelie         4250\n# ‚Ä¶ with 142 more rows\n# ‚Ñπ Use `print(n = ...)` to see more rows"
  },
  {
    "objectID": "slides/02-manipulate.html#non-standard-evaluation",
    "href": "slides/02-manipulate.html#non-standard-evaluation",
    "title": "Manipulate Data",
    "section": "Non-Standard Evaluation",
    "text": "Non-Standard Evaluation\nThis one is difficult‚Ä¶\n\nWhich argument does the function select() take? Let‚Äôs check it in its help page with ?select.\n\n?select\n\nUnder the Usage section it says:\nselect(.data, ...)\n\n\nAnd then in the section Arguments the help page says:\n.data: A data frame, data frame extension (e.g. a tibble), or a lazy data frame (e.g. from dbplyr or dtplyr). See Methods, below, for more details.\n\n...: <tidy-select> One or more unquoted expressions separated by commas. Variable names can be used as if they were positions in the data frame, so expressions like x:y can be used to select a range of variables."
  },
  {
    "objectID": "slides/02-manipulate.html#non-standard-evaluation-1",
    "href": "slides/02-manipulate.html#non-standard-evaluation-1",
    "title": "Manipulate Data",
    "section": "Non-Standard Evaluation",
    "text": "Non-Standard Evaluation\nSo, what are do we mean if we write:\n\npenguins %>% \n  select(species, island)\n\n\nThe penguins tibble is fills the.data parameter through the pipe %>%.\nThe unquoted names species, island fill the argument ..., they represent the names of the columns to be selected.\n\n\nBut the name of columns in a tibble is a character vector.\n\ncolnames(penguins)\n\n[1] \"species\"           \"island\"            \"bill_length_mm\"   \n[4] \"bill_depth_mm\"     \"flipper_length_mm\" \"body_mass_g\"      \n[7] \"sex\"               \"year\""
  },
  {
    "objectID": "slides/02-manipulate.html#non-standard-evaluation-2",
    "href": "slides/02-manipulate.html#non-standard-evaluation-2",
    "title": "Manipulate Data",
    "section": "Non-Standard Evaluation",
    "text": "Non-Standard Evaluation\nThrough non-standard evaluation, in the function select, we can call element of a character vector like if they were variables (without quoting them).\n\npenguins %>% \n  select(species, island)\n\nThe variables species and island don‚Äôt exist outside of the dplyr function select().\n\nspecies\n\nError in eval(expr, envir, enclos): object 'species' not found"
  },
  {
    "objectID": "slides/02-manipulate.html#section-2",
    "href": "slides/02-manipulate.html#section-2",
    "title": "Manipulate Data",
    "section": "",
    "text": "With non-standard evaluation we can write names without quoting them. This makes writing code for iterative data exploration faster.\n\nIf you come from a more strict programming language, it could be hard to get use to this behaviour.\n\n\nMost function of the Tidyverse do non-standard evaluation."
  },
  {
    "objectID": "slides/02-manipulate.html#exercise-1",
    "href": "slides/02-manipulate.html#exercise-1",
    "title": "Manipulate Data",
    "section": "Exercise",
    "text": "Exercise\nWith the penguin dataset:\n\n\nSelect all numeric variables (columns).\nConvert all variables that are expressed in millimeters into meters, rename them accordingly.\n\n\nGet help from:\n\nDplyr‚Äôs website.\nThe Data Wrangling Chapter of R4DS."
  },
  {
    "objectID": "slides/02-manipulate.html#exercise-2",
    "href": "slides/02-manipulate.html#exercise-2",
    "title": "Manipulate Data",
    "section": "Exercise",
    "text": "Exercise\nMove all the defined variable of the penguins dataset (species, island, sex, year) to the left of the measured variables.\nDoes any of the defined variables has missing data? In case remove the corresponding row.\nThen group the dataset by all of those variable defined variables and estimate the minimum for each measured variable of each group."
  },
  {
    "objectID": "slides/02-manipulate.html#exercise-3",
    "href": "slides/02-manipulate.html#exercise-3",
    "title": "Manipulate Data",
    "section": "Exercise",
    "text": "Exercise\nHow many penguins have bill_length_mm above average?\nRepeat the analysis for each species.\n\n\n2022 CBSER Summer School"
  },
  {
    "objectID": "slides/03-visualize.html#we-are-bad-at-recognizing-pattern-from-raw-data",
    "href": "slides/03-visualize.html#we-are-bad-at-recognizing-pattern-from-raw-data",
    "title": "Data Visualization",
    "section": "We are bad at recognizing pattern from raw data",
    "text": "We are bad at recognizing pattern from raw data\n\n\n# A tibble: 2,582 √ó 2\n         x      y\n     <dbl>  <dbl>\n   1  87.9 162.  \n   2 308   400   \n   3 405   379   \n   4 268   232   \n   5 257   251   \n   6 502   479   \n   7 263   249   \n   8 180.   52.7 \n   9 159.  126.  \n  10 271   235   \n  11 149   185   \n  12 797   305   \n  13 656   414   \n  14 133.  135.  \n  15 799   303   \n  16 344   316   \n  17 153.  123.  \n  18  99.6  74.8 \n  19 124.  133.  \n  20 110   123.  \n  21 590   386   \n  22 558   434   \n  23 118.   74.8 \n  24 738   401   \n  25 381   425   \n  26 387   362   \n  27 653   410   \n  28 136    30.6 \n  29 250   242   \n  30 479   482   \n  31 593   438   \n  32 327   358   \n  33 794   310   \n  34 157   151   \n  35 256   270   \n  36 492   445   \n  37 196   154   \n  38 186   197   \n  39 782   329   \n  40 425   447   \n  41 720   400   \n  42 287   257   \n  43 261   364   \n  44 445   459   \n  45 291   381   \n  46 309   286   \n  47 819   307   \n  48 179   203   \n  49 154.   91.7 \n  50 270   394   \n  51 325   384   \n  52 345   322   \n  53 175   143   \n  54 289   411   \n  55 198   213   \n  56 450   472   \n  57 540   384   \n  58 567   416   \n  59 149    91.7 \n  60 237   190   \n  61 246   348   \n  62 322   351   \n  63 234   257   \n  64 328   387   \n  65 137.   26.7 \n  66 698   430   \n  67 105.   98.2 \n  68 603   390   \n  69 269   356   \n  70 518   476   \n  71  87.9  90.4 \n  72 175    67   \n  73 315   294   \n  74 627   464   \n  75 350   338   \n  76 176.  101.  \n  77 492   482   \n  78 312   322   \n  79 530   476   \n  80 748   392   \n  81 257   272   \n  82 732   407   \n  83 331   316   \n  84 418   454   \n  85  76.2 161.  \n  86 140.    3.30\n  87 268   282   \n  88 266   339   \n  89 268   267   \n  90 169   178   \n  91 115.   24.1 \n  92 767   375   \n  93 594   425   \n  94 346   359   \n  95 805   332   \n  96 223   169   \n  97 139.   59.2 \n  98 102.   52.7 \n  99 156.  116.  \n 100  77.5  56.6 \n 101  94.4 141.  \n 102 142.    7.20\n 103 174.  114.  \n 104 107.  120.  \n 105 344   323   \n 106 170.  116.  \n 107 667   449   \n 108 150.  103.  \n 109 375   397   \n 110 221   175   \n 111 235   220   \n 112 768   345   \n 113 608   394   \n 114 136   159.  \n 115 318   297   \n 116 130.  135.  \n 117 241   285   \n 118 266   388   \n 119 645   437   \n 120 109.   68.3 \n 121  71   158   \n 122 202   135   \n 123 116.   85.2 \n 124 519   410   \n 125 273   239   \n 126 297   402   \n 127 253   245   \n 128 571   436   \n 129 237   247   \n 130 418   399   \n 131 335   407   \n 132  76.2 154.  \n 133 753   383   \n 134 172   179   \n 135 730   385   \n 136 159   176   \n 137 231   215   \n 138 145.   95.6 \n 139 283   352   \n 140 295   416   \n 141 126.   93   \n 142 783   361   \n 143 543   388   \n 144 566   395   \n 145 761   382   \n 146 657   416   \n 147  91.8  41   \n 148 292   303   \n 149 160   208   \n 150 193   135   \n 151 180.   46.2 \n 152 120.   77.4 \n 153 124.  132   \n 154 672   446   \n 155 128.   16.3 \n 156 367   356   \n 157 270   323   \n 158 550   378   \n 159 650   416   \n 160 148.  103.  \n 161 303   333   \n 162 136   205   \n 163 418   453   \n 164 616   414   \n 165  89.2 162.  \n 166 636   444   \n 167 148.   28   \n 168  64.5  86.5 \n 169 447   471   \n 170 201   130   \n 171 126.   57.9 \n 172 244   290   \n 173 306   337   \n 174 382   378   \n 175 361   311   \n 176  65.8 141.  \n 177 130.  167.  \n 178 253   365   \n 179 179   243   \n 180 777   334   \n 181 803   335   \n 182 246   341   \n 183 216   211   \n 184 137.    2   \n 185 177   244   \n 186 187   141   \n 187 143   214   \n 188  86.6  78.7 \n 189 160   165   \n 190 140.   57.9 \n 191 325   355   \n 192 334   374   \n 193 592   446   \n 194 185   205   \n 195  93.1  90.4 \n 196 149    51.4 \n 197  58   114.  \n 198 256   215   \n 199 314   339   \n 200 324   306   \n 201 455   478   \n 202  86.6  60.5 \n 203 144.  114.  \n 204 502   455   \n 205 394   450   \n 206 176.   95.6 \n 207 432   391   \n 208 811   322   \n 209 223   262   \n 210 266   230   \n 211 272   334   \n 212 377   395   \n 213 346   333   \n 214 486   472   \n 215 152.   37.1 \n 216 355   431   \n 217 277   292   \n 218 362   338   \n 219 116.  101.  \n 220 262   224   \n 221 570   376   \n 222 799   333   \n 223 362   370   \n 224 174.  115.  \n 225 356   307   \n 226 120.  131.  \n 227 163.   83.9 \n 228 104.  150.  \n 229 119.   59.2 \n 230 263   280   \n 231 463   440   \n 232 334   353   \n 233 259   256   \n 234 386   364   \n 235 567   387   \n 236 400   379   \n 237 342   362   \n 238 118.   94.3 \n 239 489   482   \n 240 198   203   \n 241 159.  122.  \n 242 302   303   \n 243 328   311   \n 244 281   389   \n 245 218   255   \n 246  77.5 133.  \n 247 208   244   \n 248 145.   20.2 \n 249 165   226   \n 250 361   370   \n 251 292   302   \n 252 722   392   \n 253 198   134   \n 254  93.1  47.5 \n 255 105.  102.  \n 256 470   476   \n 257 263   258   \n 258 467   428   \n 259 165.  115.  \n 260 149   152.  \n 261 518   477   \n 262 622   458   \n 263 416   455   \n 264 197   196   \n 265 780   365   \n 266  77.5 145   \n 267 139.   90.4 \n 268 113.   72.2 \n 269 747   368   \n 270 295   415   \n 271 417   454   \n 272 113.   86.5 \n 273 114.   60.5 \n 274 250   301   \n 275 349   408   \n 276 285   406   \n 277 190   158   \n 278 429   465   \n 279 122.  132   \n 280 164   140   \n 281 309   336   \n 282 603   437   \n 283 272   237   \n 284 229   239   \n 285 647   449   \n 286 646   429   \n 287 183   238   \n 288 266   387   \n 289 269   282   \n 290 273   292   \n 291 672   440   \n 292 192   130   \n 293 461   401   \n 294 300   400   \n 295 805   289   \n 296 724   412   \n 297 352   397   \n 298 742   399   \n 299 612   457   \n 300 212   150   \n 301 150.   29.3 \n 302 319   348   \n 303 181   203   \n 304 552   463   \n 305 136    35.8 \n 306 392   385   \n 307 192   135   \n 308 179.   56.6 \n 309 166   228   \n 310 304   303   \n 311 487   399   \n 312 170.   60.5 \n 313 154   211   \n 314 337   416   \n 315 413   418   \n 316 262   374   \n 317 347   425   \n 318 563   480   \n 319 332   384   \n 320 106.  154.  \n 321 412   422   \n 322 349   337   \n 323 167   177   \n 324 806   331   \n 325 289   336   \n 326 460   448   \n 327 377   427   \n 328 122.  176.  \n 329 160   198   \n 330 725   389   \n 331 354   431   \n 332 137.  135.  \n 333 180.   50.1 \n 334 371   408   \n 335 366   386   \n 336  94.4 175.  \n 337 348   416   \n 338 310   386   \n 339 143   199   \n 340 146.   24.1 \n 341 260   372   \n 342 120.  103.  \n 343 369   328   \n 344 500   468   \n 345 141.   47.5 \n 346  55.4  93   \n 347 437   473   \n 348 267   391   \n 349 491   425   \n 350 256   250   \n 351  82.7 140.  \n 352 587   444   \n 353 451   477   \n 354 115.   73.5 \n 355 220   250   \n 356 157   159   \n 357 782   363   \n 358 272   332   \n 359 127.  150.  \n 360 188   163   \n 361 408   427   \n 362 792   314   \n 363 116.   60.5 \n 364 260   353   \n 365  76.2  51.4 \n 366 337   334   \n 367 654   422   \n 368 297   339   \n 369 187   134   \n 370 116.  152.  \n 371  65.8 115.  \n 372 141   195   \n 373  97    76.1 \n 374  69.7 107.  \n 375 150.   83.9 \n 376 411   395   \n 377 126.  109.  \n 378 130.  161.  \n 379 389   453   \n 380 331   411   \n 381 553   462   \n 382 183   159   \n 383 119.   93   \n 384 146   173   \n 385 139.   25.4 \n 386 783   328   \n 387 292   395   \n 388 422   401   \n 389 277   271   \n 390 305   415   \n 391 178   146   \n 392 122.   43.6 \n 393 332   325   \n 394 427   433   \n 395  91.8 161.  \n 396 294   266   \n 397 363   327   \n 398 421   416   \n 399 127.   30.6 \n 400 350   309   \n 401 628   393   \n 402 588   426   \n 403 122.   21.5 \n 404 549   383   \n 405 164   173   \n 406 385   367   \n 407 292   372   \n 408 191   142   \n 409 218   226   \n 410  91.8 144.  \n 411 264   354   \n 412 525   405   \n 413 566   398   \n 414 561   374   \n 415 136    16.3 \n 416 354   407   \n 417 119.   83.9 \n 418 312   388   \n 419 269   314   \n 420 814   316   \n 421 362   311   \n 422 808   286   \n 423 144   183   \n 424 550   466   \n 425 554   386   \n 426 136    28   \n 427 182   143   \n 428 254   268   \n 429 137.   37.1 \n 430 222   225   \n 431  73.6 140.  \n 432 109.   28   \n 433 151   226   \n 434 771   342   \n 435  77.5  48.8 \n 436 367   331   \n 437 780   330   \n 438 434   407   \n 439 402   385   \n 440 246   295   \n 441 145.   22.8 \n 442 327   409   \n 443 139.   38.4 \n 444 279   248   \n 445 171.   20.2 \n 446 124.   56.6 \n 447 617   409   \n 448 608   403   \n 449 726   405   \n 450 128.   39.7 \n 451 252   339   \n 452 362   352   \n 453 107.   63.1 \n 454 180.   48.8 \n 455  82.7  81.3 \n 456 184   238   \n 457 747   395   \n 458 569   479   \n 459 421   462   \n 460 257   357   \n 461 259   220   \n 462 361   310   \n 463 212   240   \n 464 350   428   \n 465 426   446   \n 466 258   345   \n 467  86.6  65.7 \n 468 232   184   \n 469 123    42.3 \n 470 813   284   \n 471 217   156   \n 472 560   374   \n 473 820   287   \n 474 130.  141.  \n 475 533   400   \n 476 624   451   \n 477 464   438   \n 478 154   232   \n 479 226   243   \n 480 165.  107.  \n 481 159.  124.  \n 482 553   482   \n 483 269   243   \n 484 174   138   \n 485 382   430   \n 486 818   284   \n 487 416   406   \n 488  72.3 162.  \n 489 591   441   \n 490  85.3 145   \n 491 577   464   \n 492 182   158   \n 493 591   386   \n 494 227   236   \n 495 241   204   \n 496 254   269   \n 497 245   226   \n 498 634   446   \n 499 305   326   \n 500 131.   38.4 \n 501 361   436   \n 502 502   465   \n 503 566   394   \n 504  84    38.4 \n 505 124.   93   \n 506 185   161   \n 507 251   320   \n 508 420   401   \n 509 162   179   \n 510 174.   90.4 \n 511 552   377   \n 512 284   361   \n 513 299   273   \n 514 118.  174.  \n 515  97    43.6 \n 516 145.   39.7 \n 517 558   481   \n 518 529   460   \n 519 247   333   \n 520 116.   74.8 \n 521 153.  122.  \n 522 136     7.20\n 523 289   342   \n 524 810   285   \n 525 341   326   \n 526 189   196   \n 527 131.  146.  \n 528 459   400   \n 529 647   448   \n 530  90.5  72.2 \n 531 238   225   \n 532 570   377   \n 533 247   238   \n 534  95.7  65.7 \n 535 784   326   \n 536 300   416   \n 537 619   468   \n 538 509   398   \n 539 344   373   \n 540 267   361   \n 541 704   426   \n 542 153.  105.  \n 543 326   358   \n 544 744   380   \n 545 149   140.  \n 546 126.   42.3 \n 547 124.  109.  \n 548 210   240   \n 549 380   448   \n 550 141.   52.7 \n 551 521   463   \n 552 255   301   \n 553 211   240   \n 554 676   424   \n 555 376   360   \n 556 518   467   \n 557 275   252   \n 558  68.4 112.  \n 559 635   402   \n 560 182.  181.  \n 561 366   366   \n 562 264   378   \n 563  95.7 152.  \n 564 158   197   \n 565 712   421   \n 566 363   430   \n 567 728   409   \n 568 127.   93   \n 569 717   412   \n 570 295   307   \n 571 168   214   \n 572 737   384   \n 573 644   412   \n 574 131.  144.  \n 575 166.  101.  \n 576 478   409   \n 577 205   237   \n 578 289   335   \n 579 641   415   \n 580 299   400   \n 581 221   236   \n 582 378   401   \n 583 155   210   \n 584 518   406   \n 585 570   465   \n 586 226   184   \n 587 566   420   \n 588 246   343   \n 589 152.   35.8 \n 590 220   214   \n 591 157.   33.2 \n 592 202   130   \n 593 757   376   \n 594 208   239   \n 595 456   445   \n 596 233   184   \n 597 383   395   \n 598 178.  105.  \n 599 166.   46.2 \n 600 757   379   \n 601 370   442   \n 602 152.   29.3 \n 603 566   454   \n 604 184   160   \n 605 459   407   \n 606  93.1 159.  \n 607 308   408   \n 608 489   437   \n 609 491   446   \n 610 453   400   \n 611 156   153   \n 612 233   273   \n 613 165   200   \n 614 160   144   \n 615 418   445   \n 616 110    50.1 \n 617 625   411   \n 618 789   327   \n 619 613   456   \n 620 510   402   \n 621 149   103.  \n 622 116.   59.2 \n 623 798   343   \n 624 305   337   \n 625 787   347   \n 626 368   410   \n 627 365   315   \n 628 159   204   \n 629 265   338   \n 630 653   411   \n 631  82.7  57.9 \n 632 253   267   \n 633 130.   38.4 \n 634 344   339   \n 635 776   347   \n 636 139.   57.9 \n 637 537   437   \n 638 793   311   \n 639 167   245   \n 640 344   347   \n 641 577   414   \n 642 122.  155.  \n 643 531   456   \n 644 111.  126.  \n 645 415   410   \n 646 216   209   \n 647 272   335   \n 648 165   174   \n 649 398   437   \n 650 533   434   \n 651 180.   51.4 \n 652 105.   44.9 \n 653 171.   73.5 \n 654 150.  112.  \n 655 110    87.8 \n 656 105.  127.  \n 657 579   386   \n 658 304   294   \n 659 300   338   \n 660 516   401   \n 661 750   391   \n 662 754   381   \n 663 717   417   \n 664 427   464   \n 665 563   393   \n 666 116.   22.8 \n 667 114.  141.  \n 668 289   322   \n 669 335   414   \n 670 467   480   \n 671 295   269   \n 672 200   130   \n 673 176   144   \n 674 477   482   \n 675 167.   44.9 \n 676 159.   44.9 \n 677 253   367   \n 678 333   370   \n 679 164   240   \n 680 498   417   \n 681 164   199   \n 682 411   400   \n 683 277   272   \n 684 506   458   \n 685 334   371   \n 686 133.   35.8 \n 687 150   176   \n 688 309   406   \n 689  77.5  50.1 \n 690 292   362   \n 691 758   357   \n 692 196   207   \n 693 159   145   \n 694 554   482   \n 695 237   199   \n 696 218   254   \n 697 306   317   \n 698  81.4  57.9 \n 699 763   380   \n 700 597   447   \n 701 104.  166.  \n 702 651   417   \n 703 178.  112.  \n 704 174   240   \n 705 760   382   \n 706 124.    4.60\n 707 148.   93   \n 708 258   346   \n 709 267   246   \n 710 797   344   \n 711 716   418   \n 712 513   402   \n 713 298   272   \n 714 361   377   \n 715 156   241   \n 716 221   188   \n 717 175   239   \n 718 122.  106   \n 719 341   328   \n 720 155   203   \n 721 295   339   \n 722 295   268   \n 723 793   348   \n 724 175    68.3 \n 725 294   345   \n 726 444   405   \n 727 245   258   \n 728 156.  103.  \n 729 119.  131.  \n 730 318   346   \n 731 462   426   \n 732 190   163   \n 733 386   369   \n 734 745   397   \n 735 322   311   \n 736 144   199   \n 737 568   416   \n 738 176.   99.5 \n 739 349   427   \n 740 423   412   \n 741 387   452   \n 742 282   397   \n 743 333   319   \n 744 225   232   \n 745 154.   57.9 \n 746 544   434   \n 747  77.5  82.6 \n 748 643   439   \n 749 146.   25.4 \n 750 199   202   \n 751 610   457   \n 752 123   132   \n 753 752   364   \n 754 702   426   \n 755 821   301   \n 756 657   453   \n 757 162    18.9 \n 758 283   273   \n 759 719   394   \n 760 140.  135.  \n 761 427   401   \n 762 542   473   \n 763 219   163   \n 764 164   225   \n 765 359   308   \n 766 214   249   \n 767 433   422   \n 768 637   408   \n 769 171   245   \n 770 152   192   \n 771 161   155   \n 772 230   206   \n 773 182   238   \n 774 215   144   \n 775 299   333   \n 776 152.  110.  \n 777 252   319   \n 778 250   358   \n 779 264   260   \n 780  93.1  56.6 \n 781 171.   74.8 \n 782 223   178   \n 783 148   171   \n 784 163.   99.5 \n 785 819   286   \n 786 457   443   \n 787 389   373   \n 788 101.  157.  \n 789 283   380   \n 790 348   373   \n 791 648   430   \n 792 785   325   \n 793 130.  162.  \n 794 786   323   \n 795 163.   82.6 \n 796 244   199   \n 797 235   221   \n 798 490   415   \n 799 127.   82.6 \n 800 168.  109.  \n 801 654   411   \n 802 385   366   \n 803 154   194   \n 804 298   313   \n 805 802   298   \n 806 363   323   \n 807 490   428   \n 808 242   222   \n 809 210   245   \n 810 387   381   \n 811 136    61.8 \n 812 588   443   \n 813 239   208   \n 814 461   479   \n 815 409   426   \n 816 376   439   \n 817 293   266   \n 818 166.   80   \n 819 653   427   \n 820 555   459   \n 821 567   461   \n 822 471   481   \n 823 307   327   \n 824 498   418   \n 825 466   432   \n 826 446   476   \n 827 246   346   \n 828 171   183   \n 829 740   387   \n 830 693   413   \n 831 283   253   \n 832  64.5 120.  \n 833 272   253   \n 834 288   386   \n 835 278   247   \n 836 551   396   \n 837 434   432   \n 838 641   459   \n 839 141.   55.3 \n 840 424   463   \n 841 114.  150.  \n 842 618   468   \n 843 123   146.  \n 844 316   343   \n 845 407   394   \n 846 333   341   \n 847 241   261   \n 848 525   393   \n 849 265   385   \n 850 326   407   \n 851 355   432   \n 852 226   183   \n 853 546   470   \n 854  78.8  99.5 \n 855 709   409   \n 856 625   396   \n 857 156   196   \n 858 130.    2   \n 859 314   293   \n 860 253   316   \n 861 127.   29.3 \n 862 118.   59.2 \n 863 212   246   \n 864 613   418   \n 865 301   416   \n 866 413   456   \n 867 149    55.3 \n 868 168.   78.7 \n 869 145   187   \n 870 122.   77.4 \n 871 231   190   \n 872 274   379   \n 873 111.   37.1 \n 874 341   349   \n 875 427   407   \n 876 415   455   \n 877 159   243   \n 878 264   377   \n 879 236   278   \n 880 352   373   \n 881 369   441   \n 882 666   434   \n 883 246   272   \n 884 137.   80   \n 885 649   408   \n 886 162   152   \n 887 376   395   \n 888 416   405   \n 889 247   260   \n 890 581   435   \n 891 149   177   \n 892 114.   17.6 \n 893 600   471   \n 894 292   394   \n 895 724   390   \n 896 468   401   \n 897 452   460   \n 898 119.   42.3 \n 899 293   329   \n 900 462   412   \n 901 416   465   \n 902 212   137   \n 903 290   300   \n 904 569   412   \n 905 701   428   \n 906 310   286   \n 907 327   408   \n 908 148   215   \n 909  76.2  83.9 \n 910 157.   31.9 \n 911 621   407   \n 912 672   427   \n 913 265   312   \n 914 438   473   \n 915 553   376   \n 916 102.   63.1 \n 917 708   404   \n 918 380   447   \n 919 539   384   \n 920 165.   99.5 \n 921 332   366   \n 922 380   426   \n 923 730   408   \n 924 193   145   \n 925 137.  154.  \n 926 107.   93   \n 927 178.  110.  \n 928 748   374   \n 929 420   385   \n 930 304   286   \n 931 247   227   \n 932  74.9 155.  \n 933 159.   98.2 \n 934 312   290   \n 935 157.   95.6 \n 936 270   395   \n 937 788   319   \n 938 166   175   \n 939 607   430   \n 940 295   368   \n 941 153.   57.9 \n 942 234   276   \n 943 691   414   \n 944 172.  103.  \n 945 679   423   \n 946 220   258   \n 947 615   468   \n 948 265   311   \n 949 459   474   \n 950 308   409   \n 951 307   317   \n 952 552   435   \n 953 328   343   \n 954 105.  107.  \n 955 164   245   \n 956 110   141.  \n 957 111.   38.4 \n 958 142.  103.  \n 959 287   310   \n 960 216   170   \n 961 234   219   \n 962 324   388   \n 963 251   360   \n 964 403   433   \n 965 390   444   \n 966 766   376   \n 967 275   269   \n 968 789   337   \n 969 338   364   \n 970 217   155   \n 971 359   316   \n 972 548   482   \n 973 127.   25.4 \n 974 288   258   \n 975 411   458   \n 976 452   459   \n 977 132.   78.7 \n 978 170   179   \n 979 499   461   \n 980 396   451   \n 981 119.  144.  \n 982 484   473   \n 983 172.   21.5 \n 984 621   453   \n 985 140.   38.4 \n 986 263   334   \n 987 219   256   \n 988 249   262   \n 989 787   322   \n 990 382   376   \n 991 343   347   \n 992 195   196   \n 993 466   475   \n 994 417   446   \n 995 284   338   \n 996 800   342   \n 997 271   395   \n 998 231   240   \n 999 243   235   \n1000 409   395   \n1001 793   312   \n1002 257   328   \n1003 573   425   \n1004 320   349   \n1005 252   274   \n1006 252   232   \n1007 373   369   \n1008 519   395   \n1009 123   109.  \n1010 658   453   \n1011 189   204   \n1012  86.6  50.1 \n1013 578   385   \n1014 410   395   \n1015 728   410   \n1016  94.4  42.3 \n1017 294   306   \n1018 286   384   \n1019 711   421   \n1020 148.   50.1 \n1021 423   413   \n1022 120.  105.  \n1023 591   453   \n1024 625   391   \n1025 612   421   \n1026 101.  171   \n1027 167.  109.  \n1028 162   151   \n1029 151   175   \n1030 467   397   \n1031 250   322   \n1032 111.   87.8 \n1033 593   460   \n1034 480   482   \n1035 290   269   \n1036 220   213   \n1037 163   181   \n1038 559   471   \n1039 787   321   \n1040 765   379   \n1041 503   455   \n1042 120.   56.6 \n1043 697   412   \n1044  68.4 146.  \n1045 419   400   \n1046 501   468   \n1047 778   334   \n1048 590   474   \n1049 139.   37.1 \n1050 113.   20.2 \n1051 203   241   \n1052 787   335   \n1053 370   441   \n1054 118.   12.4 \n1055 443   470   \n1056 296   310   \n1057 195   216   \n1058 493   410   \n1059 540   383   \n1060 554   387   \n1061 141.   54   \n1062  95.7 141.  \n1063 259   297   \n1064 701   418   \n1065 286   280   \n1066 615   389   \n1067 270   234   \n1068 187   135   \n1069 753   363   \n1070 109.  164.  \n1071 274   252   \n1072 440   392   \n1073 204   221   \n1074 789   318   \n1075  93.1  77.4 \n1076 201   236   \n1077 149   170   \n1078 116.   99.5 \n1079 143   220   \n1080 169   229   \n1081 251   209   \n1082 171   168   \n1083 719   400   \n1084 128.  135.  \n1085 541   479   \n1086 336   416   \n1087 226   233   \n1088 207   139   \n1089 539   385   \n1090 271   262   \n1091 130.  164.  \n1092 114.  166.  \n1093 110    34.5 \n1094 575   478   \n1095 652   410   \n1096 339   418   \n1097 109.   46.2 \n1098 127.   57.9 \n1099 146.  101.  \n1100 106.   67   \n1101 127.  133.  \n1102 502   398   \n1103 691   434   \n1104 261   373   \n1105 253   298   \n1106 599   446   \n1107 114.   72.2 \n1108 350   337   \n1109 685   425   \n1110 368   357   \n1111 429   391   \n1112 415   397   \n1113 247   354   \n1114 246   342   \n1115 340   379   \n1116 373   434   \n1117 231   241   \n1118 226   266   \n1119 434   431   \n1120 172.   72.2 \n1121 503   402   \n1122 158   175   \n1123 261   278   \n1124 822   297   \n1125 337   383   \n1126 165.   48.8 \n1127 633   408   \n1128 605   422   \n1129 165   175   \n1130 775   361   \n1131 822   296   \n1132 167.   18.9 \n1133 157.   96.9 \n1134 265   324   \n1135 726   388   \n1136 417   399   \n1137 237   279   \n1138 136    60.5 \n1139 265   382   \n1140 376   377   \n1141 354   311   \n1142 607   458   \n1143 350   393   \n1144 474   413   \n1145 614   402   \n1146 703   408   \n1147 105.  106   \n1148 270   235   \n1149 330   314   \n1150 652   437   \n1151 357   334   \n1152  77.5 115.  \n1153 356   341   \n1154  54.1  94.3 \n1155 555   482   \n1156 618   454   \n1157 279   247   \n1158 136   136.  \n1159 504   461   \n1160 670   447   \n1161 579   421   \n1162 171   224   \n1163 149   128.  \n1164 574   379   \n1165 339   338   \n1166 622   467   \n1167  58    95.6 \n1168 298   338   \n1169 106.   94.3 \n1170 212   160   \n1171 171.  115.  \n1172 133.   86.5 \n1173 603   427   \n1174 309   405   \n1175 447   457   \n1176 149    28   \n1177 210   244   \n1178 423   468   \n1179 297   270   \n1180 688   417   \n1181 812   320   \n1182 775   354   \n1183 616   409   \n1184 561   428   \n1185 144.  132   \n1186 451   452   \n1187 327   311   \n1188 324   389   \n1189 796   306   \n1190  52.8 119   \n1191 485   472   \n1192  58    89.1 \n1193 146.  131.  \n1194 612   420   \n1195 763   370   \n1196 560   445   \n1197 241   229   \n1198 176.   39.7 \n1199 111.  161.  \n1200 755   381   \n1201 306   282   \n1202 223   228   \n1203 168.   41   \n1204 532   389   \n1205 199   214   \n1206 634   400   \n1207 365   393   \n1208 362   312   \n1209 357   372   \n1210 383   372   \n1211 462   429   \n1212 512   440   \n1213 458   479   \n1214 391   454   \n1215 496   399   \n1216 388   369   \n1217 288   289   \n1218  81.4  93   \n1219 258   349   \n1220 576   477   \n1221 251   265   \n1222 212   154   \n1223 545   462   \n1224 158.  116.  \n1225 336   415   \n1226 382   388   \n1227 266   228   \n1228 231   216   \n1229 282   377   \n1230 153.  103.  \n1231 127.   31.9 \n1232 804   335   \n1233 574   396   \n1234 746   396   \n1235 133.  158   \n1236 284   282   \n1237 123   107.  \n1238 806   332   \n1239 136   209   \n1240 391   443   \n1241  91.8  83.9 \n1242 118.  170.  \n1243 217   253   \n1244 545   472   \n1245 154   217   \n1246 273   339   \n1247 111.  170.  \n1248 681   442   \n1249 456   478   \n1250 219   197   \n1251 775   368   \n1252 369   402   \n1253 107.   90.4 \n1254 131.   17.6 \n1255 722   398   \n1256 732   406   \n1257 597   393   \n1258 768   344   \n1259 551   383   \n1260 788   321   \n1261 352   353   \n1262 822   300   \n1263 430   395   \n1264 138   196   \n1265 348   336   \n1266 443   398   \n1267 176.   41   \n1268 172.   73.5 \n1269 562   374   \n1270 364   412   \n1271 218   163   \n1272 660   446   \n1273 130.   95.6 \n1274 271   293   \n1275 148   179   \n1276 152   219   \n1277 289   331   \n1278 368   430   \n1279 332   397   \n1280  97   168.  \n1281 170   183   \n1282 116.   95.6 \n1283 391   385   \n1284 544   482   \n1285 568   479   \n1286 169   214   \n1287 566   401   \n1288 554   384   \n1289  74.9 132   \n1290 685   438   \n1291 261   308   \n1292 279   274   \n1293 454   410   \n1294 131.  135.  \n1295  71   157.  \n1296 809   285   \n1297 146.   46.2 \n1298 602   427   \n1299 772   342   \n1300 507   444   \n1301 240   227   \n1302 250   263   \n1303 469   402   \n1304 352   310   \n1305 159.  120.  \n1306 782   362   \n1307 557   428   \n1308 790   344   \n1309 371   358   \n1310 698   431   \n1311 757   364   \n1312 115.  150.  \n1313 599   388   \n1314 261   372   \n1315 451   461   \n1316 339   396   \n1317 351   373   \n1318 334   413   \n1319 418   392   \n1320 193   213   \n1321 728   403   \n1322 521   394   \n1323 247   351   \n1324 200   197   \n1325 293   275   \n1326 396   457   \n1327 526   392   \n1328 230   182   \n1329 743   398   \n1330 251   235   \n1331 406   461   \n1332 663   431   \n1333 359   434   \n1334 155   196   \n1335 249   326   \n1336 306   326   \n1337 417   460   \n1338 637   461   \n1339 109.  122.  \n1340 449   476   \n1341 366   438   \n1342 434   421   \n1343 691   415   \n1344 142.   11.1 \n1345 166.   81.3 \n1346 219   232   \n1347 148.   39.7 \n1348 366   356   \n1349 584   475   \n1350 461   445   \n1351 324   323   \n1352 216   150   \n1353 259   352   \n1354 818   308   \n1355 293   265   \n1356 409   462   \n1357 185   153   \n1358 562   442   \n1359 106.  159.  \n1360 331   365   \n1361 161.   98.2 \n1362 303   321   \n1363 635   401   \n1364 260   277   \n1365 598   394   \n1366 595   460   \n1367 777   348   \n1368 376   368   \n1369 274   275   \n1370 426   401   \n1371 336   321   \n1372 109.   57.9 \n1373 582   476   \n1374 599   431   \n1375  93.1  41   \n1376 130.  109.  \n1377 148   180   \n1378 595   450   \n1379 339   351   \n1380 681   422   \n1381 818   309   \n1382 239   201   \n1383 321   387   \n1384 249   301   \n1385 599   460   \n1386 468   423   \n1387 140   216   \n1388 277   387   \n1389 266   281   \n1390 402   459   \n1391 392   454   \n1392 148   199   \n1393 454   457   \n1394 635   408   \n1395 308   411   \n1396 368   323   \n1397 658   417   \n1398 774   354   \n1399 309   322   \n1400 153   169   \n1401 286   406   \n1402 145   175   \n1403 128.   59.2 \n1404 127.   15   \n1405 616   468   \n1406 741   389   \n1407  69.7 161.  \n1408  54.1 112.  \n1409 323   354   \n1410 165   227   \n1411 157   215   \n1412 153.  133.  \n1413 324   307   \n1414 180   151   \n1415 383   360   \n1416 590   454   \n1417 324   322   \n1418 623   394   \n1419 180.   47.5 \n1420 289   278   \n1421 317   345   \n1422 214   166   \n1423 349   373   \n1424 195   147   \n1425 155   169   \n1426 265   280   \n1427  78.8 166.  \n1428 627   465   \n1429 163   148   \n1430 237   191   \n1431 105.  101.  \n1432 273   274   \n1433 450   410   \n1434 504   462   \n1435 217   203   \n1436 343   316   \n1437 659   420   \n1438 472   413   \n1439 165.   81.3 \n1440 246   337   \n1441 447   398   \n1442 217   223   \n1443 244   235   \n1444 368   440   \n1445 224   180   \n1446 566   444   \n1447 128.   94.3 \n1448 235   277   \n1449 629   464   \n1450 271   283   \n1451 136    34.5 \n1452 355   336   \n1453 476   398   \n1454 187   143   \n1455 546   379   \n1456  87.9 150.  \n1457 209   141   \n1458 248   239   \n1459 110    25.4 \n1460 284   290   \n1461 602   404   \n1462 658   424   \n1463 365   438   \n1464 615   408   \n1465 284   261   \n1466 326   390   \n1467 553   442   \n1468 282   389   \n1469 284   382   \n1470 217   240   \n1471 446   394   \n1472 639   451   \n1473 769   344   \n1474 124.   33.2 \n1475 407   462   \n1476 127.    9.80\n1477 300   282   \n1478 386   365   \n1479 311   298   \n1480 119.   43.6 \n1481 819   285   \n1482 266   247   \n1483 674   433   \n1484 617   389   \n1485 372   435   \n1486 343   422   \n1487 639   460   \n1488 175    69.6 \n1489 149   233   \n1490 713   415   \n1491 153.   35.8 \n1492 262   298   \n1493 275   277   \n1494 335   415   \n1495 410   425   \n1496 260   307   \n1497 106.   44.9 \n1498 227   195   \n1499 111.   39.7 \n1500 110    77.4 \n1501 549   459   \n1502 819   306   \n1503 462   397   \n1504 235   276   \n1505 459   479   \n1506 251   306   \n1507 488   482   \n1508 144.   17.6 \n1509 312   289   \n1510 803   295   \n1511 217   201   \n1512 219   239   \n1513 361   435   \n1514 265   384   \n1515 286   341   \n1516 436   391   \n1517 104.  144.  \n1518 380   383   \n1519 165.   82.6 \n1520 183   145   \n1521 235   245   \n1522 187   142   \n1523 546   380   \n1524 135.   34.5 \n1525 332   406   \n1526 801   339   \n1527 257   340   \n1528  90.5 146.  \n1529  99.6 162.  \n1530 577   470   \n1531 106.   64.4 \n1532 477   402   \n1533 770   351   \n1534 622   460   \n1535 110    35.8 \n1536 435   417   \n1537 466   397   \n1538 388   453   \n1539 175   114.  \n1540  56.7 106   \n1541 165   245   \n1542 304   295   \n1543 110    24.1 \n1544 490   427   \n1545  93.1  51.4 \n1546 186   156   \n1547 317   305   \n1548 753   389   \n1549 558   448   \n1550 269   331   \n1551 276   278   \n1552 609   427   \n1553 320   300   \n1554 495   466   \n1555 637   430   \n1556 148.  149.  \n1557 735   404   \n1558 627   401   \n1559 271   362   \n1560 244   288   \n1561 577   477   \n1562 592   452   \n1563 537   440   \n1564 533   473   \n1565 115.   85.2 \n1566 272   293   \n1567 583   386   \n1568 532   400   \n1569 464   437   \n1570 264   227   \n1571 601   442   \n1572 175    39.7 \n1573 253   314   \n1574 107.  141.  \n1575 257   333   \n1576 106.   93   \n1577  84   148.  \n1578 361   405   \n1579 251   264   \n1580 149   115.  \n1581 563   414   \n1582 109.   90.4 \n1583 281   349   \n1584 150.  136.  \n1585 192   212   \n1586 806   289   \n1587 247   352   \n1588 333   395   \n1589 438   391   \n1590 248   298   \n1591 364   368   \n1592 299   387   \n1593 368   322   \n1594 135.   29.3 \n1595 267   390   \n1596 582   386   \n1597 333   318   \n1598 110   124.  \n1599 223   186   \n1600 548   477   \n1601 570   429   \n1602 598   397   \n1603 105.  109.  \n1604 128.  103.  \n1605 109.   29.3 \n1606 459   440   \n1607 102.   44.9 \n1608 334   237   \n1609 636   408   \n1610 289   327   \n1611 431   402   \n1612 786   358   \n1613 254   247   \n1614 597   387   \n1615  76.2 111.  \n1616 266   264   \n1617 440   404   \n1618 661   431   \n1619 139.   94.3 \n1620 274   276   \n1621 120.   34.5 \n1622 589   460   \n1623 625   465   \n1624 180.   55.3 \n1625 264   335   \n1626 225   184   \n1627  89.2 155.  \n1628 165.   87.8 \n1629 185   154   \n1630 109.  172.  \n1631 191   196   \n1632 265   383   \n1633 749   392   \n1634 754   368   \n1635 265   262   \n1636 562   385   \n1637 306   281   \n1638 714   419   \n1639 132.   61.8 \n1640 156.   94.3 \n1641 700   410   \n1642 820   286   \n1643  94.4  86.5 \n1644 155   205   \n1645 614   403   \n1646  98.3 179.  \n1647 545   398   \n1648 319   393   \n1649 681   432   \n1650 587   475   \n1651 137.   35.8 \n1652 172.  115.  \n1653 217   204   \n1654 248   357   \n1655 140   204   \n1656 276   279   \n1657 822   291   \n1658 409   394   \n1659 807   330   \n1660 110   170.  \n1661 583   475   \n1662 178.   64.4 \n1663 668   428   \n1664 362   319   \n1665 168.   90.4 \n1666 584   386   \n1667 458   441   \n1668 433   434   \n1669 812   322   \n1670 332   367   \n1671 596   473   \n1672 601   389   \n1673 729   385   \n1674 247   296   \n1675 169   240   \n1676 425   407   \n1677  90.5 155.  \n1678 470   409   \n1679 221   221   \n1680 198   130   \n1681 361   317   \n1682 293   396   \n1683 263   367   \n1684  78.8 167.  \n1685 642   440   \n1686 536   386   \n1687 130.   39.7 \n1688 174.   69.6 \n1689 345   347   \n1690 251   207   \n1691 118.   42.3 \n1692 537   386   \n1693 440   474   \n1694 164   224   \n1695 476   481   \n1696 216   207   \n1697 273   372   \n1698 181   223   \n1699 433   472   \n1700 522   394   \n1701 267   312   \n1702 252   236   \n1703 512   407   \n1704 496   433   \n1705 640   441   \n1706 269   268   \n1707 106.  175.  \n1708 243   263   \n1709 174.   70.9 \n1710 226   210   \n1711 411   396   \n1712 289   410   \n1713 723   405   \n1714 266   361   \n1715 413   396   \n1716 819   308   \n1717 152   200   \n1718 781   329   \n1719 448   464   \n1720 233   193   \n1721 613   399   \n1722 561   468   \n1723 270   269   \n1724 163   149   \n1725  95.7 158   \n1726 429   471   \n1727 270   255   \n1728 374   433   \n1729 330   410   \n1730 698   411   \n1731 238   248   \n1732 792   341   \n1733 331   323   \n1734 133.   87.8 \n1735 365   392   \n1736  54.1 119   \n1737 370   373   \n1738 356   432   \n1739 220   215   \n1740 186   205   \n1741 140.   55.3 \n1742  99.6 161.  \n1743 238   209   \n1744 684   439   \n1745 325   406   \n1746 255   311   \n1747 794   309   \n1748  99.6 178.  \n1749 295   366   \n1750 670   427   \n1751 205   242   \n1752 289   367   \n1753 569   376   \n1754 270   261   \n1755 114.   77.4 \n1756 222   169   \n1757 232   216   \n1758  85.3 146.  \n1759  68.4 132   \n1760 329   363   \n1761 106.   95.6 \n1762 146.   93   \n1763 219   172   \n1764 579   463   \n1765 646   448   \n1766  91.8  72.2 \n1767 306   292   \n1768 427   470   \n1769 107.   91.7 \n1770 596   448   \n1771 178.   61.8 \n1772 482   473   \n1773 449   455   \n1774 800   300   \n1775 593   392   \n1776 155   174   \n1777 115.   60.5 \n1778 308   397   \n1779 269   233   \n1780  94.4 138.  \n1781 341   327   \n1782 771   352   \n1783 764   379   \n1784 498   416   \n1785 176.   96.9 \n1786 407   379   \n1787 738   402   \n1788 110    48.8 \n1789 105.  115.  \n1790 161   216   \n1791 207   238   \n1792 542   474   \n1793 581   386   \n1794 644   428   \n1795 204   136   \n1796 565   393   \n1797 247   353   \n1798 218   225   \n1799 495   482   \n1800 230   240   \n1801  87.9  74.8 \n1802 649   407   \n1803 615   415   \n1804 394   387   \n1805 576   464   \n1806 407   428   \n1807 229   270   \n1808 105.   64.4 \n1809 604   390   \n1810 105.  105.  \n1811 273   396   \n1812 340   350   \n1813  55.4 129.  \n1814 122.    7.20\n1815 183   147   \n1816 220   257   \n1817 607   390   \n1818 160   177   \n1819 443   475   \n1820 297   380   \n1821 462   475   \n1822 646   447   \n1823 325   389   \n1824 796   307   \n1825 284   291   \n1826 287   271   \n1827 551   444   \n1828 653   420   \n1829 360   371   \n1830 548   379   \n1831 397   457   \n1832 293   414   \n1833 535   413   \n1834 154   239   \n1835 258   358   \n1836 346   332   \n1837 796   334   \n1838 405   430   \n1839 168   245   \n1840 362   328   \n1841 105.  110.  \n1842 167.   78.7 \n1843 358   395   \n1844 291   412   \n1845 513   397   \n1846 115.  128.  \n1847 294   364   \n1848 198   196   \n1849 756   359   \n1850 133.   85.2 \n1851 305   332   \n1852 141.   48.8 \n1853 754   388   \n1854 422   387   \n1855 282   379   \n1856 154.  119   \n1857 655   413   \n1858 383   388   \n1859 547   469   \n1860 150.  126.  \n1861 120.   93   \n1862 144.  133.  \n1863 185   242   \n1864  95.7  64.4 \n1865 217   170   \n1866 162    99.5 \n1867 359   339   \n1868 213   140   \n1869 140.  106   \n1870 308   300   \n1871 574   421   \n1872 216   208   \n1873 686   437   \n1874 361   338   \n1875 263   260   \n1876 161   198   \n1877 470   397   \n1878 387   363   \n1879 296   370   \n1880 181   204   \n1881 233   217   \n1882 173   143   \n1883 216   151   \n1884 551   377   \n1885 170.   18.9 \n1886 309   285   \n1887 545   391   \n1888 593   451   \n1889 265   380   \n1890 382   449   \n1891 166   245   \n1892 389   420   \n1893 272   284   \n1894 303   378   \n1895 541   383   \n1896 170.   20.2 \n1897 284   351   \n1898 609   428   \n1899 264   311   \n1900 511   442   \n1901 252   244   \n1902 109.   89.1 \n1903 357   335   \n1904 707   411   \n1905 556   459   \n1906 226   209   \n1907 580   476   \n1908 207   243   \n1909 508   440   \n1910 462   479   \n1911 130.  168.  \n1912 601   440   \n1913 171.  110.  \n1914 731   407   \n1915 193   196   \n1916 372   389   \n1917 613   401   \n1918 395   387   \n1919 702   419   \n1920 252   361   \n1921 179.   59.2 \n1922 771   365   \n1923 302   338   \n1924 567   479   \n1925 436   473   \n1926 401   392   \n1927 211   147   \n1928 573   479   \n1929 463   442   \n1930 491   419   \n1931 645   416   \n1932 249   279   \n1933 272   338   \n1934 278   254   \n1935 265   298   \n1936 180   225   \n1937 364   430   \n1938 795   346   \n1939 239   250   \n1940 163   140   \n1941 738   377   \n1942 246   237   \n1943 150.  127.  \n1944  82.7 164.  \n1945 797   334   \n1946 448   476   \n1947 757   375   \n1948 366   362   \n1949 176.   65.7 \n1950 170.   76.1 \n1951  98.3 164.  \n1952 627   450   \n1953 159.  114.  \n1954 286   256   \n1955 358   308   \n1956 424   401   \n1957 136   207   \n1958 583   391   \n1959 167   220   \n1960  76.2  54   \n1961 469   413   \n1962 163   240   \n1963 605   433   \n1964 546   482   \n1965 157.  129.  \n1966 105.  111.  \n1967 140   195   \n1968 283   282   \n1969 462   414   \n1970 693   428   \n1971 265   227   \n1972 157   158   \n1973 593   473   \n1974 231   271   \n1975 168.   77.4 \n1976 286   257   \n1977 178   174   \n1978 511   445   \n1979 607   415   \n1980 780   350   \n1981  94.4  70.9 \n1982 176.   91.7 \n1983 148   183   \n1984 589   474   \n1985 122.  131.  \n1986 521   410   \n1987 598   388   \n1988 315   293   \n1989 359   355   \n1990 177   239   \n1991 175   221   \n1992 438   396   \n1993 807   287   \n1994 804   291   \n1995 105.  142.  \n1996 209   143   \n1997 215   213   \n1998 641   441   \n1999 221   259   \n2000 266   312   \n2001 266   329   \n2002 218   198   \n2003 786   357   \n2004 495   399   \n2005 175    35.8 \n2006 369   358   \n2007 560   382   \n2008 629   448   \n2009 176   139   \n2010 424   469   \n2011 119.   74.8 \n2012 255   215   \n2013 703   426   \n2014 488   440   \n2015 292   393   \n2016 272   396   \n2017 119.  145   \n2018 105.  112.  \n2019 271   294   \n2020 667   429   \n2021 152   169   \n2022 449   463   \n2023  90.5  39.7 \n2024 360   429   \n2025 131.  148.  \n2026 577   412   \n2027 122.   20.2 \n2028 130.  166.  \n2029 221   176   \n2030 198   218   \n2031 102.  178.  \n2032 520   395   \n2033 151   227   \n2034  51.5 112.  \n2035 707   405   \n2036 641   412   \n2037 364   437   \n2038 167   144   \n2039 192   196   \n2040 580   386   \n2041 216   148   \n2042 535   415   \n2043 527   451   \n2044 530   446   \n2045 613   389   \n2046 790   316   \n2047 244   287   \n2048 310   322   \n2049  86.6 163.  \n2050 817   311   \n2051 709   403   \n2052 276   378   \n2053 245   237   \n2054 137.   59.2 \n2055 345   424   \n2056 281   250   \n2057 179   202   \n2058 101.   69.6 \n2059 412   450   \n2060 242   262   \n2061 236   189   \n2062 329   403   \n2063 326   339   \n2064 740   400   \n2065 321   302   \n2066 150.   37.1 \n2067 304   415   \n2068  80.1  47.5 \n2069 165   145   \n2070 220   190   \n2071 674   434   \n2072 215   251   \n2073 743   380   \n2074 242   269   \n2075 110    37.1 \n2076 179.   44.9 \n2077  50.2 115.  \n2078 319   299   \n2079 345   331   \n2080 268   231   \n2081 180.  180.  \n2082 358   333   \n2083 105.  103.  \n2084  78.8  47.5 \n2085 811   323   \n2086 353   396   \n2087 489   434   \n2088 425   438   \n2089 162    35.8 \n2090 385   380   \n2091 561   480   \n2092 283   370   \n2093 284   403   \n2094 123    35.8 \n2095 174   228   \n2096 144   185   \n2097 360   332   \n2098 213   248   \n2099 200   202   \n2100 220   189   \n2101 283   371   \n2102 355   379   \n2103 105.  114.  \n2104 657   415   \n2105 465   397   \n2106 130.  148.  \n2107 126.    4.60\n2108 632   409   \n2109 269   295   \n2110 420   386   \n2111 148.  102.  \n2112 172.   90.4 \n2113 273   338   \n2114 176.   93   \n2115 569   461   \n2116 248   262   \n2117 680   442   \n2118  67.1 146.  \n2119 422   388   \n2120 428   407   \n2121 276   386   \n2122 800   301   \n2123 171.   39.7 \n2124 300   382   \n2125 286   383   \n2126 690   435   \n2127 498   419   \n2128 628   410   \n2129 625   395   \n2130 626   396   \n2131 167   204   \n2132 153   193   \n2133 452   406   \n2134 561   444   \n2135 693   419   \n2136 154.  133.  \n2137 197   204   \n2138 150.   38.4 \n2139 282   273   \n2140 400   452   \n2141 445   394   \n2142 267   230   \n2143 509   452   \n2144 210   145   \n2145 148.  129.  \n2146 146.   43.6 \n2147 241   253   \n2148 445   475   \n2149 340   420   \n2150 798   304   \n2151 219   191   \n2152 436   465   \n2153 128.   60.5 \n2154 184   161   \n2155 611   396   \n2156 198   219   \n2157 283   402   \n2158 130.  170.  \n2159 182.  180.  \n2160 142.    8.5 \n2161 171   173   \n2162 213   240   \n2163 113.   70.9 \n2164 649   416   \n2165 192   142   \n2166 128.   28   \n2167 611   469   \n2168 258   274   \n2169 190   237   \n2170 273   384   \n2171 599   414   \n2172 748   393   \n2173 533   388   \n2174 589   386   \n2175 358   433   \n2176  77.5 154.  \n2177 137   197   \n2178 153   239   \n2179 729   409   \n2180 404   439   \n2181 531   443   \n2182 363   322   \n2183 226   202   \n2184 273   383   \n2185 405   399   \n2186 623   407   \n2187  63.2 110.  \n2188 342   421   \n2189 253   315   \n2190  80.1  46.2 \n2191 356   426   \n2192 128.   29.3 \n2193 165.   38.4 \n2194 184   197   \n2195 566   404   \n2196 789   330   \n2197 596   408   \n2198 144.   20.2 \n2199  97    70.9 \n2200 109.   31.9 \n2201 263   311   \n2202 794   347   \n2203 609   457   \n2204 153   218   \n2205 144.   18.9 \n2206 307   282   \n2207 159.   54   \n2208 784   359   \n2209 676   443   \n2210  63.2 145   \n2211 294   307   \n2212 265   323   \n2213 132.  153.  \n2214 162   167   \n2215 140.   39.7 \n2216 346   346   \n2217 280   249   \n2218 771   351   \n2219 296   334   \n2220 176.  103.  \n2221 485   482   \n2222 179.   43.6 \n2223 296   339   \n2224 263   298   \n2225 212   157   \n2226 150.   52.7 \n2227 107.   54   \n2228 228   191   \n2229 785   334   \n2230 203   236   \n2231 213   165   \n2232 623   390   \n2233 630   394   \n2234 696   432   \n2235 531   442   \n2236 613   402   \n2237 565   408   \n2238 328   361   \n2239 743   379   \n2240 330   323   \n2241  94.4 172.  \n2242 163.   86.5 \n2243 218   162   \n2244 542   482   \n2245 536   387   \n2246 613   468   \n2247 457   453   \n2248 104.   44.9 \n2249 397   439   \n2250  63.2 131.  \n2251 268   392   \n2252 150   188   \n2253 122.   56.6 \n2254 793   332   \n2255 355   396   \n2256 576   471   \n2257 739   401   \n2258 116.  162.  \n2259 776   344   \n2260 159.  105.  \n2261 243   286   \n2262 330   390   \n2263 123    56.6 \n2264 154.  120.  \n2265 755   372   \n2266 290   261   \n2267  77.5 116.  \n2268 107.   44.9 \n2269  61.9 115.  \n2270 283   252   \n2271 436   395   \n2272 251   206   \n2273 123   175.  \n2274 261   353   \n2275 302   296   \n2276 326   310   \n2277 639   454   \n2278 412   420   \n2279 118.   93   \n2280 318   403   \n2281 559   432   \n2282 270   262   \n2283 762   351   \n2284 612   419   \n2285 157   149   \n2286 147   199   \n2287 534   429   \n2288 227   267   \n2289 220   165   \n2290 576   383   \n2291 154   202   \n2292 146   172   \n2293 275   278   \n2294 119.   20.2 \n2295 468   424   \n2296 141.   41   \n2297 264   298   \n2298 372   428   \n2299 191   151   \n2300 147   172   \n2301 713   400   \n2302 335   320   \n2303 215   212   \n2304 493   440   \n2305 344   322   \n2306 715   418   \n2307  56.7 114.  \n2308 548   460   \n2309 543   390   \n2310 642   459   \n2311 606   390   \n2312 647   429   \n2313 634   408   \n2314 469   417   \n2315 163.   48.8 \n2316 225   172   \n2317 214   240   \n2318 170.  115.  \n2319 149    29.3 \n2320 329   314   \n2321 423   388   \n2322 116.  128.  \n2323 176.   98.2 \n2324 734   381   \n2325 110    89.1 \n2326 308   328   \n2327 357   378   \n2328 585   386   \n2329 380   400   \n2330 594   387   \n2331 105.   96.9 \n2332 185   197   \n2333 580   449   \n2334 110   163.  \n2335 643   428   \n2336 646   446   \n2337 270   325   \n2338 126.  133.  \n2339 653   435   \n2340 124.   42.3 \n2341 369   329   \n2342 304   380   \n2343 745   382   \n2344 266   280   \n2345 266   389   \n2346 142   200   \n2347 640   442   \n2348 815   316   \n2349 160   238   \n2350 281   257   \n2351 407   389   \n2352 178.   63.1 \n2353 171   138   \n2354 255   214   \n2355 115.   25.4 \n2356 306   414   \n2357 523   459   \n2358 170.   90.4 \n2359 311   299   \n2360 196   155   \n2361 366   439   \n2362 302   319   \n2363 635   445   \n2364 111.   21.5 \n2365 761   353   \n2366 359   349   \n2367 308   399   \n2368 272   379   \n2369 286   354   \n2370 367   440   \n2371 411   463   \n2372 141.   39.7 \n2373 238   192   \n2374 111.   22.8 \n2375 596   435   \n2376 285   405   \n2377 237   281   \n2378 289   269   \n2379 325   407   \n2380 177   172   \n2381 523   480   \n2382 782   328   \n2383 622   452   \n2384 148.   83.9 \n2385 180   152   \n2386 310   299   \n2387 109.   69.6 \n2388 148.   26.7 \n2389 139   195   \n2390 118.  168.  \n2391 116.   98.2 \n2392 420   420   \n2393 436   415   \n2394 491   410   \n2395 119.  103.  \n2396 168.   18.9 \n2397 299   416   \n2398 396   439   \n2399 176.   94.3 \n2400 811   284   \n2401 394   415   \n2402 567   435   \n2403 450   395   \n2404  97   166.  \n2405 339   369   \n2406 168   204   \n2407 161   153   \n2408 782   352   \n2409 574   478   \n2410 217   224   \n2411 604   459   \n2412 146.   94.3 \n2413 252   349   \n2414 526   453   \n2415  56.7  91.7 \n2416 124.   57.9 \n2417 426   469   \n2418 101.  178.  \n2419 173   199   \n2420 463   420   \n2421 274   324   \n2422 585   475   \n2423 157   197   \n2424 633   446   \n2425 797   306   \n2426 820   304   \n2427 222   224   \n2428 725   390   \n2429 228   253   \n2430 293   305   \n2431 102.  146.  \n2432 377   432   \n2433 228   237   \n2434 282   250   \n2435 602   389   \n2436  84   145   \n2437 176.  114.  \n2438 158   215   \n2439 711   415   \n2440 507   398   \n2441 289   333   \n2442 723   413   \n2443 162   172   \n2444 821   302   \n2445 146.   48.8 \n2446 179.   57.9 \n2447 154   233   \n2448 751   364   \n2449 115.   31.9 \n2450 170.   77.4 \n2451 804   292   \n2452 174   244   \n2453 810   324   \n2454 246   202   \n2455 162   159   \n2456 171.  103.  \n2457 356   312   \n2458 239   251   \n2459 220   166   \n2460 338   351   \n2461 230   263   \n2462 239   249   \n2463 217   160   \n2464 145   199   \n2465 329   313   \n2466  54.1 129.  \n2467 560   422   \n2468 152.   83.9 \n2469 732   382   \n2470 653   425   \n2471 564   412   \n2472 130.   94.3 \n2473 273   284   \n2474 296   311   \n2475 320   385   \n2476 174   211   \n2477 227   202   \n2478 263   233   \n2479 163.   85.2 \n2480 585   445   \n2481 105.   99.5 \n2482 141.   51.4 \n2483 178.  106   \n2484 517   406   \n2485 338   417   \n2486 410   434   \n2487 167.   80   \n2488 344   423   \n2489 453   473   \n2490  60.6  86.5 \n2491 242   254   \n2492 619   389   \n2493 307   290   \n2494 127.  142.  \n2495 740   388   \n2496 762   381   \n2497 337   322   \n2498 408   452   \n2499 233   218   \n2500 227   254   \n2501 239   193   \n2502 109.   52.7 \n2503 490   410   \n2504 142.  152.  \n2505 218   228   \n2506 250   203   \n2507 240   269   \n2508 354   307   \n2509 196   130   \n2510 158   169   \n2511 576   459   \n2512 789   319   \n2513 461   474   \n2514 521   395   \n2515 487   442   \n2516 127.   59.2 \n2517 469   412   \n2518 152.  107.  \n2519 153.   86.5 \n2520 370   372   \n2521 195   236   \n2522 153.  120.  \n2523 311   288   \n2524 141.   46.2 \n2525 178.   41   \n2526 645   459   \n2527 465   408   \n2528 218   172   \n2529 175    91.7 \n2530 192   154   \n2531 478   482   \n2532 468   426   \n2533 609   389   \n2534 504   479   \n2535 110    26.7 \n2536 727   410   \n2537 251   205   \n2538 118.  175.  \n2539 539   482   \n2540 146.  102.  \n2541 175    37.1 \n2542  50.2 118.  \n2543 155   195   \n2544 196   205   \n2545 704   425   \n2546 608   410   \n2547 266   297   \n2548 295   334   \n2549 463   408   \n2550 105.   65.7 \n2551 586   386   \n2552 153.   34.5 \n2553 227   175   \n2554 488   438   \n2555 283   401   \n2556 248   202   \n2557 598   398   \n2558 492   399   \n2559 791   315   \n2560 148.   91.7 \n2561 154   216   \n2562 274   326   \n2563 325   390   \n2564 286   375   \n2565 787   356   \n2566 724   406   \n2567 201   198   \n2568 463   423   \n2569 279   388   \n2570 410   463   \n2571 500   413   \n2572 273   329   \n2573 175   181.  \n2574 118.  102.  \n2575 146   199   \n2576 381   448   \n2577 161.   52.7 \n2578  81.4  39.7 \n2579 164   162   \n2580 783   327   \n2581 139.   26.7 \n2582 115.   42.3"
  },
  {
    "objectID": "slides/03-visualize.html#summary-statistics-might-help-us",
    "href": "slides/03-visualize.html#summary-statistics-might-help-us",
    "title": "Data Visualization",
    "section": "Summary statistics might help us",
    "text": "Summary statistics might help us\nvar: x\n\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   50.2   167.2   288.0   346.0   499.8   822.0 \n\n\nvar: y\n\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n    2.0   162.2   314.0   283.3   401.0   482.0 \n\n\ncorrelation between x, y\n\n\n[1] 0.7601536"
  },
  {
    "objectID": "slides/03-visualize.html#who-needs-your-dataviz",
    "href": "slides/03-visualize.html#who-needs-your-dataviz",
    "title": "Data Visualization",
    "section": "Who needs your dataviz?",
    "text": "Who needs your dataviz?\nYou generally visualize data for two types of people:\n\n\nYourself.\nOthers.\n\n\n\nWhen you make dataviz for yourself, your aim is explorative and your goal is to generate as many raw graphs as quickly as possible to gain insights on your data.\n\n\nWhen you make dataviz for others, your aim is communicative and you work to be as clear and as understandable as possible."
  },
  {
    "objectID": "slides/03-visualize.html#exercise",
    "href": "slides/03-visualize.html#exercise",
    "title": "Data Visualization",
    "section": "Exercise",
    "text": "Exercise\n\nWith the penguin dataset:\n\nMake a histogram of the variable bill_length_mm. Repeat the same histogram, but use colors to differentiate species.\nMake a histogram of bill_depth_mm, but only for female penguins.\nMake a scatterplot of flipper_length_mm vs body_mass_g, use colors to differentiate species.\n\n\n\nGet help from ggplot2‚Äôs documentation.\n\nOn ggplot2‚Äôs.\nOn R4DS book.\nOn ggplot2‚Äôs website."
  },
  {
    "objectID": "slides/03-visualize.html#a-grammar-of-graphics",
    "href": "slides/03-visualize.html#a-grammar-of-graphics",
    "title": "Data Visualization",
    "section": "A grammar of graphics",
    "text": "A grammar of graphics\n\n\n\n\nggplot2 is one of the main tools for declaring graphics in R.\nIt is based on the grammar of graphics.\nIt can be used both for explorative analysis and for publication ready graphs."
  },
  {
    "objectID": "slides/03-visualize.html#the-grammar-of-graphics",
    "href": "slides/03-visualize.html#the-grammar-of-graphics",
    "title": "Data Visualization",
    "section": "The grammar of graphics",
    "text": "The grammar of graphics\nThe grammar of graphics is a unifying framework to conceptualize and program datavisualization.\nIt states that most graphics are composed of:\n\nA default dataset and set of mappings from variables to aesthetics.\nOne or more layers, with each layer having one geometric object, one statistical transformation, one position adjustment, and optionally, one dataset and set of aesthetic mappings,\nOne scale for each aesthetic mapping used.\nA coordinate system.\nThe facet specification.\n\nHadley Wickham - A Layered Grammar of Graphics, 2010"
  },
  {
    "objectID": "slides/03-visualize.html#lets-put-it-in-practice",
    "href": "slides/03-visualize.html#lets-put-it-in-practice",
    "title": "Data Visualization",
    "section": "Let‚Äôs put it in practice",
    "text": "Let‚Äôs put it in practice\nA default dataset (penguins) and set of mappings from variables to aesthetics‚Ä¶\n\n\nVariables\n\nbill_length_mm\nbill_depth_mm\nisland\nsex\n\n\nAesthetics\n\nx\ny\ncolour\nshape"
  },
  {
    "objectID": "slides/03-visualize.html#lets-put-it-in-practice-1",
    "href": "slides/03-visualize.html#lets-put-it-in-practice-1",
    "title": "Data Visualization",
    "section": "Let‚Äôs put it in practice",
    "text": "Let‚Äôs put it in practice\n\n\n\n\nflowchart LR\n  bill_length_mm --> x\n  bill_depth_mm --> y\n  island --> colour\n  sex --> shape\n  subgraph Variable\n  bill_length_mm\n  bill_depth_mm\n  island\n  sex\n  end\n  subgraph aesthetics\n  x\n  y\n  colour\n  shape\n  end"
  },
  {
    "objectID": "slides/03-visualize.html#section-6",
    "href": "slides/03-visualize.html#section-6",
    "title": "Data Visualization",
    "section": "",
    "text": "A default dataset\n\n\npenguins %>% \n  drop_na(species, sex) %>% \n  ggplot()"
  },
  {
    "objectID": "slides/03-visualize.html#section-7",
    "href": "slides/03-visualize.html#section-7",
    "title": "Data Visualization",
    "section": "",
    "text": "A default dataset and set of mappings from variables to aesthetics.\n\n\npenguins %>% \n  drop_na(species, sex) %>% \n  ggplot(aes(x = bill_length_mm,\n             y = bill_depth_mm,\n             colour = species,\n             shape = sex))"
  },
  {
    "objectID": "slides/03-visualize.html#section-8",
    "href": "slides/03-visualize.html#section-8",
    "title": "Data Visualization",
    "section": "",
    "text": "One or more layers, with each layer having one geometric object‚Ä¶\n\n\npenguins %>% \n  drop_na(species, sex) %>% \n  ggplot(aes(x = bill_length_mm,\n             y = bill_depth_mm,\n             colour = species,\n             shape = sex)) + \n  geom_point()"
  },
  {
    "objectID": "slides/03-visualize.html#section-9",
    "href": "slides/03-visualize.html#section-9",
    "title": "Data Visualization",
    "section": "",
    "text": "‚Ä¶and a statistical transformation.\n\n\npenguins %>% \n  drop_na(species, sex) %>% \n  ggplot(aes(x = bill_length_mm,\n             y = bill_depth_mm,\n             colour = species,\n             shape = sex)) + \n  geom_point() +\n  geom_smooth()"
  },
  {
    "objectID": "slides/03-visualize.html#section-10",
    "href": "slides/03-visualize.html#section-10",
    "title": "Data Visualization",
    "section": "",
    "text": "‚Ä¶and a statistical transformation.\n\n\npenguins %>% \n  drop_na(species, sex) %>% \n  ggplot(aes(x = bill_length_mm,\n             y = bill_depth_mm,\n             colour = species,\n             shape = sex)) + \n  geom_point() +\n  geom_smooth(method = 'lm')"
  },
  {
    "objectID": "slides/03-visualize.html#section-11",
    "href": "slides/03-visualize.html#section-11",
    "title": "Data Visualization",
    "section": "",
    "text": "The facet specification.\n\n\npenguins %>%\n  drop_na(species, sex) %>% \n  ggplot(aes(x = bill_length_mm,\n             y = bill_depth_mm,\n             colour = species,\n             shape = sex)) + \n  geom_point() +\n  geom_smooth(method = 'lm') +\n  facet_wrap(facets = 'sex', ncol = 1)"
  },
  {
    "objectID": "slides/03-visualize.html#section-12",
    "href": "slides/03-visualize.html#section-12",
    "title": "Data Visualization",
    "section": "",
    "text": "We can also modify the coordinate system, if needed.\n\n\npenguins %>%\n  drop_na(species, sex) %>% \n  ggplot(aes(x = bill_length_mm,\n             y = bill_depth_mm,\n             colour = species,\n             shape = sex)) + \n  stat_identity(geom = 'point') +\n  geom_smooth(method = 'lm') +\n  facet_wrap(facets = 'sex', ncol = 1) +\n  scale_y_log10()"
  },
  {
    "objectID": "slides/03-visualize.html#explore-your-data-with-graphics",
    "href": "slides/03-visualize.html#explore-your-data-with-graphics",
    "title": "Data Visualization",
    "section": "Explore your data with graphics",
    "text": "Explore your data with graphics\nYou can use graphics to learn what‚Äôs inside our data.\nFirst, asking questions about data then, plotting them with different visual models to highlight and learn about data patterns, we can go through these two steps iteratively (plot, rinse and repeat)."
  },
  {
    "objectID": "slides/03-visualize.html#visual-models",
    "href": "slides/03-visualize.html#visual-models",
    "title": "Data Visualization",
    "section": "Visual models",
    "text": "Visual models\nA visual model is a specific type of data visualization, designed to highlight a specific type of pattern in data.\nggplot provides many visual models ready to be used and coustomized.\nThe most used one in exploratory data analysis are:\n\nhistograms,\nboxplots,\nscatterplots,\nheatmaps,\nbarplots."
  },
  {
    "objectID": "slides/04-get.html#dataframes-are-rectangular-datasets",
    "href": "slides/04-get.html#dataframes-are-rectangular-datasets",
    "title": "Get and Clean Data",
    "section": "Dataframes are rectangular datasets",
    "text": "Dataframes are rectangular datasets\nMore often than not when we speak about datasets, we speak about rectangular data, i.e., data in two-dimensional table, made of values organized in rows and columns.\n\n\nEach cell stores a value.\nEach value belongs to one column and one row.\n\n\n\nRectnagular data are the easiest to use, when we get data that are not rectangular, we try to reshape them in that form."
  },
  {
    "objectID": "slides/04-get.html#readr",
    "href": "slides/04-get.html#readr",
    "title": "Get and Clean Data",
    "section": "Readr",
    "text": "Readr\n\n\n\n\nReadr is a package that loads (reads) Rectangular Text data in R.\nIt‚Äôs fast, it guesses column types explicitly and it‚Äôs pipe friendly\nYou can use it to read both local data and online data from a URL.\nFor example we can use it to read data in CSV and TSV formats and many more."
  },
  {
    "objectID": "slides/04-get.html#read-the-palmer-pengunis-dataset",
    "href": "slides/04-get.html#read-the-palmer-pengunis-dataset",
    "title": "Get and Clean Data",
    "section": "Read the Palmer Pengunis dataset",
    "text": "Read the Palmer Pengunis dataset\nWe can use again on the Palmer Penguins Dataset\nThe source code of this package, is on github; we can find the tidy CSV data in the inst/exdata folder.\n\n\npenguin_csv_url <- 'https://raw.githubusercontent.com/allisonhorst/palmerpenguins/main/inst/extdata/penguins.csv'\n \nread_csv(penguin_csv_url)\n\nRows: 344 Columns: 8\n‚îÄ‚îÄ Column specification ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\nDelimiter: \",\"\nchr (3): species, island, sex\ndbl (5): bill_length_mm, bill_depth_mm, flipper_length_mm, body_mass_g, year\n\n‚Ñπ Use `spec()` to retrieve the full column specification for this data.\n‚Ñπ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n# A tibble: 344 √ó 8\n   species island    bill_length_mm bill_depth_mm flipper_‚Ä¶¬π body_‚Ä¶¬≤ sex    year\n   <chr>   <chr>              <dbl>         <dbl>      <dbl>   <dbl> <chr> <dbl>\n 1 Adelie  Torgersen           39.1          18.7        181    3750 male   2007\n 2 Adelie  Torgersen           39.5          17.4        186    3800 fema‚Ä¶  2007\n 3 Adelie  Torgersen           40.3          18          195    3250 fema‚Ä¶  2007\n 4 Adelie  Torgersen           NA            NA           NA      NA <NA>   2007\n 5 Adelie  Torgersen           36.7          19.3        193    3450 fema‚Ä¶  2007\n 6 Adelie  Torgersen           39.3          20.6        190    3650 male   2007\n 7 Adelie  Torgersen           38.9          17.8        181    3625 fema‚Ä¶  2007\n 8 Adelie  Torgersen           39.2          19.6        195    4675 male   2007\n 9 Adelie  Torgersen           34.1          18.1        193    3475 <NA>   2007\n10 Adelie  Torgersen           42            20.2        190    4250 <NA>   2007\n# ‚Ä¶ with 334 more rows, and abbreviated variable names ¬π‚Äãflipper_length_mm,\n#   ¬≤‚Äãbody_mass_g\n# ‚Ñπ Use `print(n = ...)` to see more rows"
  },
  {
    "objectID": "slides/04-get.html#section",
    "href": "slides/04-get.html#section",
    "title": "Get and Clean Data",
    "section": "",
    "text": "The tibble that we have loaded and generate d from CSV is not identical to the one that comes already loaded with the palmerpenguins package:\n\npenguins_from_csv <- \n  penguin_csv_url %>% \n  read_csv()\n\nidentical(\n  penguins_from_csv,\n  palmerpenguins::penguins\n)\n\n[1] FALSE\n\n\nLet‚Äôs compare them side by side\n\n\n\npalmerpenguins::penguins %>% \n  glimpse(width = 40)\n\nRows: 344\nColumns: 8\n$ species           <fct> Adelie, Adel‚Ä¶\n$ island            <fct> Torgersen, T‚Ä¶\n$ bill_length_mm    <dbl> 39.1, 39.5, ‚Ä¶\n$ bill_depth_mm     <dbl> 18.7, 17.4, ‚Ä¶\n$ flipper_length_mm <int> 181, 186, 19‚Ä¶\n$ body_mass_g       <int> 3750, 3800, ‚Ä¶\n$ sex               <fct> male, female‚Ä¶\n$ year              <int> 2007, 2007, ‚Ä¶\n\n\n\n\npenguins_from_csv %>% \n  glimpse(width = 40)\n\nRows: 344\nColumns: 8\n$ species           <chr> \"Adelie\", \"A‚Ä¶\n$ island            <chr> \"Torgersen\",‚Ä¶\n$ bill_length_mm    <dbl> 39.1, 39.5, ‚Ä¶\n$ bill_depth_mm     <dbl> 18.7, 17.4, ‚Ä¶\n$ flipper_length_mm <dbl> 181, 186, 19‚Ä¶\n$ body_mass_g       <dbl> 3750, 3800, ‚Ä¶\n$ sex               <chr> \"male\", \"fem‚Ä¶\n$ year              <dbl> 2007, 2007, ‚Ä¶\n\n\n\n\nCan you spot that column types are different?"
  },
  {
    "objectID": "slides/04-get.html#parsing",
    "href": "slides/04-get.html#parsing",
    "title": "Get and Clean Data",
    "section": "Parsing",
    "text": "Parsing\nWhen we read data from text encoded ‚Äúdelimited‚Äù files, such as CSV, we use function that parse the file.\nWhen we parse something, we formalize its structure applying a set of grammatical rules.\nNo parsing rule is perfect, thus we must often review the results and ‚Äúfix‚Äù parsing ‚Äúmistakes‚Äù.\n\n# specify column types manually\n\npenguins_from_csv <-\n  penguin_csv_url %>% \n  read_csv(\n    col_types = cols(\n      species = col_factor(),\n      island = col_factor(),\n      flipper_length_mm = col_integer(),\n      body_mass_g = col_integer(),\n      sex = col_factor(),\n      year = col_integer()\n    )\n  )"
  },
  {
    "objectID": "slides/04-get.html#exercise",
    "href": "slides/04-get.html#exercise",
    "title": "Get and Clean Data",
    "section": "Exercise",
    "text": "Exercise\nFind the source code of the readr package.\nIn the inst/extdata folder you can find 10 datasets that display different challenges that you might enconter when you have to load data from an external file.\nLoad in R at least 3 of those datasets using functions from readr.\nGet help from readr‚Äôs documentation and the data import chapter of r4ds.\nWhich function did you use? Did you encounter any parsing failure? How did you fix it?"
  },
  {
    "objectID": "slides/04-get.html#read-a-dataset-from-pangaea",
    "href": "slides/04-get.html#read-a-dataset-from-pangaea",
    "title": "Get and Clean Data",
    "section": "Read a dataset from PANGAEA",
    "text": "Read a dataset from PANGAEA\nPANGAEA, a Data repository for the evironmental sciences.\nFor our exercise we will use this dataset from Wu et al:\n\n\n‚ÄúEffect of barite-bound Sr on detrital Sr isotope systematics in marine sediments with pertinent Mediterranean examples‚Äù.\n\n\nhttps://doi.pangaea.de/10.1594/PANGAEA.946258"
  },
  {
    "objectID": "slides/04-get.html#section-1",
    "href": "slides/04-get.html#section-1",
    "title": "Get and Clean Data",
    "section": "",
    "text": "pangaea_filename <- 'Dataset_S2_HCl-leaching.tab'\n\npangaea_path <- here('data-int/Wu-etal_2022/datasets', pangaea_filename)\n\nLet‚Äôs try to read the data file Dataset_S2_HCl-leaching.tab.\nIt‚Äôs a .tab file.\n\npangaea_data <- \n  pangaea_path %>% \n  read_delim()\n\nWarning: One or more parsing issues, see `problems()` for details\n\n\nRows: 177 Columns: 3\n‚îÄ‚îÄ Column specification ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\nDelimiter: \" \"\nchr (3): /*, DATA, DESCRIPTION:\n\n‚Ñπ Use `spec()` to retrieve the full column specification for this data.\n‚Ñπ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "slides/04-get.html#section-2",
    "href": "slides/04-get.html#section-2",
    "title": "Get and Clean Data",
    "section": "",
    "text": "If we call problems() readr tells us what went wrong.\n\npangaea_data\n\n# A tibble: 177 √ó 3\n   `/*`                   DATA           `DESCRIPTION:`                         \n   <chr>                  <chr>          <chr>                                  \n 1 \"Citation:\\tWu,\"       \"Jiawang;\"     \"Liu, Zhifei; Michard, Annie; Tachikaw‚Ä¶\n 2 \"\\tIn:\"                \"Wu,\"          \"J et al. (2022): Effect of barite-bou‚Ä¶\n 3 \"Keyword(s):\\tBarite;\" \"Barium\"       \"(Ba); marine sediments; Mediterranean‚Ä¶\n 4 \"Related\"              \"to:\\tWu,\"     \"Jiawang; Liu, Zhifei; Michard, Annie;‚Ä¶\n 5 \"Funding:\\tChina\"      \"Postdoctoral\" \"Science Foundation (URI: http://res.c‚Ä¶\n 6 \"\\tChina\"              \"Postdoctoral\" \"Science Foundation (URI: http://res.c‚Ä¶\n 7 \"\\tEuropean\"           \"Commission\"   \"(EC), grant/award no. MAS2-CT93-0051:‚Ä¶\n 8 \"\\tEuropean\"           \"Commission\"   \"(EC), grant/award no. MAS3 CT97-0137:‚Ä¶\n 9 \"\\tEuropean\"           \"Commission\"   \"(EC), grant/award no. MAST1-90022C: E‚Ä¶\n10 \"\\tNational\"           \"Natural\"      \"Science Foundation of China (NSFC) (U‚Ä¶\n# ‚Ä¶ with 167 more rows\n# ‚Ñπ Use `print(n = ...)` to see more rows"
  },
  {
    "objectID": "slides/04-get.html#section-3",
    "href": "slides/04-get.html#section-3",
    "title": "Get and Clean Data",
    "section": "",
    "text": "We can use the arguments:\n\n\ndelim = '\\t' to tell read_delim() that we are reading a file delimited by tabulature (\\t).\nskip = 49 to tell it that the first 49 rows must be skipped.\n\n\n\npangaea_data <- \n  pangaea_path %>% \n  read_delim(delim = '\\t',\n             skip = 49)"
  },
  {
    "objectID": "slides/04-get.html#section-4",
    "href": "slides/04-get.html#section-4",
    "title": "Get and Clean Data",
    "section": "",
    "text": "Now the data that we‚Äôve imported into R looks fine.\n\npangaea_data %>% glimpse()\n\nRows: 128\nColumns: 19\n$ Event                      <chr> \"SL73BC\", \"SL73BC\", \"SL73BC\", \"SL73BC\", \"SL‚Ä¶\n$ Latitude                   <dbl> 39.6617, 39.6617, 39.6617, 39.6617, 39.6617‚Ä¶\n$ Longitude                  <dbl> 24.5117, 24.5117, 24.5117, 24.5117, 24.5117‚Ä¶\n$ `Elevation [m]`            <dbl> -339, -339, -339, -339, -339, -339, -339, -‚Ä¶\n$ `Sample label (barite-Sr)` <chr> \"SL73-1\", \"SL73-2\", \"SL73-3\", \"SL73-4\", \"SL‚Ä¶\n$ `Samp type`                <chr> \"non-S1\", \"non-S1\", \"non-S1\", \"S1b\", \"S1b\",‚Ä¶\n$ `Depth [m]`                <dbl> 0.0045, 0.0465, 0.0665, 0.1215, 0.1765, 0.1‚Ä¶\n$ `Age [ka BP]`              <dbl> 1.66, 3.13, 4.13, 5.75, 7.30, 7.78, 8.65, 9‚Ä¶\n$ `CaCO3 [%]`                <dbl> 61.5, 55.1, 53.0, 43.4, 41.8, 42.3, 42.6, 3‚Ä¶\n$ `Ba [¬µg/g] (Leachate)`     <dbl> 72.6, 64.3, 37.4, 63.5, 101.0, 141.0, 75.2,‚Ä¶\n$ `Sr [¬µg/g] (Leachate)`     <dbl> 767, 681, 690, 552, 527, 528, 551, 482, 391‚Ä¶\n$ `Ca [¬µg/g] (Leachate)`     <dbl> 188951.9, 163260.4, 162188.7, 125937.6, 124‚Ä¶\n$ `Al [¬µg/g] (Leachate)`     <dbl> 10612.7, 11428.4, 5463.0, 3261.5, 2121.7, 1‚Ä¶\n$ `Fe [¬µg/g] (Leachate)`     <dbl> 5935.0, 6814.3, 2465.7, 3936.8, 189.6, 7711‚Ä¶\n$ `Ba [¬µg/g] (Residue)`      <dbl> 171.0, 198.0, 251.0, 290.0, 315.0, 259.0, 3‚Ä¶\n$ `Sr [¬µg/g] (Residue)`      <dbl> 66.6, 71.3, 90.3, 99.8, 106.0, 90.7, 108.0,‚Ä¶\n$ `Ca [¬µg/g] (Residue)`      <dbl> 2315.5, 2369.6, 3007.7, 3447.9, 3713.2, 331‚Ä¶\n$ `Al [¬µg/g] (Residue)`      <dbl> 29262.5, 35561.4, 45862.4, 52485.6, 55083.0‚Ä¶\n$ `Fe [¬µg/g] (Residue)`      <dbl> 14834.8, 18301.4, 24534.5, 30745.3, 28532.2‚Ä¶"
  },
  {
    "objectID": "slides/04-get.html#section-5",
    "href": "slides/04-get.html#section-5",
    "title": "Get and Clean Data",
    "section": "",
    "text": "Now the data that we‚Äôve imported into R looks fine.\n\npangaea_data %>% skimr::skim()\n\n\nData summary\n\n\nName\nPiped data\n\n\nNumber of rows\n128\n\n\nNumber of columns\n19\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n3\n\n\nnumeric\n16\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nEvent\n0\n1\n5\n7\n0\n11\n0\n\n\nSample label (barite-Sr)\n0\n1\n5\n7\n0\n128\n0\n\n\nSamp type\n0\n1\n3\n6\n0\n3\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nLatitude\n0\n1\n35.32\n2.24\n33.38\n33.67\n34.55\n35.29\n39.66\n‚ñá‚ñÇ‚ñÅ‚ñÅ‚ñÉ\n\n\nLongitude\n0\n1\n22.79\n8.17\n4.51\n17.86\n24.51\n28.61\n32.67\n‚ñÇ‚ñÅ‚ñÜ‚ñÜ‚ñá\n\n\nElevation [m]\n0\n1\n-1807.65\n829.55\n-3390.00\n-2373.00\n-1587.00\n-1375.00\n-339.00\n‚ñÇ‚ñá‚ñÅ‚ñÖ‚ñÖ\n\n\nDepth [m]\n0\n1\n0.30\n0.25\n0.00\n0.17\n0.26\n0.34\n1.40\n‚ñá‚ñÖ‚ñÅ‚ñÅ‚ñÅ\n\n\nAge [ka BP]\n0\n1\n7.88\n3.49\n0.30\n5.83\n7.86\n9.82\n19.61\n‚ñÉ‚ñá‚ñá‚ñÇ‚ñÅ\n\n\nCaCO3 [%]\n0\n1\n57.94\n8.29\n33.70\n52.58\n57.80\n64.45\n74.60\n‚ñÅ‚ñÉ‚ñá‚ñá‚ñÖ\n\n\nBa [¬µg/g] (Leachate)\n0\n1\n216.49\n223.26\n0.00\n37.15\n122.00\n398.75\n954.00\n‚ñá‚ñÇ‚ñÇ‚ñÅ‚ñÅ\n\n\nSr [¬µg/g] (Leachate)\n0\n1\n784.98\n207.08\n341.00\n635.15\n767.50\n886.25\n1419.00\n‚ñÉ‚ñá‚ñá‚ñÇ‚ñÅ\n\n\nCa [¬µg/g] (Leachate)\n0\n1\n179277.91\n34034.64\n82460.20\n158421.22\n182153.85\n204214.33\n240253.00\n‚ñÅ‚ñÉ‚ñÜ‚ñá‚ñÖ\n\n\nAl [¬µg/g] (Leachate)\n0\n1\n9075.10\n3739.72\n122.20\n6036.95\n9034.50\n11691.80\n21011.90\n‚ñÇ‚ñá‚ñá‚ñÖ‚ñÅ\n\n\nFe [¬µg/g] (Leachate)\n0\n1\n7673.07\n4235.50\n189.60\n4937.08\n6918.25\n9513.88\n21428.70\n‚ñÉ‚ñá‚ñÉ‚ñÅ‚ñÅ\n\n\nBa [¬µg/g] (Residue)\n0\n1\n184.58\n109.97\n54.80\n98.30\n142.00\n251.00\n507.00\n‚ñá‚ñÉ‚ñÇ‚ñÅ‚ñÅ\n\n\nSr [¬µg/g] (Residue)\n0\n1\n46.15\n17.69\n20.50\n33.53\n41.10\n51.85\n120.00\n‚ñá‚ñá‚ñÇ‚ñÅ‚ñÅ\n\n\nCa [¬µg/g] (Residue)\n0\n1\n1316.60\n930.42\n475.50\n825.50\n1057.45\n1446.40\n8343.50\n‚ñá‚ñÅ‚ñÅ‚ñÅ‚ñÅ\n\n\nAl [¬µg/g] (Residue)\n0\n1\n36668.75\n8937.30\n19227.20\n29424.80\n37297.75\n43806.80\n60033.10\n‚ñÜ‚ñá‚ñá‚ñÜ‚ñÅ\n\n\nFe [¬µg/g] (Residue)\n0\n1\n21446.97\n6866.21\n10823.30\n16197.70\n20393.90\n24408.27\n48057.60\n‚ñá‚ñá‚ñÉ‚ñÅ‚ñÅ"
  },
  {
    "objectID": "slides/04-get.html#always-check-for-missing-values",
    "href": "slides/04-get.html#always-check-for-missing-values",
    "title": "Get and Clean Data",
    "section": "Always check for missing values",
    "text": "Always check for missing values\nskimr::skim() shows you how many values are missing in your dataset:\n\n\nHow many missing value are there?\nWhere do they occur?"
  },
  {
    "objectID": "slides/04-get.html#section-6",
    "href": "slides/04-get.html#section-6",
    "title": "Get and Clean Data",
    "section": "",
    "text": "A more formal way to check for missing values.\n\npangaea_data %>% \n  summarise(\n    across(\n      .fns = ~is.na(.) %>% sum()\n    )\n  ) %>% \n  glimpse()\n\nRows: 1\nColumns: 19\n$ Event                      <int> 0\n$ Latitude                   <int> 0\n$ Longitude                  <int> 0\n$ `Elevation [m]`            <int> 0\n$ `Sample label (barite-Sr)` <int> 0\n$ `Samp type`                <int> 0\n$ `Depth [m]`                <int> 0\n$ `Age [ka BP]`              <int> 0\n$ `CaCO3 [%]`                <int> 0\n$ `Ba [¬µg/g] (Leachate)`     <int> 0\n$ `Sr [¬µg/g] (Leachate)`     <int> 0\n$ `Ca [¬µg/g] (Leachate)`     <int> 0\n$ `Al [¬µg/g] (Leachate)`     <int> 0\n$ `Fe [¬µg/g] (Leachate)`     <int> 0\n$ `Ba [¬µg/g] (Residue)`      <int> 0\n$ `Sr [¬µg/g] (Residue)`      <int> 0\n$ `Ca [¬µg/g] (Residue)`      <int> 0\n$ `Al [¬µg/g] (Residue)`      <int> 0\n$ `Fe [¬µg/g] (Residue)`      <int> 0"
  },
  {
    "objectID": "slides/04-get.html#quick-checklist-when-you-read-new-data-into-r",
    "href": "slides/04-get.html#quick-checklist-when-you-read-new-data-into-r",
    "title": "Get and Clean Data",
    "section": "Quick checklist when you read new data into R",
    "text": "Quick checklist when you read new data into R\n\n\nCheck for missing values.\nCheck the column types, are they what you expect?\nCheck the row number and the column names.\nOptional, check the head() and the tail() of the file.\n\n\nNow let‚Äôs tidy the data."
  },
  {
    "objectID": "slides/04-get.html#exercise-1",
    "href": "slides/04-get.html#exercise-1",
    "title": "Get and Clean Data",
    "section": "Exercise",
    "text": "Exercise\nTidytuesday is a weekly data project aimed at learning, collaborating and networking the R ecosystem.\nFind this week‚Äôs dataset and read it in R. Run the checklist from the previous slide on the data that you‚Äôve read.\nIf you are donw early, proceed reading data from the previous week or find a colleague to help.\nCheck Tidytuesday submissions on Twitter with the hashtag #TidyTuesday\n\n\n2022 CBSER Summer School"
  },
  {
    "objectID": "slides/05-clean.html#which-dataset-is-tidy",
    "href": "slides/05-clean.html#which-dataset-is-tidy",
    "title": "Clean and Tidy Data",
    "section": "Which Dataset is Tidy?",
    "text": "Which Dataset is Tidy?\nA common practical way to structure (empirical) data.\n\n\nEvery column is a variable.\nEvery row is an observation.\nEvery cell is a single value.\n(Every observational unit is in its own table).\n\n\nPlus: fixed variables should come first, followed by measured variables.\nReference: An Introduction to Tidy Data"
  },
  {
    "objectID": "slides/05-clean.html#section",
    "href": "slides/05-clean.html#section",
    "title": "Clean and Tidy Data",
    "section": "",
    "text": "Joey\n\n\nMonica\n\n\nRachel\n\n\nPhoebe\n\n\nRoss\n\n\nChandler\n\n\nTribbiani\n\n\nGeller\n\n\nGreen\n\n\nBuffay\n\n\nGeller\n\n\nBing\n\n\n27\n\n\n24\n\n\n23\n\n\n27\n\n\n26\n\n\n26"
  },
  {
    "objectID": "slides/05-clean.html#semantics-of-tidy-data",
    "href": "slides/05-clean.html#semantics-of-tidy-data",
    "title": "Clean and Tidy Data",
    "section": "Semantics of (tidy) Data",
    "text": "Semantics of (tidy) Data\nAlways quoting the Tidy Data article:\n\nA dataset is a collection of values.\nEvery value belongs to a variable and an observation.\nA variable contains all values that measure the same underlying attribute (like height, temperature, duration) across units.\nAn observation contains all values measured on the same unit (like a person, or a day, or a race) across attributes"
  },
  {
    "objectID": "slides/05-clean.html#tools-tidy-data-with-tidyr",
    "href": "slides/05-clean.html#tools-tidy-data-with-tidyr",
    "title": "Clean and Tidy Data",
    "section": "Tools: Tidy data with Tidyr",
    "text": "Tools: Tidy data with Tidyr\n\n\n\n\nTidyr provides functions for:\n\nPivoting data.\nRectangling data.\nNesting data.\nCombining and splitting columns.\nMake missing values explicit."
  },
  {
    "objectID": "slides/05-clean.html#pangea-data",
    "href": "slides/05-clean.html#pangea-data",
    "title": "Clean and Tidy Data",
    "section": "Pangea Data",
    "text": "Pangea Data\nRemember the dataset from Pangaea?\n\npangaea_filename <- 'Dataset_S2_HCl-leaching.tab'\n\npangaea_path <- here('data-int/Wu-etal_2022/datasets', pangaea_filename)\n\npangaea_data <- \n  pangaea_path %>% \n  read_delim(delim = '\\t',\n             skip = 49)\n\n\npangaea_data %>% \n  glimpse()\n\nRows: 128\nColumns: 19\n$ Event                      <chr> \"SL73BC\", \"SL73BC\", \"SL73BC\", \"SL73BC\", \"SL‚Ä¶\n$ Latitude                   <dbl> 39.6617, 39.6617, 39.6617, 39.6617, 39.6617‚Ä¶\n$ Longitude                  <dbl> 24.5117, 24.5117, 24.5117, 24.5117, 24.5117‚Ä¶\n$ `Elevation [m]`            <dbl> -339, -339, -339, -339, -339, -339, -339, -‚Ä¶\n$ `Sample label (barite-Sr)` <chr> \"SL73-1\", \"SL73-2\", \"SL73-3\", \"SL73-4\", \"SL‚Ä¶\n$ `Samp type`                <chr> \"non-S1\", \"non-S1\", \"non-S1\", \"S1b\", \"S1b\",‚Ä¶\n$ `Depth [m]`                <dbl> 0.0045, 0.0465, 0.0665, 0.1215, 0.1765, 0.1‚Ä¶\n$ `Age [ka BP]`              <dbl> 1.66, 3.13, 4.13, 5.75, 7.30, 7.78, 8.65, 9‚Ä¶\n$ `CaCO3 [%]`                <dbl> 61.5, 55.1, 53.0, 43.4, 41.8, 42.3, 42.6, 3‚Ä¶\n$ `Ba [¬µg/g] (Leachate)`     <dbl> 72.6, 64.3, 37.4, 63.5, 101.0, 141.0, 75.2,‚Ä¶\n$ `Sr [¬µg/g] (Leachate)`     <dbl> 767, 681, 690, 552, 527, 528, 551, 482, 391‚Ä¶\n$ `Ca [¬µg/g] (Leachate)`     <dbl> 188951.9, 163260.4, 162188.7, 125937.6, 124‚Ä¶\n$ `Al [¬µg/g] (Leachate)`     <dbl> 10612.7, 11428.4, 5463.0, 3261.5, 2121.7, 1‚Ä¶\n$ `Fe [¬µg/g] (Leachate)`     <dbl> 5935.0, 6814.3, 2465.7, 3936.8, 189.6, 7711‚Ä¶\n$ `Ba [¬µg/g] (Residue)`      <dbl> 171.0, 198.0, 251.0, 290.0, 315.0, 259.0, 3‚Ä¶\n$ `Sr [¬µg/g] (Residue)`      <dbl> 66.6, 71.3, 90.3, 99.8, 106.0, 90.7, 108.0,‚Ä¶\n$ `Ca [¬µg/g] (Residue)`      <dbl> 2315.5, 2369.6, 3007.7, 3447.9, 3713.2, 331‚Ä¶\n$ `Al [¬µg/g] (Residue)`      <dbl> 29262.5, 35561.4, 45862.4, 52485.6, 55083.0‚Ä¶\n$ `Fe [¬µg/g] (Residue)`      <dbl> 14834.8, 18301.4, 24534.5, 30745.3, 28532.2‚Ä¶"
  },
  {
    "objectID": "slides/05-clean.html#clean-the-column-names-with-janitor",
    "href": "slides/05-clean.html#clean-the-column-names-with-janitor",
    "title": "Clean and Tidy Data",
    "section": "Clean the column names with Janitor",
    "text": "Clean the column names with Janitor\nwe can remove capitalization, spaces, and strange characters from the column names with the function clean_names() from the Janitor Package.\n\npangaea_data <- \n  pangaea_data %>% \n  janitor::clean_names()\n\npangaea_data %>%\n  glimpse()\n\nRows: 128\nColumns: 19\n$ event                  <chr> \"SL73BC\", \"SL73BC\", \"SL73BC\", \"SL73BC\", \"SL73BC‚Ä¶\n$ latitude               <dbl> 39.6617, 39.6617, 39.6617, 39.6617, 39.6617, 39‚Ä¶\n$ longitude              <dbl> 24.5117, 24.5117, 24.5117, 24.5117, 24.5117, 24‚Ä¶\n$ elevation_m            <dbl> -339, -339, -339, -339, -339, -339, -339, -339,‚Ä¶\n$ sample_label_barite_sr <chr> \"SL73-1\", \"SL73-2\", \"SL73-3\", \"SL73-4\", \"SL73-5‚Ä¶\n$ samp_type              <chr> \"non-S1\", \"non-S1\", \"non-S1\", \"S1b\", \"S1b\", \"S1‚Ä¶\n$ depth_m                <dbl> 0.0045, 0.0465, 0.0665, 0.1215, 0.1765, 0.1915,‚Ä¶\n$ age_ka_bp              <dbl> 1.66, 3.13, 4.13, 5.75, 7.30, 7.78, 8.65, 9.94,‚Ä¶\n$ ca_co3_percent         <dbl> 61.5, 55.1, 53.0, 43.4, 41.8, 42.3, 42.6, 39.1,‚Ä¶\n$ ba_mg_g_leachate       <dbl> 72.6, 64.3, 37.4, 63.5, 101.0, 141.0, 75.2, 99.‚Ä¶\n$ sr_mg_g_leachate       <dbl> 767, 681, 690, 552, 527, 528, 551, 482, 391, 70‚Ä¶\n$ ca_mg_g_leachate       <dbl> 188951.9, 163260.4, 162188.7, 125937.6, 124733.‚Ä¶\n$ al_mg_g_leachate       <dbl> 10612.7, 11428.4, 5463.0, 3261.5, 2121.7, 12740‚Ä¶\n$ fe_mg_g_leachate       <dbl> 5935.0, 6814.3, 2465.7, 3936.8, 189.6, 7711.3, ‚Ä¶\n$ ba_mg_g_residue        <dbl> 171.0, 198.0, 251.0, 290.0, 315.0, 259.0, 310.0‚Ä¶\n$ sr_mg_g_residue        <dbl> 66.6, 71.3, 90.3, 99.8, 106.0, 90.7, 108.0, 96.‚Ä¶\n$ ca_mg_g_residue        <dbl> 2315.5, 2369.6, 3007.7, 3447.9, 3713.2, 3316.7,‚Ä¶\n$ al_mg_g_residue        <dbl> 29262.5, 35561.4, 45862.4, 52485.6, 55083.0, 44‚Ä¶\n$ fe_mg_g_residue        <dbl> 14834.8, 18301.4, 24534.5, 30745.3, 28532.2, 22‚Ä¶\n\n\nWatch out: Janitor transforms ¬µ into m (so micrograms become milligrams)."
  },
  {
    "objectID": "slides/05-clean.html#place-fixed-variables-in-the-first-columns",
    "href": "slides/05-clean.html#place-fixed-variables-in-the-first-columns",
    "title": "Clean and Tidy Data",
    "section": "Place fixed variables in the first columns",
    "text": "Place fixed variables in the first columns\nWhich column is a fixed variable?\nI‚Äôm not sure if ca_co3_percent is a measured variable, and if it belongs to another informational unit.\nBesides that, the fixed variables are already in front."
  },
  {
    "objectID": "slides/05-clean.html#there-are-values-stored-in-the-column-names",
    "href": "slides/05-clean.html#there-are-values-stored-in-the-column-names",
    "title": "Clean and Tidy Data",
    "section": "There are values stored in the column names",
    "text": "There are values stored in the column names\nLet‚Äôs pivot the measured variables.\n\npangaea_long <- \n  pangaea_data %>% \n  pivot_longer(\n    cols = contains(match = c('leachate', 'residue')),\n    values_to = 'concentration',\n    names_to = 'element'\n  )\n\npangaea_long\n\n# A tibble: 1,280 √ó 11\n   event latit‚Ä¶¬π longi‚Ä¶¬≤ eleva‚Ä¶¬≥ sampl‚Ä¶‚Å¥ samp_‚Ä¶‚Åµ depth_m age_k‚Ä¶‚Å∂ ca_co‚Ä¶‚Å∑ element\n   <chr>   <dbl>   <dbl>   <dbl> <chr>   <chr>     <dbl>   <dbl>   <dbl> <chr>  \n 1 SL73‚Ä¶    39.7    24.5    -339 SL73-1  non-S1   0.0045    1.66    61.5 ba_mg_‚Ä¶\n 2 SL73‚Ä¶    39.7    24.5    -339 SL73-1  non-S1   0.0045    1.66    61.5 sr_mg_‚Ä¶\n 3 SL73‚Ä¶    39.7    24.5    -339 SL73-1  non-S1   0.0045    1.66    61.5 ca_mg_‚Ä¶\n 4 SL73‚Ä¶    39.7    24.5    -339 SL73-1  non-S1   0.0045    1.66    61.5 al_mg_‚Ä¶\n 5 SL73‚Ä¶    39.7    24.5    -339 SL73-1  non-S1   0.0045    1.66    61.5 fe_mg_‚Ä¶\n 6 SL73‚Ä¶    39.7    24.5    -339 SL73-1  non-S1   0.0045    1.66    61.5 ba_mg_‚Ä¶\n 7 SL73‚Ä¶    39.7    24.5    -339 SL73-1  non-S1   0.0045    1.66    61.5 sr_mg_‚Ä¶\n 8 SL73‚Ä¶    39.7    24.5    -339 SL73-1  non-S1   0.0045    1.66    61.5 ca_mg_‚Ä¶\n 9 SL73‚Ä¶    39.7    24.5    -339 SL73-1  non-S1   0.0045    1.66    61.5 al_mg_‚Ä¶\n10 SL73‚Ä¶    39.7    24.5    -339 SL73-1  non-S1   0.0045    1.66    61.5 fe_mg_‚Ä¶\n# ‚Ä¶ with 1,270 more rows, 1 more variable: concentration <dbl>, and abbreviated\n#   variable names ¬π‚Äãlatitude, ¬≤‚Äãlongitude, ¬≥‚Äãelevation_m,\n#   ‚Å¥‚Äãsample_label_barite_sr, ‚Åµ‚Äãsamp_type, ‚Å∂‚Äãage_ka_bp, ‚Å∑‚Äãca_co3_percent\n# ‚Ñπ Use `print(n = ...)` to see more rows, and `colnames()` to see all variable names\n\npangaea_long %>% glimpse()\n\nRows: 1,280\nColumns: 11\n$ event                  <chr> \"SL73BC\", \"SL73BC\", \"SL73BC\", \"SL73BC\", \"SL73BC‚Ä¶\n$ latitude               <dbl> 39.6617, 39.6617, 39.6617, 39.6617, 39.6617, 39‚Ä¶\n$ longitude              <dbl> 24.5117, 24.5117, 24.5117, 24.5117, 24.5117, 24‚Ä¶\n$ elevation_m            <dbl> -339, -339, -339, -339, -339, -339, -339, -339,‚Ä¶\n$ sample_label_barite_sr <chr> \"SL73-1\", \"SL73-1\", \"SL73-1\", \"SL73-1\", \"SL73-1‚Ä¶\n$ samp_type              <chr> \"non-S1\", \"non-S1\", \"non-S1\", \"non-S1\", \"non-S1‚Ä¶\n$ depth_m                <dbl> 0.0045, 0.0045, 0.0045, 0.0045, 0.0045, 0.0045,‚Ä¶\n$ age_ka_bp              <dbl> 1.66, 1.66, 1.66, 1.66, 1.66, 1.66, 1.66, 1.66,‚Ä¶\n$ ca_co3_percent         <dbl> 61.5, 61.5, 61.5, 61.5, 61.5, 61.5, 61.5, 61.5,‚Ä¶\n$ element                <chr> \"ba_mg_g_leachate\", \"sr_mg_g_leachate\", \"ca_mg_‚Ä¶\n$ concentration          <dbl> 72.6, 767.0, 188951.9, 10612.7, 5935.0, 171.0, ‚Ä¶\n\n\nWhen we pivot data we move them from a wide to a long format and vice-versa.\n\n(Image from Alisson Horst, check her other stats illustrations here)"
  },
  {
    "objectID": "slides/05-clean.html#one-cell-contains-multiple-values",
    "href": "slides/05-clean.html#one-cell-contains-multiple-values",
    "title": "Clean and Tidy Data",
    "section": "One cell contains multiple values",
    "text": "One cell contains multiple values\nNow it‚Äôs clear that element contains more than one value.\nFor example: ba_mg_g_leachate is not a single values and could be split into:\n\nelement: ba.\nunit: mg_g.\nfraction: leachate.\n\nLet‚Äôs split this column at the _ and reconstitute it in a tidy way\n\npangaea_tidy <- \n  pangaea_long %>% \n  separate(element, into = c('element', 'unit_num', 'unit_dem', 'fraction'), sep = '_') %>% \n  unite(col = 'unit', unit_num:unit_dem, sep = '_')"
  },
  {
    "objectID": "slides/05-clean.html#exercise",
    "href": "slides/05-clean.html#exercise",
    "title": "Clean and Tidy Data",
    "section": "Exercise",
    "text": "Exercise\nTidy last week‚Äôs schedule.\n\n\n\n2022 CBSER Summer School"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Data Analysis in R",
    "section": "",
    "text": "Hands-on Lessons\n\nMeet R\nManipulate Data\nVisualize Data\nGet Data into R\nClean Data with R"
  }
]