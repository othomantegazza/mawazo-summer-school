[
  {
    "objectID": "slides/00-intro.html#the-r-project-for-statistical-computing",
    "href": "slides/00-intro.html#the-r-project-for-statistical-computing",
    "title": "About R",
    "section": "The R Project for Statistical Computing",
    "text": "The R Project for Statistical Computing\nhttps://www.r-project.org/\n\nStarted in 1991 by Ross Ihaka and Robert Gentleman at the University of Auckland (NZ).\nMade open source in 1995.\nOfficial ‚Äúpeer reviewed‚Äù packages are hosted on CRAN.\nHas multiple ‚Äúuniverses‚Äù of packages, including Bioconductor dedicated to bioinformatics, and the Tidyverse for Data Science.\nGreat for analyzing data, for statistics, for research and for communicating data to others."
  },
  {
    "objectID": "slides/00-intro.html#a-bit-more-on-r",
    "href": "slides/00-intro.html#a-bit-more-on-r",
    "title": "About R",
    "section": "A bit more on R",
    "text": "A bit more on R\n\nWe are going to use the Tidyverse. But you might have to learn also a bit of the original idiom, now called base R, which sometimes helps if you have to programm your own functions.\nWe are going to use R in visual studio code as you did for Python, but you might want to try out also Rstudio, which is a great open source IDE dedicated to R."
  },
  {
    "objectID": "slides/00-intro.html#as-always-stackoverflow-is-your-friend",
    "href": "slides/00-intro.html#as-always-stackoverflow-is-your-friend",
    "title": "About R",
    "section": "As always, stackoverflow is your friend",
    "text": "As always, stackoverflow is your friend\nIf you need help, as always, Google and Stackoverflow are your friends.\n\nBut sometimes you need to learn on a support that is structured, nuanced and detailed‚Ä¶ üìö"
  },
  {
    "objectID": "slides/00-intro.html#a-helpful-and-welcoming-community",
    "href": "slides/00-intro.html#a-helpful-and-welcoming-community",
    "title": "About R",
    "section": "A helpful and welcoming community üìö",
    "text": "A helpful and welcoming community üìö\nOne of the things that makes R great is its community of users and programmer.\nIt is open source and open access oriented and highly dedicated to lowering the barrier to learning R and data science, and make their tools available and usable to everyone."
  },
  {
    "objectID": "slides/00-intro.html#open-books",
    "href": "slides/00-intro.html#open-books",
    "title": "About R",
    "section": "Open Books",
    "text": "Open Books\n\n\nBookdown: a package and a repository for open access books about R."
  },
  {
    "objectID": "slides/00-intro.html#open-books-1",
    "href": "slides/00-intro.html#open-books-1",
    "title": "About R",
    "section": "Open Books",
    "text": "Open Books\n\n\n\nR for Data Science - A gentle introducion to data science with the Tidyverse.\nIntroduction to Data Science - A detailed introduction to Data science by a biostatistician.\nAdvanced R - All you need to know about programming in R.\nIntroduction to Statistical Learning - A detailed introductio to modern statistical methods, implemented in R.\n\n\n\nText Mining in R Dealing with natural language and written text in R.\nTidy Modeling with R R Machine learning framework.\nDesigning and Building Data Science Solutions how to set up a data science project."
  },
  {
    "objectID": "slides/00-intro.html#more",
    "href": "slides/00-intro.html#more",
    "title": "About R",
    "section": "More ‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è",
    "text": "More ‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è\n\nSlack Spaces\n\n\nR for Data Science Community a slack chanel for R networking.\n\n\nBlogs\n\nAlison Hill‚Äôs Blog; great for everything Rmarkdown.\nSimply Statistics; modern statistics and R.\nJulia Silge‚Äôs Blog; learn about R machine learning framework from one of its main developer.\nGina Reynolds Flipbooks; for more tidyverse and Rmarkdown mastery.\nFornkonstin; at the interface between math, art and coding.\nData imaginist; more art in R üé®.\n\nCollaborative Challenges\n\nTidytuesday Tidy and visualize a dataset and share your results with the R community every week on Tuesday.\n\n\n\n\n2022 CBSER Summer School"
  },
  {
    "objectID": "slides/01-meet-r.html#r-understands-you",
    "href": "slides/01-meet-r.html#r-understands-you",
    "title": "Meet R",
    "section": "R understands you",
    "text": "R understands you\nWrite someting at the R console:\n\nA simple number‚Ä¶\n\n2\n\n[1] 2\n\n\n\n\nSome operation‚Ä¶\n\n3 + 7\n\n[1] 10\n\n\n\n\nText must be quoted‚Ä¶\n\n'hello'\n\n[1] \"hello\"\n\n\n\n\nOtherwise it is interpreted as the name of a variable:\n\nmy_var\n\nError in eval(expr, envir, enclos): object 'my_var' not found"
  },
  {
    "objectID": "slides/01-meet-r.html#you-can-define-variables",
    "href": "slides/01-meet-r.html#you-can-define-variables",
    "title": "Meet R",
    "section": "You can define variables",
    "text": "You can define variables\nYou can define a variable with the operator <- .\n\n# a numeric variable\nthis_year <- 2022\n \n# a character variable\nitalian_greetings <- 'ciao'\n\n\nIf you type the name of a variable without quotes, r prints its value:\n\nthis_year\n\n[1] 2022\n\n\n\nitalian_greetings\n\n[1] \"ciao\"\n\n\n\n\nUse the keyboard shortcut alt/option + - to write the assign operator <- more easily."
  },
  {
    "objectID": "slides/01-meet-r.html#data-types",
    "href": "slides/01-meet-r.html#data-types",
    "title": "Meet R",
    "section": "Data Types",
    "text": "Data Types\nWhen you define an object R guesses its type.\n\ntypeof() returns the internal type of an object.\n\ntypeof(this_year)\n\n[1] \"double\"\n\ntypeof(italian_greetings)\n\n[1] \"character\"\n\n\n\n\nclass() returns a the class attribute of an object.\n\nclass(this_year)\n\n[1] \"numeric\"\n\nclass(italian_greetings)\n\n[1] \"character\""
  },
  {
    "objectID": "slides/01-meet-r.html#everything-in-r-is-an-object",
    "href": "slides/01-meet-r.html#everything-in-r-is-an-object",
    "title": "Meet R",
    "section": "Everything in R is an object",
    "text": "Everything in R is an object\nAnd objects have a types.\n\n\nclass(2)\n\n[1] \"numeric\"\n\n\n\n\n\nclass('hello')\n\n[1] \"character\"\n\n\n\n\n\nclass(FALSE)\n\n[1] \"logical\"\n\n\n\n\n\nclass(mean)\n\n[1] \"function\"\n\n\n\n\n\nclass(`<-`)\n\n[1] \"function\"\n\n\n\n\n\nclass(Sys.Date())\n\n[1] \"Date\""
  },
  {
    "objectID": "slides/01-meet-r.html#exercise",
    "href": "slides/01-meet-r.html#exercise",
    "title": "Meet R",
    "section": "Exercise",
    "text": "Exercise\n\nUse the function c(arg_1, arg_2, ..., arg_n) to put together in a vector many objects that you expect to have the same class. Try with different ones.\nNow do the same, but try to put together in a vector data with different types, what happened?\n\n\n\nLearn more about vectors and types at Advanced R."
  },
  {
    "objectID": "slides/01-meet-r.html#vectors-store-one-or-more-data-point-of-the-same-class",
    "href": "slides/01-meet-r.html#vectors-store-one-or-more-data-point-of-the-same-class",
    "title": "Meet R",
    "section": "Vectors store one or more data point of the same class",
    "text": "Vectors store one or more data point of the same class\n\nnum_vector <- c(1, 3, 5, 3, 6)\n\ncharacter_vector <- c('Hi', ',', 'I', 'am', 'a', 'character', 'vector')\n\nlogical_vector <- c(TRUE, FALSE, FALSE, TRUE, FALSE)\n\n\n\n\nclass(num_vector)\n\n[1] \"numeric\"\n\nclass(character_vector)\n\n[1] \"character\"\n\nclass(logical_vector)\n\n[1] \"logical\""
  },
  {
    "objectID": "slides/01-meet-r.html#classes-can-be-coherced",
    "href": "slides/01-meet-r.html#classes-can-be-coherced",
    "title": "Meet R",
    "section": "Classes can be coherced",
    "text": "Classes can be coherced\nTRUE and FALSE can be coerced into numeric zeroes and ones, or also into characters.\n\nc(2, TRUE, 5, FALSE, 4)\n\n[1] 2 1 5 0 4\n\n\n\nNumbers can be coerced into characters.\n\nc('a', TRUE, 5, FALSE, 4)\n\n[1] \"a\"     \"TRUE\"  \"5\"     \"FALSE\" \"4\""
  },
  {
    "objectID": "slides/01-meet-r.html#classes-can-be-coherced-1",
    "href": "slides/01-meet-r.html#classes-can-be-coherced-1",
    "title": "Meet R",
    "section": "Classes can be coherced",
    "text": "Classes can be coherced\nClasses can be coerced explicitly.\n\nlogical_vector <- c(T, F, F, T, T, F)\nlogical_vector\n\n[1]  TRUE FALSE FALSE  TRUE  TRUE FALSE\n\nas.numeric(logical_vector)\n\n[1] 1 0 0 1 1 0\n\nas.character(logical_vector)\n\n[1] \"TRUE\"  \"FALSE\" \"FALSE\" \"TRUE\"  \"TRUE\"  \"FALSE\"\n\n\n\nIf an element can‚Äôt be coerced to the desired class, R returns a missing value (NA).\n\nas.numeric(c('1', 'two', '3'))\n\n[1]  1 NA  3"
  },
  {
    "objectID": "slides/01-meet-r.html#atomic-elements-are-vectors-of-length-1",
    "href": "slides/01-meet-r.html#atomic-elements-are-vectors-of-length-1",
    "title": "Meet R",
    "section": "Atomic elements are vectors of length 1",
    "text": "Atomic elements are vectors of length 1\n\nshort_vector <- 1\nlong_vector <- 1:50\n\n\n\nshort_vector\n\n[1] 1\n\nlong_vector\n\n [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25\n[26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50\n\n\n\n\n\nclass(short_vector)\n\n[1] \"numeric\"\n\nclass(long_vector)\n\n[1] \"integer\"\n\n\n\n\n\nlength(short_vector)\n\n[1] 1\n\nlength(long_vector)\n\n[1] 50"
  },
  {
    "objectID": "slides/01-meet-r.html#most-functions-in-r-are-vectorized",
    "href": "slides/01-meet-r.html#most-functions-in-r-are-vectorized",
    "title": "Meet R",
    "section": "Most functions in R are vectorized",
    "text": "Most functions in R are vectorized\nIf I want to apply an operation over a vector, I can just write it as it is without a for loop. For example:\n\nAdd an integer to every number in a vector:\n\nlong_vector + 100\n\n [1] 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119\n[20] 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138\n[39] 139 140 141 142 143 144 145 146 147 148 149 150\n\n\n\n\nMultiply every number in a vector by an integer:\n\nlong_vector * 2\n\n [1]   2   4   6   8  10  12  14  16  18  20  22  24  26  28  30  32  34  36  38\n[20]  40  42  44  46  48  50  52  54  56  58  60  62  64  66  68  70  72  74  76\n[39]  78  80  82  84  86  88  90  92  94  96  98 100"
  },
  {
    "objectID": "slides/01-meet-r.html#most-functions-in-r-are-vectorized-1",
    "href": "slides/01-meet-r.html#most-functions-in-r-are-vectorized-1",
    "title": "Meet R",
    "section": "Most functions in R are vectorized",
    "text": "Most functions in R are vectorized\nTake the square root of every number in a vector:\n\nsqrt(long_vector)\n\n [1] 1.000000 1.414214 1.732051 2.000000 2.236068 2.449490 2.645751 2.828427\n [9] 3.000000 3.162278 3.316625 3.464102 3.605551 3.741657 3.872983 4.000000\n[17] 4.123106 4.242641 4.358899 4.472136 4.582576 4.690416 4.795832 4.898979\n[25] 5.000000 5.099020 5.196152 5.291503 5.385165 5.477226 5.567764 5.656854\n[33] 5.744563 5.830952 5.916080 6.000000 6.082763 6.164414 6.244998 6.324555\n[41] 6.403124 6.480741 6.557439 6.633250 6.708204 6.782330 6.855655 6.928203\n[49] 7.000000 7.071068"
  },
  {
    "objectID": "slides/01-meet-r.html#exercise-1",
    "href": "slides/01-meet-r.html#exercise-1",
    "title": "Meet R",
    "section": "Exercise",
    "text": "Exercise\n\nGenerate a vector of 100 (semi-) random numbers with a normal distribution.\nUse a for loop (even if you don‚Äôt need one) to multiply eachs number in the vector by 2.\n\n\n\nFor loops in R according to Roger D. Peng."
  },
  {
    "objectID": "slides/01-meet-r.html#extra---lists",
    "href": "slides/01-meet-r.html#extra---lists",
    "title": "Meet R",
    "section": "Extra - Lists",
    "text": "Extra - Lists\nIf you need to collect together and store data of different types, you can use lists.\n\nmy_list <- list(\n  'hello',\n  1,\n  FALSE,\n  1:25\n)\n\nmy_list\n\n[[1]]\n[1] \"hello\"\n\n[[2]]\n[1] 1\n\n[[3]]\n[1] FALSE\n\n[[4]]\n [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25"
  },
  {
    "objectID": "slides/01-meet-r.html#can-we-use-vectors-to-build-a-dataframe",
    "href": "slides/01-meet-r.html#can-we-use-vectors-to-build-a-dataframe",
    "title": "Meet R",
    "section": "Can we use vectors to build a dataframe?",
    "text": "Can we use vectors to build a dataframe?\nWe learned that vector contain elements of the same type, for example, numerics, character, logical.\n\nAccording to the Tidy Data theory, in rectangular dataframes:\n\n\nEach row is an observation.\nEach column is a variable.\n\n\nBy definiton variables of your data, must be made by atomic elements of the same type. So we can use vectors of the same length to build the columns of a dataframe.\nLet‚Äôs try."
  },
  {
    "objectID": "slides/01-meet-r.html#and-we-have-data",
    "href": "slides/01-meet-r.html#and-we-have-data",
    "title": "Meet R",
    "section": "And‚Ä¶ We have data",
    "text": "And‚Ä¶ We have data\nLet‚Äôs prepare three vectors with the first observations of iris and use them to make a dataframe.\n\nsepal_length <- c(5.1, 7.0, 6.3)\n\nsepal_width <- c(3.5, 3.2, 3.3)\n\nspecies <- c('setosa', 'versicolor', 'virginica')\n\niris_simple <- \n  data.frame(\n    species,\n    sepal_length,\n    sepal_width\n  )\n\niris_simple\n\n     species sepal_length sepal_width\n1     setosa          5.1         3.5\n2 versicolor          7.0         3.2\n3  virginica          6.3         3.3"
  },
  {
    "objectID": "slides/01-meet-r.html#and-we-have-data-1",
    "href": "slides/01-meet-r.html#and-we-have-data-1",
    "title": "Meet R",
    "section": "And‚Ä¶ We have data",
    "text": "And‚Ä¶ We have data\nThe variable iris_simple points to a dataframe that stores rectangular data.\n\nclass(iris_simple)\n\n[1] \"data.frame\"\n\n\n\ndim(iris_simple)\n\n[1] 3 3\n\n\n\nWe can access its columns with the operator $. Each column is a vector.\n\niris_simple$sepal_length\n\n[1] 5.1 7.0 6.3\n\n\n\nclass(iris_simple$sepal_length)\n\n[1] \"numeric\"\n\n\n\nis.vector(iris_simple$sepal_length)\n\n[1] TRUE"
  },
  {
    "objectID": "slides/01-meet-r.html#section",
    "href": "slides/01-meet-r.html#section",
    "title": "Meet R",
    "section": "",
    "text": "Now that we have data, let‚Äôs take our first stroll into the Tidyverse."
  },
  {
    "objectID": "slides/01-meet-r.html#tibbles-a-modern-take-on-dataframes",
    "href": "slides/01-meet-r.html#tibbles-a-modern-take-on-dataframes",
    "title": "Meet R",
    "section": "Tibbles: a modern take on dataframes",
    "text": "Tibbles: a modern take on dataframes\nLet‚Äôs attach the whole Tidyverse, which includes also the Tibble package‚Ä¶\n\nlibrary(tidyverse)\n\n\n‚Ä¶and convert our dataframe iris_simple into a tibble.\n\niris_simple <- as_tibble(iris_simple)\n\n\n\nThe print method for a tibble, provides a handy and informative output.\n\niris_simple\n\n# A tibble: 3 √ó 3\n  species    sepal_length sepal_width\n  <chr>             <dbl>       <dbl>\n1 setosa              5.1         3.5\n2 versicolor          7           3.2\n3 virginica           6.3         3.3"
  },
  {
    "objectID": "slides/01-meet-r.html#tibbles-a-modern-take-on-dataframes-1",
    "href": "slides/01-meet-r.html#tibbles-a-modern-take-on-dataframes-1",
    "title": "Meet R",
    "section": "Tibbles: a modern take on dataframes",
    "text": "Tibbles: a modern take on dataframes\nLet‚Äôs compare the print method for the dataframe iris, before and after we convert it to a tibble.\n\niris\n\n    Sepal.Length Sepal.Width Petal.Length Petal.Width    Species\n1            5.1         3.5          1.4         0.2     setosa\n2            4.9         3.0          1.4         0.2     setosa\n3            4.7         3.2          1.3         0.2     setosa\n4            4.6         3.1          1.5         0.2     setosa\n5            5.0         3.6          1.4         0.2     setosa\n6            5.4         3.9          1.7         0.4     setosa\n7            4.6         3.4          1.4         0.3     setosa\n8            5.0         3.4          1.5         0.2     setosa\n9            4.4         2.9          1.4         0.2     setosa\n10           4.9         3.1          1.5         0.1     setosa\n11           5.4         3.7          1.5         0.2     setosa\n12           4.8         3.4          1.6         0.2     setosa\n13           4.8         3.0          1.4         0.1     setosa\n14           4.3         3.0          1.1         0.1     setosa\n15           5.8         4.0          1.2         0.2     setosa\n16           5.7         4.4          1.5         0.4     setosa\n17           5.4         3.9          1.3         0.4     setosa\n18           5.1         3.5          1.4         0.3     setosa\n19           5.7         3.8          1.7         0.3     setosa\n20           5.1         3.8          1.5         0.3     setosa\n21           5.4         3.4          1.7         0.2     setosa\n22           5.1         3.7          1.5         0.4     setosa\n23           4.6         3.6          1.0         0.2     setosa\n24           5.1         3.3          1.7         0.5     setosa\n25           4.8         3.4          1.9         0.2     setosa\n26           5.0         3.0          1.6         0.2     setosa\n27           5.0         3.4          1.6         0.4     setosa\n28           5.2         3.5          1.5         0.2     setosa\n29           5.2         3.4          1.4         0.2     setosa\n30           4.7         3.2          1.6         0.2     setosa\n31           4.8         3.1          1.6         0.2     setosa\n32           5.4         3.4          1.5         0.4     setosa\n33           5.2         4.1          1.5         0.1     setosa\n34           5.5         4.2          1.4         0.2     setosa\n35           4.9         3.1          1.5         0.2     setosa\n36           5.0         3.2          1.2         0.2     setosa\n37           5.5         3.5          1.3         0.2     setosa\n38           4.9         3.6          1.4         0.1     setosa\n39           4.4         3.0          1.3         0.2     setosa\n40           5.1         3.4          1.5         0.2     setosa\n41           5.0         3.5          1.3         0.3     setosa\n42           4.5         2.3          1.3         0.3     setosa\n43           4.4         3.2          1.3         0.2     setosa\n44           5.0         3.5          1.6         0.6     setosa\n45           5.1         3.8          1.9         0.4     setosa\n46           4.8         3.0          1.4         0.3     setosa\n47           5.1         3.8          1.6         0.2     setosa\n48           4.6         3.2          1.4         0.2     setosa\n49           5.3         3.7          1.5         0.2     setosa\n50           5.0         3.3          1.4         0.2     setosa\n51           7.0         3.2          4.7         1.4 versicolor\n52           6.4         3.2          4.5         1.5 versicolor\n53           6.9         3.1          4.9         1.5 versicolor\n54           5.5         2.3          4.0         1.3 versicolor\n55           6.5         2.8          4.6         1.5 versicolor\n56           5.7         2.8          4.5         1.3 versicolor\n57           6.3         3.3          4.7         1.6 versicolor\n58           4.9         2.4          3.3         1.0 versicolor\n59           6.6         2.9          4.6         1.3 versicolor\n60           5.2         2.7          3.9         1.4 versicolor\n61           5.0         2.0          3.5         1.0 versicolor\n62           5.9         3.0          4.2         1.5 versicolor\n63           6.0         2.2          4.0         1.0 versicolor\n64           6.1         2.9          4.7         1.4 versicolor\n65           5.6         2.9          3.6         1.3 versicolor\n66           6.7         3.1          4.4         1.4 versicolor\n67           5.6         3.0          4.5         1.5 versicolor\n68           5.8         2.7          4.1         1.0 versicolor\n69           6.2         2.2          4.5         1.5 versicolor\n70           5.6         2.5          3.9         1.1 versicolor\n71           5.9         3.2          4.8         1.8 versicolor\n72           6.1         2.8          4.0         1.3 versicolor\n73           6.3         2.5          4.9         1.5 versicolor\n74           6.1         2.8          4.7         1.2 versicolor\n75           6.4         2.9          4.3         1.3 versicolor\n76           6.6         3.0          4.4         1.4 versicolor\n77           6.8         2.8          4.8         1.4 versicolor\n78           6.7         3.0          5.0         1.7 versicolor\n79           6.0         2.9          4.5         1.5 versicolor\n80           5.7         2.6          3.5         1.0 versicolor\n81           5.5         2.4          3.8         1.1 versicolor\n82           5.5         2.4          3.7         1.0 versicolor\n83           5.8         2.7          3.9         1.2 versicolor\n84           6.0         2.7          5.1         1.6 versicolor\n85           5.4         3.0          4.5         1.5 versicolor\n86           6.0         3.4          4.5         1.6 versicolor\n87           6.7         3.1          4.7         1.5 versicolor\n88           6.3         2.3          4.4         1.3 versicolor\n89           5.6         3.0          4.1         1.3 versicolor\n90           5.5         2.5          4.0         1.3 versicolor\n91           5.5         2.6          4.4         1.2 versicolor\n92           6.1         3.0          4.6         1.4 versicolor\n93           5.8         2.6          4.0         1.2 versicolor\n94           5.0         2.3          3.3         1.0 versicolor\n95           5.6         2.7          4.2         1.3 versicolor\n96           5.7         3.0          4.2         1.2 versicolor\n97           5.7         2.9          4.2         1.3 versicolor\n98           6.2         2.9          4.3         1.3 versicolor\n99           5.1         2.5          3.0         1.1 versicolor\n100          5.7         2.8          4.1         1.3 versicolor\n101          6.3         3.3          6.0         2.5  virginica\n102          5.8         2.7          5.1         1.9  virginica\n103          7.1         3.0          5.9         2.1  virginica\n104          6.3         2.9          5.6         1.8  virginica\n105          6.5         3.0          5.8         2.2  virginica\n106          7.6         3.0          6.6         2.1  virginica\n107          4.9         2.5          4.5         1.7  virginica\n108          7.3         2.9          6.3         1.8  virginica\n109          6.7         2.5          5.8         1.8  virginica\n110          7.2         3.6          6.1         2.5  virginica\n111          6.5         3.2          5.1         2.0  virginica\n112          6.4         2.7          5.3         1.9  virginica\n113          6.8         3.0          5.5         2.1  virginica\n114          5.7         2.5          5.0         2.0  virginica\n115          5.8         2.8          5.1         2.4  virginica\n116          6.4         3.2          5.3         2.3  virginica\n117          6.5         3.0          5.5         1.8  virginica\n118          7.7         3.8          6.7         2.2  virginica\n119          7.7         2.6          6.9         2.3  virginica\n120          6.0         2.2          5.0         1.5  virginica\n121          6.9         3.2          5.7         2.3  virginica\n122          5.6         2.8          4.9         2.0  virginica\n123          7.7         2.8          6.7         2.0  virginica\n124          6.3         2.7          4.9         1.8  virginica\n125          6.7         3.3          5.7         2.1  virginica\n126          7.2         3.2          6.0         1.8  virginica\n127          6.2         2.8          4.8         1.8  virginica\n128          6.1         3.0          4.9         1.8  virginica\n129          6.4         2.8          5.6         2.1  virginica\n130          7.2         3.0          5.8         1.6  virginica\n131          7.4         2.8          6.1         1.9  virginica\n132          7.9         3.8          6.4         2.0  virginica\n133          6.4         2.8          5.6         2.2  virginica\n134          6.3         2.8          5.1         1.5  virginica\n135          6.1         2.6          5.6         1.4  virginica\n136          7.7         3.0          6.1         2.3  virginica\n137          6.3         3.4          5.6         2.4  virginica\n138          6.4         3.1          5.5         1.8  virginica\n139          6.0         3.0          4.8         1.8  virginica\n140          6.9         3.1          5.4         2.1  virginica\n141          6.7         3.1          5.6         2.4  virginica\n142          6.9         3.1          5.1         2.3  virginica\n143          5.8         2.7          5.1         1.9  virginica\n144          6.8         3.2          5.9         2.3  virginica\n145          6.7         3.3          5.7         2.5  virginica\n146          6.7         3.0          5.2         2.3  virginica\n147          6.3         2.5          5.0         1.9  virginica\n148          6.5         3.0          5.2         2.0  virginica\n149          6.2         3.4          5.4         2.3  virginica\n150          5.9         3.0          5.1         1.8  virginica"
  },
  {
    "objectID": "slides/01-meet-r.html#tibbles-a-modern-take-on-dataframes-2",
    "href": "slides/01-meet-r.html#tibbles-a-modern-take-on-dataframes-2",
    "title": "Meet R",
    "section": "Tibbles: a modern take on dataframes",
    "text": "Tibbles: a modern take on dataframes\nLet‚Äôs compare the print method for the dataframe iris, before and after we convert it to a tibble.\n\nas_tibble(iris)\n\n# A tibble: 150 √ó 5\n   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n          <dbl>       <dbl>        <dbl>       <dbl> <fct>  \n 1          5.1         3.5          1.4         0.2 setosa \n 2          4.9         3            1.4         0.2 setosa \n 3          4.7         3.2          1.3         0.2 setosa \n 4          4.6         3.1          1.5         0.2 setosa \n 5          5           3.6          1.4         0.2 setosa \n 6          5.4         3.9          1.7         0.4 setosa \n 7          4.6         3.4          1.4         0.3 setosa \n 8          5           3.4          1.5         0.2 setosa \n 9          4.4         2.9          1.4         0.2 setosa \n10          4.9         3.1          1.5         0.1 setosa \n# ‚Ä¶ with 140 more rows\n# ‚Ñπ Use `print(n = ...)` to see more rows"
  },
  {
    "objectID": "slides/01-meet-r.html#exercise-2",
    "href": "slides/01-meet-r.html#exercise-2",
    "title": "Meet R",
    "section": "Exercise",
    "text": "Exercise\n\n\nCheck the weather forecast for your hometown (or a place of your choice).\nAssign the forecasted temperature in one vector and the corresponding time in another vector for at least 5 data points.\nMake a dataframe with those two variables.\nWhat‚Äôs the average temperature? And what‚Äôs its standard deviation?\nThen, visualize those data with a line-chart in which the x axis represents time and the y axis represents the forecasted temperature.\n\n\n\n\n2022 CBSER Summer School"
  },
  {
    "objectID": "slides/02-manipulate.html#the-tidyverse-is-an-ecosystem-of-packages-for-data-science",
    "href": "slides/02-manipulate.html#the-tidyverse-is-an-ecosystem-of-packages-for-data-science",
    "title": "Manipulate Data",
    "section": "The Tidyverse is an ecosystem of packages for Data Science",
    "text": "The Tidyverse is an ecosystem of packages for Data Science\nAll the packages share a common design:\n\nOne function does one thing, well.\nDesigned for pipes.\nExtensive user-friendly documentation.\nNon-standard evaluation, to write code quickly and easily.\n\n\nAll packages can be loaded with library(tidyverse), but you can also load single packages one by one."
  },
  {
    "objectID": "slides/02-manipulate.html#we-first-explore-the-palmer-penguins-dataset",
    "href": "slides/02-manipulate.html#we-first-explore-the-palmer-penguins-dataset",
    "title": "Manipulate Data",
    "section": "We first explore the Palmer Penguins Dataset",
    "text": "We first explore the Palmer Penguins Dataset\nThe Penguins Dataset stores real data about palmer penguins. This R data package was developed and is maintained by Allison Horst, Alison Hill and Kirsten Gorman for teaching purposes.\n\nLet‚Äôs install the package‚Ä¶\n\ninstall.packages('palmerpenguins')\n\n\n\n‚Ä¶and load it in R.\n\nlibrary(palmerpenguins)"
  },
  {
    "objectID": "slides/02-manipulate.html#palmerpenguins-exports-two-datasets",
    "href": "slides/02-manipulate.html#palmerpenguins-exports-two-datasets",
    "title": "Manipulate Data",
    "section": "palmerpenguins exports two datasets",
    "text": "palmerpenguins exports two datasets\n\npenguins_raw\n\n# A tibble: 344 √ó 17\n   studyName Sample Num‚Ä¶¬π Species Region Island Stage Indiv‚Ä¶¬≤ Clutc‚Ä¶¬≥ `Date Egg`\n   <chr>            <dbl> <chr>   <chr>  <chr>  <chr> <chr>   <chr>   <date>    \n 1 PAL0708              1 Adelie‚Ä¶ Anvers Torge‚Ä¶ Adul‚Ä¶ N1A1    Yes     2007-11-11\n 2 PAL0708              2 Adelie‚Ä¶ Anvers Torge‚Ä¶ Adul‚Ä¶ N1A2    Yes     2007-11-11\n 3 PAL0708              3 Adelie‚Ä¶ Anvers Torge‚Ä¶ Adul‚Ä¶ N2A1    Yes     2007-11-16\n 4 PAL0708              4 Adelie‚Ä¶ Anvers Torge‚Ä¶ Adul‚Ä¶ N2A2    Yes     2007-11-16\n 5 PAL0708              5 Adelie‚Ä¶ Anvers Torge‚Ä¶ Adul‚Ä¶ N3A1    Yes     2007-11-16\n 6 PAL0708              6 Adelie‚Ä¶ Anvers Torge‚Ä¶ Adul‚Ä¶ N3A2    Yes     2007-11-16\n 7 PAL0708              7 Adelie‚Ä¶ Anvers Torge‚Ä¶ Adul‚Ä¶ N4A1    No      2007-11-15\n 8 PAL0708              8 Adelie‚Ä¶ Anvers Torge‚Ä¶ Adul‚Ä¶ N4A2    No      2007-11-15\n 9 PAL0708              9 Adelie‚Ä¶ Anvers Torge‚Ä¶ Adul‚Ä¶ N5A1    Yes     2007-11-09\n10 PAL0708             10 Adelie‚Ä¶ Anvers Torge‚Ä¶ Adul‚Ä¶ N5A2    Yes     2007-11-09\n# ‚Ä¶ with 334 more rows, 8 more variables: `Culmen Length (mm)` <dbl>,\n#   `Culmen Depth (mm)` <dbl>, `Flipper Length (mm)` <dbl>,\n#   `Body Mass (g)` <dbl>, Sex <chr>, `Delta 15 N (o/oo)` <dbl>,\n#   `Delta 13 C (o/oo)` <dbl>, Comments <chr>, and abbreviated variable names\n#   ¬π‚Äã`Sample Number`, ¬≤‚Äã`Individual ID`, ¬≥‚Äã`Clutch Completion`\n# ‚Ñπ Use `print(n = ...)` to see more rows, and `colnames()` to see all variable names"
  },
  {
    "objectID": "slides/02-manipulate.html#palmerpenguins-exports-two-datasets-1",
    "href": "slides/02-manipulate.html#palmerpenguins-exports-two-datasets-1",
    "title": "Manipulate Data",
    "section": "palmerpenguins exports two datasets",
    "text": "palmerpenguins exports two datasets\n\npenguins\n\n# A tibble: 344 √ó 8\n   species island    bill_length_mm bill_depth_mm flipper_‚Ä¶¬π body_‚Ä¶¬≤ sex    year\n   <fct>   <fct>              <dbl>         <dbl>      <int>   <int> <fct> <int>\n 1 Adelie  Torgersen           39.1          18.7        181    3750 male   2007\n 2 Adelie  Torgersen           39.5          17.4        186    3800 fema‚Ä¶  2007\n 3 Adelie  Torgersen           40.3          18          195    3250 fema‚Ä¶  2007\n 4 Adelie  Torgersen           NA            NA           NA      NA <NA>   2007\n 5 Adelie  Torgersen           36.7          19.3        193    3450 fema‚Ä¶  2007\n 6 Adelie  Torgersen           39.3          20.6        190    3650 male   2007\n 7 Adelie  Torgersen           38.9          17.8        181    3625 fema‚Ä¶  2007\n 8 Adelie  Torgersen           39.2          19.6        195    4675 male   2007\n 9 Adelie  Torgersen           34.1          18.1        193    3475 <NA>   2007\n10 Adelie  Torgersen           42            20.2        190    4250 <NA>   2007\n# ‚Ä¶ with 334 more rows, and abbreviated variable names ¬π‚Äãflipper_length_mm,\n#   ¬≤‚Äãbody_mass_g\n# ‚Ñπ Use `print(n = ...)` to see more rows\n\n\nWe will use the first one: penguins, which has already been cleaned."
  },
  {
    "objectID": "slides/02-manipulate.html#exercise",
    "href": "slides/02-manipulate.html#exercise",
    "title": "Manipulate Data",
    "section": "Exercise",
    "text": "Exercise\nThe print method for a tibble gives you a reasonable overview of the data stored in it.\nCan you get more details with the package skimr?\nCheck its documentation, install it, try it out on the penguins dataset. Comment on the output: is it useful? How?."
  },
  {
    "objectID": "slides/02-manipulate.html#a-grammar-for-data-manipulation",
    "href": "slides/02-manipulate.html#a-grammar-for-data-manipulation",
    "title": "Manipulate Data",
    "section": "A grammar for data manipulation",
    "text": "A grammar for data manipulation\n\n\n\n\nDplyr provides a grammar for manipulating data, with many useful verbs:\n\nmutate() adds new variables that are functions of existing variables\nselect() picks variables based on their names.\nfilter() picks cases based on their values.\nsummarise() reduces multiple values down to a single summary.\ngroup_by() performs operations by group."
  },
  {
    "objectID": "slides/02-manipulate.html#we-can-apply-those-verbs-to-manipulate-data",
    "href": "slides/02-manipulate.html#we-can-apply-those-verbs-to-manipulate-data",
    "title": "Manipulate Data",
    "section": "We can apply those verbs to manipulate data",
    "text": "We can apply those verbs to manipulate data\n\npenguins %>%\n  mutate(bill_length_meters = bill_length_mm/1000)\n\n# A tibble: 344 √ó 9\n   species island    bill_length_mm bill_d‚Ä¶¬π flipp‚Ä¶¬≤ body_‚Ä¶¬≥ sex    year bill_‚Ä¶‚Å¥\n   <fct>   <fct>              <dbl>    <dbl>   <int>   <int> <fct> <int>   <dbl>\n 1 Adelie  Torgersen           39.1     18.7     181    3750 male   2007  0.0391\n 2 Adelie  Torgersen           39.5     17.4     186    3800 fema‚Ä¶  2007  0.0395\n 3 Adelie  Torgersen           40.3     18       195    3250 fema‚Ä¶  2007  0.0403\n 4 Adelie  Torgersen           NA       NA        NA      NA <NA>   2007 NA     \n 5 Adelie  Torgersen           36.7     19.3     193    3450 fema‚Ä¶  2007  0.0367\n 6 Adelie  Torgersen           39.3     20.6     190    3650 male   2007  0.0393\n 7 Adelie  Torgersen           38.9     17.8     181    3625 fema‚Ä¶  2007  0.0389\n 8 Adelie  Torgersen           39.2     19.6     195    4675 male   2007  0.0392\n 9 Adelie  Torgersen           34.1     18.1     193    3475 <NA>   2007  0.0341\n10 Adelie  Torgersen           42       20.2     190    4250 <NA>   2007  0.042 \n# ‚Ä¶ with 334 more rows, and abbreviated variable names ¬π‚Äãbill_depth_mm,\n#   ¬≤‚Äãflipper_length_mm, ¬≥‚Äãbody_mass_g, ‚Å¥‚Äãbill_length_meters\n# ‚Ñπ Use `print(n = ...)` to see more rows"
  },
  {
    "objectID": "slides/02-manipulate.html#we-can-apply-those-verbs-to-manipulate-data-1",
    "href": "slides/02-manipulate.html#we-can-apply-those-verbs-to-manipulate-data-1",
    "title": "Manipulate Data",
    "section": "We can apply those verbs to manipulate data",
    "text": "We can apply those verbs to manipulate data\n\npenguins %>%\n  select(bill_length_mm) %>% \n  mutate(bill_length_meters = bill_length_mm/1000)\n\n# A tibble: 344 √ó 2\n   bill_length_mm bill_length_meters\n            <dbl>              <dbl>\n 1           39.1             0.0391\n 2           39.5             0.0395\n 3           40.3             0.0403\n 4           NA              NA     \n 5           36.7             0.0367\n 6           39.3             0.0393\n 7           38.9             0.0389\n 8           39.2             0.0392\n 9           34.1             0.0341\n10           42               0.042 \n# ‚Ä¶ with 334 more rows\n# ‚Ñπ Use `print(n = ...)` to see more rows"
  },
  {
    "objectID": "slides/02-manipulate.html#we-can-apply-those-verbs-to-manipulate-data-2",
    "href": "slides/02-manipulate.html#we-can-apply-those-verbs-to-manipulate-data-2",
    "title": "Manipulate Data",
    "section": "We can apply those verbs to manipulate data",
    "text": "We can apply those verbs to manipulate data\n\npenguins %>%\n  select(species, island, bill_length_mm) %>% \n  mutate(bill_length_meters = bill_length_mm/1000)\n\n# A tibble: 344 √ó 4\n   species island    bill_length_mm bill_length_meters\n   <fct>   <fct>              <dbl>              <dbl>\n 1 Adelie  Torgersen           39.1             0.0391\n 2 Adelie  Torgersen           39.5             0.0395\n 3 Adelie  Torgersen           40.3             0.0403\n 4 Adelie  Torgersen           NA              NA     \n 5 Adelie  Torgersen           36.7             0.0367\n 6 Adelie  Torgersen           39.3             0.0393\n 7 Adelie  Torgersen           38.9             0.0389\n 8 Adelie  Torgersen           39.2             0.0392\n 9 Adelie  Torgersen           34.1             0.0341\n10 Adelie  Torgersen           42               0.042 \n# ‚Ä¶ with 334 more rows\n# ‚Ñπ Use `print(n = ...)` to see more rows"
  },
  {
    "objectID": "slides/02-manipulate.html#we-can-apply-those-verbs-to-manipulate-data-3",
    "href": "slides/02-manipulate.html#we-can-apply-those-verbs-to-manipulate-data-3",
    "title": "Manipulate Data",
    "section": "We can apply those verbs to manipulate data",
    "text": "We can apply those verbs to manipulate data\n\npenguins %>%\n count(island)\n\n# A tibble: 3 √ó 2\n  island        n\n  <fct>     <int>\n1 Biscoe      168\n2 Dream       124\n3 Torgersen    52"
  },
  {
    "objectID": "slides/02-manipulate.html#we-can-apply-those-verbs-to-manipulate-data-4",
    "href": "slides/02-manipulate.html#we-can-apply-those-verbs-to-manipulate-data-4",
    "title": "Manipulate Data",
    "section": "We can apply those verbs to manipulate data",
    "text": "We can apply those verbs to manipulate data\n\npenguins %>%\n  select(species, island, bill_length_mm) %>% \n  filter(island == 'Dream') %>% \n  mutate(bill_length_meters = bill_length_mm/1000)\n\n# A tibble: 124 √ó 4\n   species island bill_length_mm bill_length_meters\n   <fct>   <fct>           <dbl>              <dbl>\n 1 Adelie  Dream            39.5             0.0395\n 2 Adelie  Dream            37.2             0.0372\n 3 Adelie  Dream            39.5             0.0395\n 4 Adelie  Dream            40.9             0.0409\n 5 Adelie  Dream            36.4             0.0364\n 6 Adelie  Dream            39.2             0.0392\n 7 Adelie  Dream            38.8             0.0388\n 8 Adelie  Dream            42.2             0.0422\n 9 Adelie  Dream            37.6             0.0376\n10 Adelie  Dream            39.8             0.0398\n# ‚Ä¶ with 114 more rows\n# ‚Ñπ Use `print(n = ...)` to see more rows"
  },
  {
    "objectID": "slides/02-manipulate.html#we-can-apply-those-verbs-to-manipulate-data-5",
    "href": "slides/02-manipulate.html#we-can-apply-those-verbs-to-manipulate-data-5",
    "title": "Manipulate Data",
    "section": "We can apply those verbs to manipulate data",
    "text": "We can apply those verbs to manipulate data\n\npenguins %>%\n  select(species, island, bill_length_mm) %>% \n  filter(island == 'Dream') %>% \n  mutate(bill_length_meters = bill_length_mm/1000) %>% \n  group_by(species)\n\n# A tibble: 124 √ó 4\n# Groups:   species [2]\n   species island bill_length_mm bill_length_meters\n   <fct>   <fct>           <dbl>              <dbl>\n 1 Adelie  Dream            39.5             0.0395\n 2 Adelie  Dream            37.2             0.0372\n 3 Adelie  Dream            39.5             0.0395\n 4 Adelie  Dream            40.9             0.0409\n 5 Adelie  Dream            36.4             0.0364\n 6 Adelie  Dream            39.2             0.0392\n 7 Adelie  Dream            38.8             0.0388\n 8 Adelie  Dream            42.2             0.0422\n 9 Adelie  Dream            37.6             0.0376\n10 Adelie  Dream            39.8             0.0398\n# ‚Ä¶ with 114 more rows\n# ‚Ñπ Use `print(n = ...)` to see more rows"
  },
  {
    "objectID": "slides/02-manipulate.html#we-can-apply-those-verbs-to-manipulate-data-6",
    "href": "slides/02-manipulate.html#we-can-apply-those-verbs-to-manipulate-data-6",
    "title": "Manipulate Data",
    "section": "We can apply those verbs to manipulate data",
    "text": "We can apply those verbs to manipulate data\n\npenguins %>%\n  select(species, island, bill_length_mm) %>% \n  filter(island == 'Dream') %>% \n  mutate(bill_length_meters = bill_length_mm/1000) %>% \n  group_by(species) %>% \n  summarise(mean_bill_length_mm = mean(bill_length_mm),\n            sd_bill_length_mm = sd(bill_length_mm))\n\n# A tibble: 2 √ó 3\n  species   mean_bill_length_mm sd_bill_length_mm\n  <fct>                   <dbl>             <dbl>\n1 Adelie                   38.5              2.47\n2 Chinstrap                48.8              3.34"
  },
  {
    "objectID": "slides/02-manipulate.html#we-can-apply-those-verbs-to-manipulate-data-7",
    "href": "slides/02-manipulate.html#we-can-apply-those-verbs-to-manipulate-data-7",
    "title": "Manipulate Data",
    "section": "We can apply those verbs to manipulate data",
    "text": "We can apply those verbs to manipulate data\n\ndream_summary <- \n  penguins %>%\n  select(species, island, bill_length_mm) %>% \n  filter(island == 'Dream') %>% \n  mutate(bill_length_meters = bill_length_mm/1000) %>% \n  group_by(species) %>% \n  summarise(mean_bill_length_mm = mean(bill_length_mm),\n            sd_bill_length_mm = sd(bill_length_mm))\n\nLet‚Äôs assign the output to a new variable dream_summary."
  },
  {
    "objectID": "slides/02-manipulate.html#section-1",
    "href": "slides/02-manipulate.html#section-1",
    "title": "Manipulate Data",
    "section": "",
    "text": "In the previous code we have seen also two additional aspects that feature heavily in the tidyverse:\n\nThe Pipe %>%.\nNon-Standard Evaluation."
  },
  {
    "objectID": "slides/02-manipulate.html#the-pipe",
    "href": "slides/02-manipulate.html#the-pipe",
    "title": "Manipulate Data",
    "section": "The Pipe %>%",
    "text": "The Pipe %>%\n\n\n\n\n\n\nThe pipe is provided by the package magrittr, it‚Äôs a forwarding operator:\n\nIt takes the ouput of what comes before (LHS) and sends it to the first argument of the function that comes after (RHS).\n\nLHS %>% RHS"
  },
  {
    "objectID": "slides/02-manipulate.html#the-pipe-1",
    "href": "slides/02-manipulate.html#the-pipe-1",
    "title": "Manipulate Data",
    "section": "The Pipe %>%",
    "text": "The Pipe %>%\nFor example, you could write:\n\nselect(penguins, species, body_mass_g)\n\n# A tibble: 344 √ó 2\n   species body_mass_g\n   <fct>         <int>\n 1 Adelie         3750\n 2 Adelie         3800\n 3 Adelie         3250\n 4 Adelie           NA\n 5 Adelie         3450\n 6 Adelie         3650\n 7 Adelie         3625\n 8 Adelie         4675\n 9 Adelie         3475\n10 Adelie         4250\n# ‚Ä¶ with 334 more rows\n# ‚Ñπ Use `print(n = ...)` to see more rows"
  },
  {
    "objectID": "slides/02-manipulate.html#the-pipe-2",
    "href": "slides/02-manipulate.html#the-pipe-2",
    "title": "Manipulate Data",
    "section": "The Pipe %>%",
    "text": "The Pipe %>%\n‚Ä¶but if you use the pipe, your code is easier to read‚Ä¶\n\npenguins %>% select(species, body_mass_g)\n\n# A tibble: 344 √ó 2\n   species body_mass_g\n   <fct>         <int>\n 1 Adelie         3750\n 2 Adelie         3800\n 3 Adelie         3250\n 4 Adelie           NA\n 5 Adelie         3450\n 6 Adelie         3650\n 7 Adelie         3625\n 8 Adelie         4675\n 9 Adelie         3475\n10 Adelie         4250\n# ‚Ä¶ with 334 more rows\n# ‚Ñπ Use `print(n = ...)` to see more rows"
  },
  {
    "objectID": "slides/02-manipulate.html#the-pipe-3",
    "href": "slides/02-manipulate.html#the-pipe-3",
    "title": "Manipulate Data",
    "section": "The Pipe %>%",
    "text": "The Pipe %>%\n‚Ä¶especially if you have to perform many operations one after the other‚Ä¶\n\npenguins %>%\n  select(species, body_mass_g) %>% \n  filter(species == 'Adelie')\n\n# A tibble: 152 √ó 2\n   species body_mass_g\n   <fct>         <int>\n 1 Adelie         3750\n 2 Adelie         3800\n 3 Adelie         3250\n 4 Adelie           NA\n 5 Adelie         3450\n 6 Adelie         3650\n 7 Adelie         3625\n 8 Adelie         4675\n 9 Adelie         3475\n10 Adelie         4250\n# ‚Ä¶ with 142 more rows\n# ‚Ñπ Use `print(n = ...)` to see more rows"
  },
  {
    "objectID": "slides/02-manipulate.html#the-pipe-4",
    "href": "slides/02-manipulate.html#the-pipe-4",
    "title": "Manipulate Data",
    "section": "The Pipe %>%",
    "text": "The Pipe %>%\n‚Ä¶that otherwise would force you to nest your code horribly.\n\nfilter(\n  select(\n    penguins,\n    species, body_mass_g\n  ),\n  species == 'Adelie'\n)\n\n# A tibble: 152 √ó 2\n   species body_mass_g\n   <fct>         <int>\n 1 Adelie         3750\n 2 Adelie         3800\n 3 Adelie         3250\n 4 Adelie           NA\n 5 Adelie         3450\n 6 Adelie         3650\n 7 Adelie         3625\n 8 Adelie         4675\n 9 Adelie         3475\n10 Adelie         4250\n# ‚Ä¶ with 142 more rows\n# ‚Ñπ Use `print(n = ...)` to see more rows"
  },
  {
    "objectID": "slides/02-manipulate.html#non-standard-evaluation",
    "href": "slides/02-manipulate.html#non-standard-evaluation",
    "title": "Manipulate Data",
    "section": "Non-Standard Evaluation",
    "text": "Non-Standard Evaluation\nThis one is difficult‚Ä¶\n\nWhich argument does the function select() take? Let‚Äôs check it in its help page with ?select.\n\n?select\n\nUnder the Usage section it says:\nselect(.data, ...)\n\n\nAnd then in the section Arguments the help page says:\n.data: A data frame, data frame extension (e.g. a tibble), or a lazy data frame (e.g. from dbplyr or dtplyr). See Methods, below, for more details.\n\n...: <tidy-select> One or more unquoted expressions separated by commas. Variable names can be used as if they were positions in the data frame, so expressions like x:y can be used to select a range of variables."
  },
  {
    "objectID": "slides/02-manipulate.html#non-standard-evaluation-1",
    "href": "slides/02-manipulate.html#non-standard-evaluation-1",
    "title": "Manipulate Data",
    "section": "Non-Standard Evaluation",
    "text": "Non-Standard Evaluation\nSo, what are do we mean if we write:\n\npenguins %>% \n  select(species, island)\n\n\nThe penguins tibble is fills the.data parameter through the pipe %>%.\nThe unquoted names species, island fill the argument ..., they represent the names of the columns to be selected.\n\n\nBut the name of columns in a tibble is a character vector.\n\ncolnames(penguins)\n\n[1] \"species\"           \"island\"            \"bill_length_mm\"   \n[4] \"bill_depth_mm\"     \"flipper_length_mm\" \"body_mass_g\"      \n[7] \"sex\"               \"year\""
  },
  {
    "objectID": "slides/02-manipulate.html#non-standard-evaluation-2",
    "href": "slides/02-manipulate.html#non-standard-evaluation-2",
    "title": "Manipulate Data",
    "section": "Non-Standard Evaluation",
    "text": "Non-Standard Evaluation\nThrough non-standard evaluation, in the function select, we can call element of a character vector like if they were variables (without quoting them).\n\npenguins %>% \n  select(species, island)\n\nThe variables species and island don‚Äôt exist outside of the dplyr function select().\n\nspecies\n\nError in eval(expr, envir, enclos): object 'species' not found"
  },
  {
    "objectID": "slides/02-manipulate.html#section-2",
    "href": "slides/02-manipulate.html#section-2",
    "title": "Manipulate Data",
    "section": "",
    "text": "With non-standard evaluation we can write names without quoting them. This makes writing code for iterative data exploration faster.\n\nIf you come from a more strict programming language, it could be hard to get use to this behaviour.\n\n\nMost function of the Tidyverse do non-standard evaluation."
  },
  {
    "objectID": "slides/02-manipulate.html#exercise-1",
    "href": "slides/02-manipulate.html#exercise-1",
    "title": "Manipulate Data",
    "section": "Exercise",
    "text": "Exercise\nWith the penguin dataset:\n\n\nSelect all numeric variables (columns).\nConvert all variables that are expressed in millimeters into meters, rename them accordingly.\n\n\nGet help from:\n\nDplyr‚Äôs website.\nThe Data Wrangling Chapter of R4DS."
  },
  {
    "objectID": "slides/02-manipulate.html#exercise-2",
    "href": "slides/02-manipulate.html#exercise-2",
    "title": "Manipulate Data",
    "section": "Exercise",
    "text": "Exercise\nMove all the defined variable of the penguins dataset (species, island, sex, year) to the left of the measured variables.\nDoes any of the defined variables has missing data? In case remove the corresponding row.\nThen group the dataset by all of those variable defined variables and estimate the minimum for each measured variable of each group."
  },
  {
    "objectID": "slides/02-manipulate.html#exercise-3",
    "href": "slides/02-manipulate.html#exercise-3",
    "title": "Manipulate Data",
    "section": "Exercise",
    "text": "Exercise\nHow many penguins have bill_length_mm above average?\nRepeat the analysis for each species.\n\n\n2022 CBSER Summer School"
  },
  {
    "objectID": "slides/03-visualize.html#we-are-bad-at-recognizing-pattern-from-raw-data",
    "href": "slides/03-visualize.html#we-are-bad-at-recognizing-pattern-from-raw-data",
    "title": "Data Visualization",
    "section": "We are bad at recognizing pattern from raw data",
    "text": "We are bad at recognizing pattern from raw data\n\n\n# A tibble: 2,582 √ó 2\n         x      y\n     <dbl>  <dbl>\n   1 437   473   \n   2 761   353   \n   3 153   193   \n   4 265   383   \n   5 116.   98.2 \n   6 331   365   \n   7 595   450   \n   8 266   387   \n   9 394   450   \n  10 429   465   \n  11 521   410   \n  12 295   269   \n  13 639   454   \n  14 173   199   \n  15 449   476   \n  16 219   239   \n  17 102.  146.  \n  18 420   401   \n  19 306   292   \n  20 551   444   \n  21 795   346   \n  22 137.   26.7 \n  23 163.   48.8 \n  24 658   417   \n  25 625   395   \n  26 247   296   \n  27 576   383   \n  28 346   346   \n  29 789   330   \n  30 283   402   \n  31 246   202   \n  32 282   273   \n  33 603   427   \n  34 753   363   \n  35 326   339   \n  36 738   377   \n  37 130.  162.  \n  38 801   339   \n  39 170.   18.9 \n  40 637   430   \n  41 714   419   \n  42 192   212   \n  43 239   250   \n  44 177   244   \n  45 783   327   \n  46 425   407   \n  47 126.  133.  \n  48 165   227   \n  49 250   203   \n  50 146.   24.1 \n  51 732   406   \n  52  78.8 167.  \n  53 152   169   \n  54 145.   39.7 \n  55 152.  110.  \n  56 144.  133.  \n  57 495   466   \n  58 210   245   \n  59 154   202   \n  60 397   457   \n  61 116.   95.6 \n  62 521   395   \n  63 171.   73.5 \n  64 476   398   \n  65 148.   28   \n  66 215   213   \n  67 245   226   \n  68 634   446   \n  69 236   278   \n  70 305   337   \n  71 254   247   \n  72 443   398   \n  73 341   326   \n  74 189   196   \n  75 154   232   \n  76 513   397   \n  77 226   202   \n  78 596   435   \n  79  97    43.6 \n  80 551   383   \n  81 560   422   \n  82 162   151   \n  83 629   448   \n  84 272   237   \n  85 449   463   \n  86 148.   93   \n  87 111.  170.  \n  88 554   384   \n  89 605   433   \n  90 266   297   \n  91 734   381   \n  92 227   267   \n  93 370   441   \n  94 684   439   \n  95 273   384   \n  96 615   408   \n  97 569   412   \n  98 252   339   \n  99  77.5 154.  \n 100 363   323   \n 101 154   233   \n 102 385   366   \n 103 216   211   \n 104  90.5  39.7 \n 105 597   387   \n 106 376   377   \n 107 771   352   \n 108 231   215   \n 109 187   143   \n 110 740   387   \n 111 167   177   \n 112 335   414   \n 113 265   311   \n 114  76.2  83.9 \n 115 434   421   \n 116 583   391   \n 117 156.  116.  \n 118  99.6 161.  \n 119 155   203   \n 120 305   326   \n 121  52.8 119   \n 122 168   245   \n 123 351   373   \n 124 357   335   \n 125 123   109.  \n 126 140.   55.3 \n 127 131.  135.  \n 128 217   203   \n 129 293   275   \n 130 496   399   \n 131 498   418   \n 132 468   426   \n 133 458   441   \n 134 397   439   \n 135 198   213   \n 136 185   154   \n 137 408   427   \n 138 154   217   \n 139 146   172   \n 140 807   287   \n 141 292   372   \n 142  58   114.  \n 143 771   351   \n 144 105.  102.  \n 145 109.   90.4 \n 146 310   286   \n 147 176.   93   \n 148 314   293   \n 149 267   230   \n 150 811   284   \n 151  97   168.  \n 152 153.  120.  \n 153 139.   59.2 \n 154 140.   39.7 \n 155 642   459   \n 156 820   304   \n 157 645   416   \n 158 128.  135.  \n 159 307   327   \n 160 349   373   \n 161 607   458   \n 162 283   371   \n 163 193   213   \n 164 154   239   \n 165 296   311   \n 166 248   262   \n 167 114.   17.6 \n 168 704   425   \n 169 309   322   \n 170 310   322   \n 171 286   341   \n 172 610   457   \n 173 447   398   \n 174 251   235   \n 175 362   370   \n 176 569   376   \n 177 195   216   \n 178  77.5 116.  \n 179 260   353   \n 180 272   284   \n 181 304   380   \n 182 492   445   \n 183 259   352   \n 184 105.   44.9 \n 185 363   322   \n 186 343   422   \n 187 464   438   \n 188 748   393   \n 189 589   474   \n 190 219   191   \n 191 303   378   \n 192 144.   20.2 \n 193 375   397   \n 194 266   280   \n 195 739   401   \n 196 361   311   \n 197 149    55.3 \n 198 289   367   \n 199  65.8 115.  \n 200 763   380   \n 201 219   232   \n 202 133.   85.2 \n 203 531   442   \n 204 356   426   \n 205 325   406   \n 206 127.  150.  \n 207 205   242   \n 208  90.5 146.  \n 209 822   300   \n 210 350   393   \n 211 171   183   \n 212 281   250   \n 213 681   432   \n 214 110   163.  \n 215 159.  114.  \n 216 109.   68.3 \n 217 429   471   \n 218 263   334   \n 219 591   441   \n 220 196   207   \n 221 459   440   \n 222 136   159.  \n 223 130.  166.  \n 224 141.   54   \n 225 320   385   \n 226 124.  132   \n 227 131.  144.  \n 228 127.  142.  \n 229 137.   80   \n 230 234   219   \n 231 356   312   \n 232 421   416   \n 233 227   202   \n 234 318   346   \n 235 315   293   \n 236 256   250   \n 237 728   410   \n 238 231   240   \n 239 303   321   \n 240 170.   76.1 \n 241 276   386   \n 242 478   409   \n 243 217   156   \n 244 246   343   \n 245 284   382   \n 246 764   379   \n 247 105.  109.  \n 248 269   233   \n 249 199   214   \n 250 360   371   \n 251 383   388   \n 252 362   352   \n 253 118.  170.  \n 254 762   351   \n 255 701   428   \n 256 120.   93   \n 257 265   385   \n 258 415   397   \n 259 163   240   \n 260 226   183   \n 261 810   324   \n 262 111.   39.7 \n 263 110    25.4 \n 264 120.  131.  \n 265 182.  180.  \n 266 352   353   \n 267 109.   52.7 \n 268 211   147   \n 269 237   199   \n 270 469   413   \n 271 635   402   \n 272 387   381   \n 273 152.  107.  \n 274 344   323   \n 275 523   480   \n 276 291   381   \n 277 266   339   \n 278 161   153   \n 279 122.   77.4 \n 280 798   304   \n 281 407   379   \n 282 149   170   \n 283 387   362   \n 284 149    51.4 \n 285 794   309   \n 286 283   252   \n 287 266   361   \n 288 119.  145   \n 289 355   336   \n 290 110    37.1 \n 291 757   376   \n 292 271   262   \n 293 181   204   \n 294 352   310   \n 295 277   292   \n 296 368   440   \n 297 784   326   \n 298 225   172   \n 299 579   386   \n 300 114.   77.4 \n 301 486   472   \n 302 175    39.7 \n 303 114.  166.  \n 304 510   402   \n 305 239   201   \n 306 220   250   \n 307 139.   94.3 \n 308  61.9 115.  \n 309 485   472   \n 310 576   459   \n 311 118.  174.  \n 312 253   267   \n 313 533   473   \n 314 681   442   \n 315 743   379   \n 316 265   324   \n 317 621   407   \n 318 653   410   \n 319 187   135   \n 320 176.   39.7 \n 321 289   336   \n 322 737   384   \n 323 136     7.20\n 324 263   260   \n 325 126.   57.9 \n 326 128.   28   \n 327 176.   96.9 \n 328 757   375   \n 329 195   236   \n 330 422   401   \n 331 435   417   \n 332 644   428   \n 333 124.  133.  \n 334 334   353   \n 335 548   379   \n 336 218   254   \n 337 355   379   \n 338 377   427   \n 339 258   349   \n 340 127.   57.9 \n 341 785   325   \n 342 142.    7.20\n 343 265   280   \n 344 558   448   \n 345 290   269   \n 346 233   217   \n 347 674   434   \n 348 165   200   \n 349 377   395   \n 350 396   451   \n 351 780   350   \n 352 553   442   \n 353 105.   96.9 \n 354 283   273   \n 355  76.2  54   \n 356 176.   95.6 \n 357 274   324   \n 358 164   225   \n 359 233   193   \n 360 273   329   \n 361 359   339   \n 362 396   439   \n 363  76.2 154.  \n 364 273   338   \n 365 337   334   \n 366 508   440   \n 367  93.1  77.4 \n 368 491   425   \n 369 130.  141.  \n 370 136    35.8 \n 371 197   196   \n 372 531   456   \n 373 350   337   \n 374 127.  133.  \n 375 676   424   \n 376 333   318   \n 377 151   175   \n 378 167.   78.7 \n 379 622   467   \n 380  93.1  56.6 \n 381 768   344   \n 382 109.  122.  \n 383 177   172   \n 384 657   453   \n 385 619   389   \n 386 130.  168.  \n 387 340   379   \n 388 106.   44.9 \n 389 601   442   \n 390  54.1  94.3 \n 391 781   329   \n 392 425   438   \n 393 541   383   \n 394 285   405   \n 395 641   441   \n 396 607   415   \n 397 715   418   \n 398 322   351   \n 399 597   393   \n 400 141   195   \n 401 332   397   \n 402 149   177   \n 403 143   199   \n 404 653   425   \n 405 821   301   \n 406 162   167   \n 407 157   159   \n 408 770   351   \n 409 417   446   \n 410 436   465   \n 411 328   387   \n 412 416   455   \n 413 818   309   \n 414 618   468   \n 415 172.   21.5 \n 416 187   141   \n 417 244   235   \n 418  98.3 164.  \n 419 210   244   \n 420 465   408   \n 421 623   394   \n 422 547   469   \n 423 278   247   \n 424 139.   25.4 \n 425 299   273   \n 426 157   158   \n 427 446   476   \n 428 805   289   \n 429 341   349   \n 430 745   382   \n 431 208   239   \n 432 176   139   \n 433 216   209   \n 434 217   155   \n 435 535   415   \n 436 521   463   \n 437 797   334   \n 438 451   477   \n 439 775   354   \n 440 350   309   \n 441 106.  159.  \n 442 799   333   \n 443 511   445   \n 444 223   228   \n 445 291   412   \n 446 378   401   \n 447 102.   52.7 \n 448 299   387   \n 449 198   203   \n 450 749   392   \n 451 656   414   \n 452 607   430   \n 453 257   272   \n 454 613   389   \n 455 309   405   \n 456  58    95.6 \n 457 168.   77.4 \n 458 165   226   \n 459 777   334   \n 460 195   147   \n 461 308   397   \n 462 160   238   \n 463 308   409   \n 464 111.   37.1 \n 465 178.  105.  \n 466 126.    4.60\n 467 324   322   \n 468  84   148.  \n 469 533   400   \n 470 598   398   \n 471  93.1 159.  \n 472 118.   74.8 \n 473 136    30.6 \n 474 264   378   \n 475 429   391   \n 476 249   279   \n 477 461   474   \n 478 136    34.5 \n 479 243   235   \n 480 365   392   \n 481 476   481   \n 482 110    48.8 \n 483 246   348   \n 484 118.  168.  \n 485 152   219   \n 486 254   268   \n 487 606   390   \n 488 157.   96.9 \n 489 283   380   \n 490 790   344   \n 491 122.  155.  \n 492 593   392   \n 493 406   461   \n 494  86.6  60.5 \n 495 244   287   \n 496 133.  135.  \n 497 354   311   \n 498 148.   26.7 \n 499 592   446   \n 500 286   383   \n 501 822   291   \n 502 577   477   \n 503 373   369   \n 504  95.7  64.4 \n 505 149    28   \n 506 216   170   \n 507 382   376   \n 508 651   417   \n 509 165.  107.  \n 510 152.   37.1 \n 511 474   413   \n 512 599   460   \n 513 333   341   \n 514 495   482   \n 515 368   322   \n 516 418   454   \n 517 434   431   \n 518 118.  102.  \n 519 252   319   \n 520 423   412   \n 521 413   456   \n 522 761   382   \n 523 163.   86.5 \n 524 655   413   \n 525 144   183   \n 526 819   307   \n 527 743   380   \n 528 582   476   \n 529 339   351   \n 530 212   246   \n 531 461   479   \n 532 296   370   \n 533 501   468   \n 534 180.   47.5 \n 535 674   433   \n 536 613   399   \n 537 241   261   \n 538 142   200   \n 539 146.   43.6 \n 540 796   306   \n 541 175    35.8 \n 542 376   395   \n 543 115.   85.2 \n 544 272   335   \n 545 540   383   \n 546 345   322   \n 547 471   481   \n 548 287   257   \n 549 146.   25.4 \n 550 235   245   \n 551 113.   72.2 \n 552 127.   82.6 \n 553  76.2  51.4 \n 554 336   321   \n 555 183   145   \n 556 228   237   \n 557 635   445   \n 558 145   199   \n 559 226   184   \n 560 518   476   \n 561 325   355   \n 562 722   398   \n 563  91.8  83.9 \n 564 152   200   \n 565 248   202   \n 566 114.   60.5 \n 567 227   236   \n 568 169   229   \n 569 629   464   \n 570 247   227   \n 571 398   437   \n 572 348   416   \n 573 153.  105.  \n 574 190   158   \n 575 401   392   \n 576 161   216   \n 577 259   297   \n 578 383   360   \n 579 218   198   \n 580  97    70.9 \n 581 289   333   \n 582 106.  175.  \n 583 184   160   \n 584 319   348   \n 585 647   429   \n 586 127.   25.4 \n 587 106.   94.3 \n 588 818   284   \n 589 388   453   \n 590 305   415   \n 591 253   245   \n 592 157   215   \n 593 786   357   \n 594 696   432   \n 595 324   388   \n 596 288   289   \n 597 235   220   \n 598 491   446   \n 599 490   410   \n 600 149   233   \n 601 183   147   \n 602 293   265   \n 603 367   356   \n 604 249   301   \n 605 797   306   \n 606 159.  122.  \n 607 310   299   \n 608 247   333   \n 609 389   420   \n 610 203   236   \n 611 328   343   \n 612 146.   46.2 \n 613 218   226   \n 614 122.    7.20\n 615 148.   83.9 \n 616 499   461   \n 617 145   175   \n 618 171   138   \n 619 451   461   \n 620 251   320   \n 621 470   409   \n 622 105.  114.  \n 623 265   227   \n 624 591   386   \n 625 264   311   \n 626 333   319   \n 627 123   107.  \n 628 411   395   \n 629 327   311   \n 630 161   198   \n 631 472   413   \n 632 107.   44.9 \n 633  56.7  91.7 \n 634 621   453   \n 635 467   428   \n 636 457   443   \n 637 212   150   \n 638 212   240   \n 639 153.  133.  \n 640 225   232   \n 641 162    18.9 \n 642 613   401   \n 643 800   342   \n 644 712   421   \n 645 196   154   \n 646 142.   11.1 \n 647 256   215   \n 648 306   282   \n 649 332   384   \n 650 113.   86.5 \n 651 813   284   \n 652 817   311   \n 653 643   439   \n 654 101.  178.  \n 655 554   386   \n 656 338   364   \n 657 270   395   \n 658 469   402   \n 659 584   475   \n 660 124.  109.  \n 661 139   195   \n 662 590   454   \n 663 120.  103.  \n 664 136   205   \n 665 302   296   \n 666 741   389   \n 667 484   473   \n 668 521   394   \n 669 123   175.  \n 670 241   285   \n 671 612   419   \n 672 408   452   \n 673  56.7 114.  \n 674 385   380   \n 675 427   401   \n 676 679   423   \n 677 153.   34.5 \n 678 615   389   \n 679 223   178   \n 680 247   354   \n 681 144.  114.  \n 682 217   223   \n 683 122.   43.6 \n 684 141.   55.3 \n 685 480   482   \n 686 562   374   \n 687 110   170.  \n 688 263   298   \n 689 215   251   \n 690 178.   61.8 \n 691 561   374   \n 692 296   334   \n 693 341   328   \n 694 159   243   \n 695 155   205   \n 696 295   339   \n 697 339   396   \n 698 102.   63.1 \n 699 170.   77.4 \n 700  84   145   \n 701 608   410   \n 702 122.  131.  \n 703 539   482   \n 704  68.4 132   \n 705  77.5  56.6 \n 706 530   446   \n 707 295   416   \n 708 226   243   \n 709 159.   98.2 \n 710 323   354   \n 711 183   159   \n 712 180   152   \n 713 611   396   \n 714 747   368   \n 715 459   474   \n 716 282   389   \n 717 303   333   \n 718 306   326   \n 719 289   278   \n 720 105.  111.  \n 721 627   401   \n 722 209   141   \n 723  50.2 118.  \n 724 271   294   \n 725 186   197   \n 726 187   134   \n 727 799   303   \n 728 105.  112.  \n 729 310   386   \n 730 226   210   \n 731 456   445   \n 732 162   152   \n 733 720   400   \n 734 542   474   \n 735 170.  115.  \n 736 346   332   \n 737 284   351   \n 738 237   191   \n 739  86.6  65.7 \n 740 503   455   \n 741 261   353   \n 742 597   447   \n 743 416   405   \n 744 261   364   \n 745 783   361   \n 746 164   199   \n 747 265   384   \n 748 462   412   \n 749 140.   38.4 \n 750  51.5 112.  \n 751 324   307   \n 752 654   411   \n 753 298   272   \n 754 713   415   \n 755 289   335   \n 756 554   482   \n 757 365   393   \n 758 374   433   \n 759 519   395   \n 760 445   475   \n 761 158   215   \n 762 115.  150.  \n 763 518   467   \n 764 405   379   \n 765 266   247   \n 766 636   408   \n 767  60.6  86.5 \n 768 469   417   \n 769 370   373   \n 770 364   368   \n 771 275   277   \n 772 504   462   \n 773  91.8  41   \n 774 198   134   \n 775 288   258   \n 776 650   416   \n 777 579   421   \n 778 238   209   \n 779 558   434   \n 780 203   241   \n 781 219   197   \n 782 109.   29.3 \n 783 373   434   \n 784  68.4 146.  \n 785 732   407   \n 786 324   389   \n 787 272   253   \n 788 295   268   \n 789 380   447   \n 790 785   334   \n 791 176.   91.7 \n 792 157.   31.9 \n 793 436   415   \n 794 576   477   \n 795  95.7 158   \n 796 507   444   \n 797 338   417   \n 798 619   468   \n 799 295   415   \n 800 652   437   \n 801 329   403   \n 802 174.   90.4 \n 803 797   305   \n 804 308   328   \n 805 777   348   \n 806 567   461   \n 807 171.  103.  \n 808 180.   51.4 \n 809 238   248   \n 810 616   468   \n 811 807   330   \n 812 224   180   \n 813 120.   34.5 \n 814 270   262   \n 815 771   365   \n 816 116.   59.2 \n 817 222   224   \n 818 167.  109.  \n 819 109.   89.1 \n 820 457   453   \n 821 188   163   \n 822 116.   22.8 \n 823 724   412   \n 824  80.1  46.2 \n 825  98.3 179.  \n 826 369   441   \n 827 116.  162.  \n 828 190   237   \n 829 161.   52.7 \n 830  99.6 162.  \n 831 573   479   \n 832 250   322   \n 833 698   411   \n 834 604   390   \n 835 728   403   \n 836 625   391   \n 837 200   197   \n 838 223   262   \n 839 458   479   \n 840 116.   85.2 \n 841 702   419   \n 842 119.   42.3 \n 843 361   436   \n 844 106.   93   \n 845 146.  102.  \n 846 265   380   \n 847 502   455   \n 848 130.   39.7 \n 849 111.   22.8 \n 850 105.  101.  \n 851 362   319   \n 852 140   195   \n 853 366   386   \n 854 161.   98.2 \n 855 138   196   \n 856 395   387   \n 857 168.   18.9 \n 858 466   397   \n 859 253   367   \n 860 153.  123.  \n 861 233   218   \n 862 146   199   \n 863 223   169   \n 864 348   373   \n 865 171.   20.2 \n 866 394   415   \n 867 427   407   \n 868 115.  128.  \n 869 450   472   \n 870 148.   50.1 \n 871 653   427   \n 872 635   408   \n 873 301   416   \n 874 105.  110.  \n 875  94.4 172.  \n 876 697   412   \n 877 691   415   \n 878 101.   69.6 \n 879 198   218   \n 880 163   181   \n 881 158   175   \n 882 157.   33.2 \n 883 133.   87.8 \n 884 295   366   \n 885 641   412   \n 886 289   342   \n 887 297   380   \n 888 607   390   \n 889 265   338   \n 890 252   244   \n 891  95.7 141.  \n 892 107.  141.  \n 893 568   416   \n 894 336   416   \n 895 204   136   \n 896 626   396   \n 897 605   422   \n 898  95.7 152.  \n 899 101.  157.  \n 900 244   288   \n 901 369   358   \n 902 782   328   \n 903 119.  131.  \n 904 136   207   \n 905 388   369   \n 906 259   256   \n 907 318   403   \n 908 162    35.8 \n 909 247   238   \n 910 193   145   \n 911 646   448   \n 912 175    91.7 \n 913 726   388   \n 914 585   475   \n 915 231   241   \n 916 496   433   \n 917 745   397   \n 918 380   426   \n 919 143   220   \n 920 110    77.4 \n 921 136    28   \n 922 133.   86.5 \n 923 278   254   \n 924 487   399   \n 925 141.   51.4 \n 926 798   343   \n 927 545   391   \n 928 311   299   \n 929 788   321   \n 930 141.   52.7 \n 931 545   472   \n 932 253   298   \n 933 500   468   \n 934 424   401   \n 935 246   295   \n 936 262   374   \n 937 124.   56.6 \n 938 463   423   \n 939  93.1  41   \n 940 804   292   \n 941 156   153   \n 942 555   459   \n 943 502   465   \n 944 119.  103.  \n 945 110   124.  \n 946 577   470   \n 947 634   400   \n 948 353   396   \n 949 598   394   \n 950 603   390   \n 951 264   354   \n 952 391   443   \n 953 110    35.8 \n 954 622   452   \n 955 272   379   \n 956 797   344   \n 957 148.   39.7 \n 958 635   401   \n 959 225   184   \n 960 160   177   \n 961 308   408   \n 962 363   327   \n 963 433   434   \n 964 590   474   \n 965 703   408   \n 966 762   381   \n 967 110    50.1 \n 968 150.   29.3 \n 969 265   382   \n 970 287   310   \n 971 576   471   \n 972 255   214   \n 973 255   301   \n 974 218   163   \n 975 123   146.  \n 976 160   198   \n 977 352   373   \n 978 431   402   \n 979 154.  120.  \n 980 284   261   \n 981 434   432   \n 982 141.   46.2 \n 983 383   395   \n 984 130.  148.  \n 985 637   408   \n 986 212   157   \n 987 588   443   \n 988 286   256   \n 989 731   407   \n 990 428   407   \n 991 266   312   \n 992 201   198   \n 993 358   333   \n 994 519   410   \n 995  90.5  72.2 \n 996 386   364   \n 997 358   433   \n 998 566   395   \n 999 376   360   \n1000 430   395   \n1001  99.6  74.8 \n1002 166.  101.  \n1003 292   395   \n1004 174.  115.  \n1005 367   331   \n1006 263   233   \n1007 740   400   \n1008 179   203   \n1009 755   372   \n1010 361   317   \n1011 209   143   \n1012 122.  132   \n1013 271   293   \n1014 264   377   \n1015 382   378   \n1016 463   442   \n1017 171   224   \n1018 812   322   \n1019  84    38.4 \n1020 339   338   \n1021 171.  110.  \n1022 275   252   \n1023 169   240   \n1024 575   478   \n1025 490   415   \n1026 266   264   \n1027 269   295   \n1028 150.   83.9 \n1029 698   430   \n1030 136    16.3 \n1031 776   344   \n1032 326   407   \n1033 588   426   \n1034 390   444   \n1035 239   249   \n1036 433   472   \n1037 179.   56.6 \n1038 302   319   \n1039 171.  115.  \n1040 199   202   \n1041 359   349   \n1042 119.   59.2 \n1043 221   188   \n1044 615   415   \n1045 584   386   \n1046 249   326   \n1047 530   476   \n1048 146   173   \n1049 355   396   \n1050 364   437   \n1051 242   222   \n1052 217   160   \n1053  78.8  47.5 \n1054 111.  161.  \n1055 570   465   \n1056 725   390   \n1057 382   388   \n1058 176.   41   \n1059 436   391   \n1060 641   415   \n1061 153   239   \n1062 208   244   \n1063 617   389   \n1064 210   240   \n1065 822   297   \n1066 489   437   \n1067 488   482   \n1068 394   387   \n1069 487   442   \n1070 304   295   \n1071  85.3 145   \n1072  54.1 129.  \n1073 688   417   \n1074 563   414   \n1075 753   389   \n1076 308   399   \n1077 305   332   \n1078 157.   95.6 \n1079 255   311   \n1080 654   422   \n1081 118.  175.  \n1082 633   446   \n1083 412   420   \n1084 344   322   \n1085 163   140   \n1086 812   320   \n1087 320   349   \n1088 283   401   \n1089 175   181.  \n1090 165   145   \n1091 488   438   \n1092 128.   29.3 \n1093 144   199   \n1094 153.   35.8 \n1095 221   175   \n1096 128.   39.7 \n1097 187   142   \n1098 549   383   \n1099 249   262   \n1100 361   338   \n1101 259   220   \n1102 141.   48.8 \n1103 174.   69.6 \n1104 436   473   \n1105 173   143   \n1106 509   452   \n1107 105.   98.2 \n1108 329   363   \n1109 109.   57.9 \n1110 176.   94.3 \n1111 171.   39.7 \n1112 182   158   \n1113 623   407   \n1114 422   387   \n1115 124.   57.9 \n1116 300   338   \n1117 275   269   \n1118 292   393   \n1119 349   337   \n1120 236   189   \n1121 371   358   \n1122 311   288   \n1123 260   372   \n1124 180.   55.3 \n1125 127.   59.2 \n1126 380   400   \n1127 220   257   \n1128 170   183   \n1129 599   388   \n1130 646   446   \n1131 105.  103.  \n1132 265   312   \n1133 525   405   \n1134 345   424   \n1135 145.   20.2 \n1136 219   172   \n1137 485   482   \n1138 284   290   \n1139 815   316   \n1140 126.   42.3 \n1141 569   461   \n1142 794   310   \n1143 445   459   \n1144 622   460   \n1145 280   249   \n1146 583   475   \n1147 139.   90.4 \n1148 104.  150.  \n1149 256   270   \n1150  94.4 175.  \n1151 172   179   \n1152 270   235   \n1153 124.   33.2 \n1154 427   433   \n1155 345   331   \n1156 205   237   \n1157 140   204   \n1158 283   253   \n1159 771   342   \n1160 255   215   \n1161 262   298   \n1162 227   175   \n1163 131.   17.6 \n1164 213   240   \n1165 265   323   \n1166 137.   35.8 \n1167 752   364   \n1168 782   352   \n1169 182   238   \n1170 594   387   \n1171 594   425   \n1172 196   155   \n1173 580   386   \n1174 698   431   \n1175 124.   93   \n1176 567   479   \n1177 271   283   \n1178 443   475   \n1179 175    68.3 \n1180 424   469   \n1181 565   393   \n1182 362   311   \n1183 293   266   \n1184 137.    2   \n1185 446   394   \n1186 417   399   \n1187 174   240   \n1188 149   140.  \n1189 800   301   \n1190 237   190   \n1191 653   420   \n1192 128.   59.2 \n1193 700   410   \n1194 270   325   \n1195 760   382   \n1196 787   335   \n1197 567   387   \n1198 300   382   \n1199 412   422   \n1200 152.   83.9 \n1201 560   382   \n1202 164   245   \n1203 155   169   \n1204 175   143   \n1205 149    29.3 \n1206 178   146   \n1207 657   415   \n1208 767   375   \n1209 531   443   \n1210  93.1  47.5 \n1211 549   459   \n1212 149   152.  \n1213 359   434   \n1214 782   329   \n1215 215   144   \n1216 357   372   \n1217 646   429   \n1218 228   253   \n1219 489   482   \n1220 156.  103.  \n1221 587   475   \n1222 492   482   \n1223 154.  133.  \n1224 120.   77.4 \n1225 639   460   \n1226 409   462   \n1227  93.1  51.4 \n1228 181   203   \n1229 164   173   \n1230 404   439   \n1231 172.   90.4 \n1232 415   410   \n1233 719   400   \n1234 292   362   \n1235 451   452   \n1236 452   406   \n1237 136   209   \n1238 132.   61.8 \n1239 282   377   \n1240 128.   60.5 \n1241 304   286   \n1242 416   465   \n1243 407   428   \n1244 130.   94.3 \n1245 240   269   \n1246 362   338   \n1247 757   364   \n1248 268   267   \n1249 152.   29.3 \n1250 551   396   \n1251 191   142   \n1252 589   460   \n1253 491   419   \n1254 574   478   \n1255 279   388   \n1256 341   327   \n1257 595   460   \n1258 587   444   \n1259 640   442   \n1260 240   227   \n1261 450   410   \n1262  55.4 129.  \n1263 175    69.6 \n1264 130.   95.6 \n1265 265   298   \n1266 627   450   \n1267 366   362   \n1268 131.  148.  \n1269 139.   57.9 \n1270 424   463   \n1271 263   258   \n1272 146.   93   \n1273 149   103.  \n1274 162   172   \n1275 546   470   \n1276 128.   16.3 \n1277 250   242   \n1278 277   272   \n1279 447   457   \n1280  77.5 133.  \n1281 808   286   \n1282 445   394   \n1283 447   471   \n1284 257   357   \n1285 369   328   \n1286 277   387   \n1287 295   307   \n1288 272   338   \n1289 461   401   \n1290 107.   91.7 \n1291 251   209   \n1292 787   347   \n1293 804   335   \n1294 793   332   \n1295 221   176   \n1296 170   179   \n1297 361   405   \n1298 253   315   \n1299 289   269   \n1300 142.  152.  \n1301 107.   63.1 \n1302 156   241   \n1303 407   462   \n1304 670   427   \n1305 175   114.  \n1306 204   221   \n1307 137.   37.1 \n1308 625   411   \n1309 558   481   \n1310 400   452   \n1311 251   205   \n1312 155   174   \n1313 239   251   \n1314 172.   73.5 \n1315 667   429   \n1316 293   305   \n1317 298   313   \n1318 171   245   \n1319 782   363   \n1320 266   228   \n1321 634   408   \n1322 114.  150.  \n1323 297   339   \n1324 115.   60.5 \n1325 287   271   \n1326 411   400   \n1327 462   414   \n1328 436   395   \n1329  78.8  99.5 \n1330 148   183   \n1331 780   365   \n1332 178.  110.  \n1333 299   400   \n1334 667   449   \n1335 491   410   \n1336 300   400   \n1337 227   254   \n1338 702   426   \n1339 162   179   \n1340 119.   20.2 \n1341 273   383   \n1342 106.   67   \n1343 809   285   \n1344 168.   41   \n1345 520   395   \n1346 561   480   \n1347 298   338   \n1348 438   391   \n1349 164   240   \n1350 250   263   \n1351 532   400   \n1352 719   394   \n1353 411   463   \n1354 186   205   \n1355 331   316   \n1356 116.  152.  \n1357 382   430   \n1358 180.   52.7 \n1359 264   260   \n1360 778   334   \n1361 237   247   \n1362 170.   90.4 \n1363 309   406   \n1364 110    34.5 \n1365 362   312   \n1366 130.  170.  \n1367 245   237   \n1368 462   475   \n1369 105.  142.  \n1370 498   417   \n1371 160   165   \n1372 339   369   \n1373 707   411   \n1374 279   248   \n1375 391   454   \n1376 338   351   \n1377 312   289   \n1378 539   384   \n1379 237   279   \n1380 294   345   \n1381 359   316   \n1382 500   413   \n1383 137.   59.2 \n1384 148.   91.7 \n1385 754   381   \n1386 326   358   \n1387 191   196   \n1388 557   428   \n1389 263   367   \n1390 127.   15   \n1391 174   211   \n1392 140.  135.  \n1393 440   404   \n1394 174   138   \n1395 345   347   \n1396 144.  132   \n1397 267   312   \n1398 167   144   \n1399 325   390   \n1400 300   416   \n1401 171.   74.8 \n1402 119.   93   \n1403  74.9 155.  \n1404 462   397   \n1405 252   349   \n1406 409   395   \n1407 165.   82.6 \n1408 493   440   \n1409 130.  167.  \n1410 165.   99.5 \n1411 738   401   \n1412 140.  106   \n1413  82.7 140.  \n1414 576   464   \n1415 106.  154.  \n1416 787   321   \n1417 647   448   \n1418 159.   44.9 \n1419 160   208   \n1420 130.  164.  \n1421 253   365   \n1422 308   300   \n1423 425   447   \n1424 269   331   \n1425 126.   93   \n1426 139.   37.1 \n1427 608   394   \n1428 335   407   \n1429 646   447   \n1430 405   399   \n1431 469   412   \n1432 230   263   \n1433 258   346   \n1434 284   282   \n1435 180   225   \n1436 512   440   \n1437 753   383   \n1438  91.8 161.  \n1439 267   391   \n1440  64.5 120.  \n1441 579   463   \n1442 349   427   \n1443 174   228   \n1444 163.   82.6 \n1445 257   333   \n1446 336   415   \n1447 377   432   \n1448 171   173   \n1449 376   439   \n1450 803   335   \n1451 189   204   \n1452 158.  116.  \n1453 268   232   \n1454 585   445   \n1455 154   194   \n1456 344   339   \n1457 107.   90.4 \n1458  68.4 112.  \n1459 131.  146.  \n1460 599   431   \n1461 257   251   \n1462 172.   72.2 \n1463 623   390   \n1464 127.    9.80\n1465 400   379   \n1466  76.2 161.  \n1467  86.6 163.  \n1468 565   408   \n1469 219   256   \n1470 423   413   \n1471 192   135   \n1472 417   454   \n1473 152.   35.8 \n1474 312   290   \n1475 263   249   \n1476 566   420   \n1477 114.   72.2 \n1478 754   368   \n1479 302   303   \n1480 297   402   \n1481 281   257   \n1482  63.2 145   \n1483 724   390   \n1484 776   347   \n1485 306   337   \n1486 566   394   \n1487 381   425   \n1488 613   456   \n1489 612   420   \n1490 220   215   \n1491  63.2 110.  \n1492 293   329   \n1493 625   396   \n1494 270   261   \n1495 150   176   \n1496 343   347   \n1497 149   185   \n1498 331   323   \n1499 258   345   \n1500 136    60.5 \n1501 218   255   \n1502 463   408   \n1503 495   399   \n1504 292   394   \n1505 274   379   \n1506 342   421   \n1507 124.    4.60\n1508 432   391   \n1509 490   428   \n1510  63.2 131.  \n1511  91.8 144.  \n1512 252   361   \n1513 257   340   \n1514 215   212   \n1515 159.  124.  \n1516 339   418   \n1517 332   406   \n1518 774   354   \n1519 571   436   \n1520 321   387   \n1521 434   407   \n1522 448   476   \n1523 566   401   \n1524 354   431   \n1525 685   425   \n1526 658   424   \n1527 811   323   \n1528 178   174   \n1529 615   468   \n1530 284   291   \n1531 409   426   \n1532 295   334   \n1533 272   334   \n1534 452   459   \n1535 334   374   \n1536 580   476   \n1537 498   419   \n1538 166.   80   \n1539 567   435   \n1540 426   446   \n1541 786   323   \n1542 272   332   \n1543 750   391   \n1544 311   298   \n1545 693   428   \n1546 289   331   \n1547  87.9  90.4 \n1548 124.   42.3 \n1549 748   392   \n1550 516   401   \n1551 361   310   \n1552 315   294   \n1553 728   409   \n1554 568   479   \n1555 164   140   \n1556 179   243   \n1557 819   308   \n1558 263   280   \n1559 133.  158   \n1560 337   322   \n1561 180.   46.2 \n1562 570   376   \n1563 263   311   \n1564 281   349   \n1565 412   450   \n1566 110    24.1 \n1567 583   386   \n1568 279   247   \n1569 111.   87.8 \n1570 722   392   \n1571 701   418   \n1572 691   434   \n1573 168.   78.7 \n1574 383   372   \n1575 648   430   \n1576 504   461   \n1577 174   244   \n1578 410   395   \n1579 114.  141.  \n1580 222   169   \n1581 210   145   \n1582 653   435   \n1583 282   379   \n1584 333   395   \n1585 290   261   \n1586 440   392   \n1587 611   469   \n1588 616   409   \n1589 216   148   \n1590 296   339   \n1591 273   274   \n1592 730   408   \n1593 649   408   \n1594 142.  103.  \n1595 566   444   \n1596 335   320   \n1597 577   414   \n1598 330   410   \n1599 783   328   \n1600 527   451   \n1601 467   480   \n1602 193   196   \n1603 106.   95.6 \n1604 106.   64.4 \n1605 658   453   \n1606 168   204   \n1607 221   221   \n1608 289   410   \n1609 284   338   \n1610 241   253   \n1611 328   311   \n1612 518   477   \n1613 271   395   \n1614  89.2 162.  \n1615 304   415   \n1616 200   202   \n1617 806   289   \n1618 246   346   \n1619 553   462   \n1620 347   425   \n1621 627   464   \n1622 577   464   \n1623 300   282   \n1624 119.  144.  \n1625 201   236   \n1626 757   379   \n1627 148.  102.  \n1628 744   380   \n1629 387   363   \n1630 274   276   \n1631 450   395   \n1632 246   337   \n1633 252   232   \n1634 221   236   \n1635 147   172   \n1636 149   128.  \n1637 242   262   \n1638 276   279   \n1639 411   458   \n1640 283   282   \n1641 260   307   \n1642 179.   43.6 \n1643 167   204   \n1644 243   286   \n1645 337   383   \n1646 666   434   \n1647  95.7  65.7 \n1648 202   130   \n1649  82.7  81.3 \n1650 563   393   \n1651 355   432   \n1652 118.   59.2 \n1653 176.   65.7 \n1654 407   394   \n1655 578   385   \n1656 657   416   \n1657 120.  105.  \n1658 325   389   \n1659 513   402   \n1660 105.   65.7 \n1661 566   398   \n1662 115.   73.5 \n1663 546   380   \n1664 449   455   \n1665 342   362   \n1666 330   314   \n1667 693   419   \n1668 470   397   \n1669 248   357   \n1670 602   404   \n1671 663   431   \n1672 326   310   \n1673 319   299   \n1674 167   245   \n1675 561   428   \n1676 216   151   \n1677 130.  135.  \n1678 235   221   \n1679 251   306   \n1680 559   432   \n1681 423   388   \n1682 561   444   \n1683 190   163   \n1684 747   395   \n1685 139.   38.4 \n1686 742   399   \n1687 115.   42.3 \n1688 167.   18.9 \n1689 636   444   \n1690 526   392   \n1691 464   437   \n1692 354   307   \n1693 320   300   \n1694 286   384   \n1695 593   451   \n1696 151   226   \n1697  94.4 141.  \n1698 266   281   \n1699 211   240   \n1700 525   393   \n1701 784   359   \n1702 792   341   \n1703  77.5  82.6 \n1704 122.   20.2 \n1705 178.  112.  \n1706 407   389   \n1707 548   460   \n1708 805   332   \n1709 252   236   \n1710 286   406   \n1711 289   322   \n1712 294   266   \n1713 796   307   \n1714 356   307   \n1715 212   137   \n1716 227   195   \n1717 213   165   \n1718 489   434   \n1719 503   402   \n1720 163.   85.2 \n1721 193   135   \n1722 147   199   \n1723  82.7 164.  \n1724 213   140   \n1725 545   398   \n1726  90.5 155.  \n1727 109.  172.  \n1728  76.2 111.  \n1729  65.8 141.  \n1730 253   316   \n1731 372   389   \n1732 157   197   \n1733 286   354   \n1734 176.  101.  \n1735 157   149   \n1736 244   199   \n1737 294   306   \n1738 354   407   \n1739 819   286   \n1740 274   275   \n1741 482   473   \n1742 288   386   \n1743 109.   31.9 \n1744 609   389   \n1745 294   307   \n1746 110    87.8 \n1747 598   388   \n1748 169   214   \n1749 570   429   \n1750  85.3 146.  \n1751 162    99.5 \n1752 754   388   \n1753 423   468   \n1754 127.   29.3 \n1755 645   437   \n1756 526   453   \n1757 609   457   \n1758 218   228   \n1759 307   317   \n1760 418   399   \n1761 727   410   \n1762 586   386   \n1763 178.   64.4 \n1764 343   316   \n1765 137.  154.  \n1766 130.    2   \n1767 229   270   \n1768 559   471   \n1769 268   392   \n1770 130.   38.4 \n1771 415   455   \n1772 372   428   \n1773 198   130   \n1774  94.4  42.3 \n1775 119.   83.9 \n1776 802   298   \n1777 119.   74.8 \n1778  86.6  50.1 \n1779 234   276   \n1780 269   243   \n1781 132.   78.7 \n1782  81.4  93   \n1783 102.  178.  \n1784 118.   42.3 \n1785 201   130   \n1786 285   406   \n1787 328   361   \n1788 226   209   \n1789 511   442   \n1790 141.   47.5 \n1791 258   358   \n1792 238   225   \n1793 272   293   \n1794 609   428   \n1795 593   473   \n1796 544   482   \n1797 218   225   \n1798 427   470   \n1799 522   394   \n1800  89.2 155.  \n1801 438   473   \n1802 155   196   \n1803 478   482   \n1804 109.  164.  \n1805 410   463   \n1806 536   387   \n1807 251   265   \n1808 304   294   \n1809 540   384   \n1810 273   339   \n1811 217   204   \n1812 139.   26.7 \n1813 154.  119   \n1814 454   410   \n1815 765   379   \n1816 543   390   \n1817 348   336   \n1818 466   475   \n1819  55.4  93   \n1820 729   385   \n1821 467   397   \n1822 581   386   \n1823 164   224   \n1824 659   420   \n1825 468   424   \n1826 653   411   \n1827 120.   56.6 \n1828 307   290   \n1829 743   398   \n1830 639   451   \n1831 185   197   \n1832 366   438   \n1833 273   396   \n1834 775   361   \n1835 563   480   \n1836 786   358   \n1837 402   459   \n1838 185   242   \n1839 418   445   \n1840 523   459   \n1841 142.    8.5 \n1842 238   192   \n1843 420   420   \n1844 246   237   \n1845 165   245   \n1846 163   148   \n1847 443   470   \n1848 283   370   \n1849 806   332   \n1850 271   235   \n1851 119.   43.6 \n1852 364   430   \n1853 135.   29.3 \n1854 123   132   \n1855 456   478   \n1856 132.  153.  \n1857 116.   99.5 \n1858 292   302   \n1859 596   448   \n1860 410   434   \n1861 622   458   \n1862 444   405   \n1863 649   407   \n1864 150.  136.  \n1865 270   394   \n1866 221   259   \n1867 267   246   \n1868 787   356   \n1869 335   415   \n1870 148.  149.  \n1871 366   366   \n1872 562   442   \n1873 264   335   \n1874 137.  135.  \n1875 297   270   \n1876 220   258   \n1877 163.   83.9 \n1878 333   370   \n1879 176   144   \n1880 155   195   \n1881 127.   30.6 \n1882 372   435   \n1883 542   473   \n1884 796   334   \n1885 553   482   \n1886 284   403   \n1887 302   338   \n1888 184   161   \n1889 574   379   \n1890 212   154   \n1891 195   196   \n1892 292   303   \n1893 226   266   \n1894 172.  115.  \n1895 239   193   \n1896 537   440   \n1897 518   406   \n1898 283   352   \n1899 329   314   \n1900 223   186   \n1901 542   482   \n1902 554   387   \n1903 104.  166.  \n1904 181   223   \n1905 358   395   \n1906 422   388   \n1907 253   314   \n1908 146.   48.8 \n1909 150.  126.  \n1910 791   315   \n1911 317   305   \n1912 640   441   \n1913 332   367   \n1914  97    76.1 \n1915 235   276   \n1916 105.  105.  \n1917  77.5  50.1 \n1918 574   421   \n1919  64.5  86.5 \n1920 537   386   \n1921 566   454   \n1922 585   386   \n1923 368   323   \n1924 502   398   \n1925 179.   59.2 \n1926 411   396   \n1927 248   298   \n1928 322   311   \n1929 148   171   \n1930 382   449   \n1931 790   316   \n1932 363   430   \n1933 613   402   \n1934 196   130   \n1935 102.   44.9 \n1936 552   377   \n1937 717   417   \n1938 330   323   \n1939 149    91.7 \n1940 462   426   \n1941 617   409   \n1942 153.   86.5 \n1943 392   454   \n1944 360   429   \n1945 214   240   \n1946 793   348   \n1947 420   386   \n1948 327   409   \n1949 186   156   \n1950 334   371   \n1951 550   378   \n1952 536   386   \n1953 652   410   \n1954 389   453   \n1955 115.   24.1 \n1956 175   239   \n1957 168   214   \n1958 273   372   \n1959 433   422   \n1960 448   464   \n1961 590   386   \n1962  94.4  86.5 \n1963 230   206   \n1964 792   314   \n1965 567   416   \n1966 309   336   \n1967 228   191   \n1968 179.   57.9 \n1969 459   400   \n1970 604   459   \n1971 247   351   \n1972 574   396   \n1973 552   435   \n1974 493   410   \n1975 148   180   \n1976 346   333   \n1977 289   411   \n1978 217   224   \n1979 380   383   \n1980 387   452   \n1981 150.  103.  \n1982 169   178   \n1983 130.  161.  \n1984 344   373   \n1985 570   377   \n1986 267   361   \n1987 647   449   \n1988 403   433   \n1989 317   345   \n1990 185   161   \n1991 136   136.  \n1992 286   280   \n1993 769   344   \n1994 602   389   \n1995 293   414   \n1996  93.1  90.4 \n1997 334   413   \n1998 159   145   \n1999 332   325   \n2000 593   460   \n2001 234   257   \n2002 691   414   \n2003 402   385   \n2004 690   435   \n2005 149   115.  \n2006 386   369   \n2007 810   285   \n2008 409   394   \n2009 286   257   \n2010 269   282   \n2011 591   453   \n2012 628   410   \n2013 216   208   \n2014 110   123.  \n2015 118.   93   \n2016 368   430   \n2017 233   184   \n2018 176.  103.  \n2019 250   358   \n2020 592   452   \n2021 555   482   \n2022 534   429   \n2023 184   197   \n2024  87.9  74.8 \n2025 229   239   \n2026 277   271   \n2027 793   311   \n2028 154.   91.7 \n2029 453   400   \n2030 140.   57.9 \n2031 756   359   \n2032 794   347   \n2033 154   211   \n2034 357   378   \n2035 150.  127.  \n2036 104.   44.9 \n2037 216   150   \n2038 268   231   \n2039 116.  101.  \n2040 282   250   \n2041 109.   69.6 \n2042 148.  129.  \n2043 170.   20.2 \n2044 716   418   \n2045 295   368   \n2046 820   287   \n2047 262   224   \n2048 231   216   \n2049 217   240   \n2050 468   401   \n2051 207   238   \n2052 107.  120.  \n2053 244   290   \n2054 148   199   \n2055 270   269   \n2056 789   337   \n2057 165.   81.3 \n2058 370   372   \n2059 166   175   \n2060 144.   18.9 \n2061 273   239   \n2062 182.  181.  \n2063 319   393   \n2064 111.   21.5 \n2065 649   416   \n2066 368   410   \n2067 724   406   \n2068 122.   21.5 \n2069 763   370   \n2070 331   411   \n2071 507   398   \n2072 509   398   \n2073 772   342   \n2074 251   360   \n2075 740   388   \n2076 512   407   \n2077 161   155   \n2078  77.5 145   \n2079 266   329   \n2080 349   408   \n2081 329   313   \n2082 366   439   \n2083 539   385   \n2084 768   345   \n2085 703   426   \n2086 355   431   \n2087 541   479   \n2088 165.   38.4 \n2089 230   182   \n2090 184   238   \n2091 630   394   \n2092 782   362   \n2093 235   277   \n2094 260   277   \n2095 232   184   \n2096 286   375   \n2097 272   396   \n2098 337   416   \n2099 217   253   \n2100 426   401   \n2101 177   239   \n2102  94.4  70.9 \n2103 340   350   \n2104 327   408   \n2105 268   282   \n2106 230   240   \n2107 708   404   \n2108 365   438   \n2109 159.  105.  \n2110 245   258   \n2111 548   482   \n2112 366   356   \n2113 361   370   \n2114 109.   46.2 \n2115 241   229   \n2116  94.4 138.  \n2117 544   434   \n2118 167.   44.9 \n2119  81.4  57.9 \n2120 284   361   \n2121 356   432   \n2122 775   368   \n2123 344   347   \n2124 289   327   \n2125 202   135   \n2126 167   220   \n2127 569   479   \n2128 154.   57.9 \n2129 459   479   \n2130 537   437   \n2131 723   413   \n2132 110    89.1 \n2133 686   437   \n2134 438   396   \n2135 137   197   \n2136 141.   41   \n2137 601   440   \n2138  69.7 161.  \n2139 276   278   \n2140 306   414   \n2141 178.   41   \n2142 168.   90.4 \n2143 463   440   \n2144 385   367   \n2145 154   216   \n2146 174.   70.9 \n2147 123    56.6 \n2148 299   416   \n2149 309   285   \n2150 376   368   \n2151  71   157.  \n2152 419   400   \n2153 165   175   \n2154 166   228   \n2155 118.   94.3 \n2156 148   215   \n2157 386   365   \n2158 564   412   \n2159  72.3 162.  \n2160 159.  126.  \n2161 130.  109.  \n2162 821   302   \n2163 252   274   \n2164 150.   37.1 \n2165 517   406   \n2166 254   269   \n2167 220   189   \n2168 122.   56.6 \n2169 145   187   \n2170 352   397   \n2171 470   476   \n2172 306   317   \n2173 566   404   \n2174 545   462   \n2175 158   169   \n2176 420   385   \n2177 453   473   \n2178 800   300   \n2179 107.   93   \n2180 175   221   \n2181 179.   44.9 \n2182 157.  129.  \n2183 818   308   \n2184 116.   74.8 \n2185 144.   17.6 \n2186 506   458   \n2187 148   179   \n2188 213   248   \n2189 214   249   \n2190 788   319   \n2191 312   322   \n2192 136    61.8 \n2193 243   263   \n2194 359   308   \n2195 306   281   \n2196 368   357   \n2197 180.   48.8 \n2198 641   459   \n2199 182   143   \n2200 308   400   \n2201 462   429   \n2202 105.  127.  \n2203 220   166   \n2204 371   408   \n2205 344   316   \n2206 271   362   \n2207 552   463   \n2208 153.  103.  \n2209 247   260   \n2210 242   269   \n2211 127.   93   \n2212 533   434   \n2213 551   377   \n2214 251   264   \n2215 111.   38.4 \n2216 369   402   \n2217 766   376   \n2218 426   469   \n2219 327   358   \n2220 645   459   \n2221 166   245   \n2222 196   205   \n2223 533   388   \n2224 152   192   \n2225 304   303   \n2226 145.   22.8 \n2227 290   300   \n2228 392   385   \n2229 410   425   \n2230 282   397   \n2231 460   448   \n2232 113.   70.9 \n2233 413   396   \n2234  80.1  47.5 \n2235 560   445   \n2236 219   163   \n2237 274   326   \n2238 174.  114.  \n2239 127.   31.9 \n2240 359   355   \n2241 459   407   \n2242 577   412   \n2243 116.   60.5 \n2244 163.   99.5 \n2245 707   405   \n2246 281   389   \n2247 726   405   \n2248 535   413   \n2249  71   158   \n2250 416   406   \n2251  67.1 146.  \n2252 644   412   \n2253 123    35.8 \n2254 318   297   \n2255 452   460   \n2256 787   322   \n2257 237   281   \n2258 780   330   \n2259 344   423   \n2260 128.   94.3 \n2261 151   227   \n2262 498   416   \n2263 159.  120.  \n2264 643   428   \n2265 789   327   \n2266 560   374   \n2267 789   318   \n2268 361   435   \n2269 105.   99.5 \n2270 603   437   \n2271 321   302   \n2272 717   412   \n2273 185   153   \n2274  58    89.1 \n2275 110   141.  \n2276 672   427   \n2277 264   298   \n2278 609   427   \n2279 613   468   \n2280  77.5  48.8 \n2281 488   440   \n2282 819   306   \n2283  99.6 178.  \n2284 176.  114.  \n2285 171   168   \n2286 258   274   \n2287 676   443   \n2288 365   315   \n2289 150.  112.  \n2290 479   482   \n2291 241   204   \n2292 226   233   \n2293 381   448   \n2294 299   333   \n2295 492   399   \n2296 668   428   \n2297 232   216   \n2298 550   466   \n2299 183   238   \n2300 334   237   \n2301 146.   94.3 \n2302 140   216   \n2303 477   402   \n2304  81.4  39.7 \n2305 179   202   \n2306 367   440   \n2307 176.   98.2 \n2308 212   160   \n2309 200   130   \n2310 164   162   \n2311 220   190   \n2312 309   286   \n2313 158   197   \n2314 197   204   \n2315 261   278   \n2316 222   225   \n2317 220   214   \n2318 670   447   \n2319 477   482   \n2320 122.  176.  \n2321 273   284   \n2322 600   471   \n2323 660   446   \n2324 308   411   \n2325 150.   38.4 \n2326 216   207   \n2327 361   377   \n2328 145.   95.6 \n2329 396   457   \n2330 115.   25.4 \n2331 704   426   \n2332 144   185   \n2333 746   396   \n2334 248   239   \n2335 156   196   \n2336 233   273   \n2337 504   479   \n2338 269   356   \n2339 580   449   \n2340 350   338   \n2341 814   316   \n2342 165.   87.8 \n2343 624   451   \n2344  54.1 112.  \n2345 681   422   \n2346 220   213   \n2347 231   271   \n2348 573   425   \n2349 101.  171   \n2350 632   409   \n2351  74.9 132   \n2352 133.   35.8 \n2353 175    67   \n2354 490   427   \n2355 693   413   \n2356 596   408   \n2357 105.  106   \n2358 553   376   \n2359 185   205   \n2360 709   409   \n2361 270   234   \n2362 461   445   \n2363 454   457   \n2364 738   402   \n2365 589   386   \n2366 150.   52.7 \n2367 581   435   \n2368 146.  131.  \n2369 614   403   \n2370 180   151   \n2371 599   414   \n2372 104.  144.  \n2373 176.   99.5 \n2374 732   382   \n2375 126.  109.  \n2376 180.  180.  \n2377 156.   94.3 \n2378 192   154   \n2379 198   196   \n2380 153   218   \n2381 811   322   \n2382 346   359   \n2383 135.   34.5 \n2384 405   430   \n2385 261   308   \n2386 170.   60.5 \n2387 116.  128.  \n2388 218   162   \n2389 561   468   \n2390 602   427   \n2391 264   227   \n2392  50.2 115.  \n2393 250   301   \n2394 370   442   \n2395 143   214   \n2396 153.   57.9 \n2397 140.    3.30\n2398 685   438   \n2399 711   415   \n2400 192   130   \n2401 246   341   \n2402 642   440   \n2403 123    42.3 \n2404 246   272   \n2405 270   255   \n2406 465   397   \n2407 661   431   \n2408  82.7  57.9 \n2409 155   210   \n2410 312   388   \n2411 146.  101.  \n2412 380   448   \n2413 628   393   \n2414 596   473   \n2415 231   190   \n2416  69.7 107.  \n2417 804   291   \n2418 294   364   \n2419 153.  122.  \n2420 340   420   \n2421 672   440   \n2422 167.   80   \n2423 391   385   \n2424 725   389   \n2425 758   357   \n2426 170.  116.  \n2427 751   364   \n2428 417   460   \n2429  54.1 119   \n2430 266   230   \n2431 162   159   \n2432  56.7 106   \n2433 562   385   \n2434  91.8  72.2 \n2435 207   243   \n2436 192   196   \n2437 107.   54   \n2438 246   342   \n2439 330   390   \n2440 820   286   \n2441 548   477   \n2442 251   207   \n2443 172.  103.  \n2444 293   396   \n2445 159   204   \n2446 165.  115.  \n2447 806   331   \n2448 529   460   \n2449 556   459   \n2450 413   418   \n2451 314   339   \n2452 279   274   \n2453 735   404   \n2454  87.9 162.  \n2455 822   296   \n2456 153   169   \n2457 110    26.7 \n2458 789   319   \n2459 316   343   \n2460 819   285   \n2461 418   453   \n2462 713   400   \n2463 267   390   \n2464 105.  115.  \n2465 178.   63.1 \n2466 218   172   \n2467 198   219   \n2468 532   389   \n2469 803   295   \n2470 191   151   \n2471  77.5 115.  \n2472 462   479   \n2473 148.  103.  \n2474 131.   38.4 \n2475  86.6  78.7 \n2476 175    37.1 \n2477 239   208   \n2478 325   384   \n2479 729   409   \n2480 111.  126.  \n2481 109.   28   \n2482 220   165   \n2483 440   474   \n2484 427   464   \n2485 598   397   \n2486 168.  109.  \n2487 468   423   \n2488 166.   81.3 \n2489 613   418   \n2490 214   166   \n2491 332   366   \n2492 755   381   \n2493 421   462   \n2494 178.  106   \n2495 269   268   \n2496 369   329   \n2497 192   142   \n2498 637   461   \n2499 160   144   \n2500  87.9 150.  \n2501 325   407   \n2502 273   292   \n2503 274   252   \n2504 358   308   \n2505 163   149   \n2506 159.   54   \n2507 275   278   \n2508  97   166.  \n2509 266   389   \n2510 276   378   \n2511 165   174   \n2512 627   465   \n2513 270   323   \n2514 612   421   \n2515 166.   46.2 \n2516 364   412   \n2517 261   373   \n2518 463   420   \n2519 723   405   \n2520 141.   39.7 \n2521 614   402   \n2522 122.  106   \n2523 748   374   \n2524 157   151   \n2525 247   353   \n2526 793   312   \n2527 389   373   \n2528 625   465   \n2529 360   332   \n2530 251   206   \n2531 709   403   \n2532 356   341   \n2533 180.   50.1 \n2534 466   432   \n2535 217   201   \n2536 113.   20.2 \n2537 546   379   \n2538 307   282   \n2539 546   482   \n2540 599   446   \n2541 672   446   \n2542 502   479   \n2543 266   388   \n2544 680   442   \n2545 582   386   \n2546 543   388   \n2547 165.   48.8 \n2548 593   438   \n2549 105.  107.  \n2550 265   262   \n2551 257   328   \n2552 357   334   \n2553 601   389   \n2554 362   328   \n2555 324   306   \n2556 115.   31.9 \n2557  73.6 140.  \n2558 612   457   \n2559 242   254   \n2560 207   139   \n2561 150   188   \n2562  78.8 166.  \n2563 105.   64.4 \n2564 350   428   \n2565 128.  103.  \n2566 326   390   \n2567 730   385   \n2568 418   392   \n2569 296   310   \n2570 455   478   \n2571 269   314   \n2572 618   454   \n2573 616   414   \n2574 324   323   \n2575 711   421   \n2576 247   352   \n2577 261   372   \n2578 217   170   \n2579 159   176   \n2580 608   403   \n2581 633   408   \n2582 118.   12.4"
  },
  {
    "objectID": "slides/03-visualize.html#summary-statistics-might-help-us",
    "href": "slides/03-visualize.html#summary-statistics-might-help-us",
    "title": "Data Visualization",
    "section": "Summary statistics might help us",
    "text": "Summary statistics might help us\nvar: x\n\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   50.2   167.2   288.0   346.0   499.8   822.0 \n\n\nvar: y\n\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n    2.0   162.2   314.0   283.3   401.0   482.0 \n\n\ncorrelation between x, y\n\n\n[1] 0.7601536"
  },
  {
    "objectID": "slides/03-visualize.html#who-needs-your-dataviz",
    "href": "slides/03-visualize.html#who-needs-your-dataviz",
    "title": "Data Visualization",
    "section": "Who needs your dataviz?",
    "text": "Who needs your dataviz?\nYou generally visualize data for two types of people:\n\n\nYourself.\nOthers.\n\n\n\nWhen you make dataviz for yourself, your aim is explorative and your goal is to generate as many raw graphs as quickly as possible to gain insights on your data.\n\n\nWhen you make dataviz for others, your aim is communicative and you work to be as clear and as understandable as possible."
  },
  {
    "objectID": "slides/03-visualize.html#exercise",
    "href": "slides/03-visualize.html#exercise",
    "title": "Data Visualization",
    "section": "Exercise",
    "text": "Exercise\n\nWith the penguin dataset:\n\nMake a histogram of the variable bill_length_mm. Repeat the same histogram, but use colors to differentiate species.\nMake a histogram of bill_depth_mm, but only for female penguins.\nMake a scatterplot of flipper_length_mm vs body_mass_g, use colors to differentiate species.\n\n\n\nGet help from ggplot2‚Äôs documentation.\n\nOn ggplot2‚Äôs book.\nOn R4DS book.\nOn ggplot2‚Äôs website."
  },
  {
    "objectID": "slides/03-visualize.html#a-grammar-of-graphics",
    "href": "slides/03-visualize.html#a-grammar-of-graphics",
    "title": "Data Visualization",
    "section": "A grammar of graphics",
    "text": "A grammar of graphics\n\n\n\n\nggplot2 is one of the main tools for declaring graphics in R.\nIt is based on the grammar of graphics.\nIt can be used both for explorative analysis and for publication ready graphs."
  },
  {
    "objectID": "slides/03-visualize.html#the-grammar-of-graphics",
    "href": "slides/03-visualize.html#the-grammar-of-graphics",
    "title": "Data Visualization",
    "section": "The grammar of graphics",
    "text": "The grammar of graphics\nThe grammar of graphics is a unifying framework to conceptualize and program datavisualization.\nIt states that most graphics are composed of:\n\nA default dataset and set of mappings from variables to aesthetics.\nOne or more layers, with each layer having one geometric object, one statistical transformation, one position adjustment, and optionally, one dataset and set of aesthetic mappings,\nOne scale for each aesthetic mapping used.\nA coordinate system.\nThe facet specification.\n\nHadley Wickham - A Layered Grammar of Graphics, 2010"
  },
  {
    "objectID": "slides/03-visualize.html#lets-put-it-in-practice",
    "href": "slides/03-visualize.html#lets-put-it-in-practice",
    "title": "Data Visualization",
    "section": "Let‚Äôs put it in practice",
    "text": "Let‚Äôs put it in practice\nWe take dataset (penguins) and decide that we want to map a set of variables to aesthetics specification‚Ä¶\n\n\nVariables\n\nbill_length_mm\nbill_depth_mm\nisland\nsex\n\n\nAesthetics\n\nx\ny\ncolour\nshape"
  },
  {
    "objectID": "slides/03-visualize.html#lets-put-it-in-practice-1",
    "href": "slides/03-visualize.html#lets-put-it-in-practice-1",
    "title": "Data Visualization",
    "section": "Let‚Äôs put it in practice",
    "text": "Let‚Äôs put it in practice\n\n\n\n\nflowchart LR\n  bill_length_mm --> x\n  bill_depth_mm --> y\n  island --> colour\n  sex --> shape\n  subgraph Variable\n  bill_length_mm\n  bill_depth_mm\n  island\n  sex\n  end\n  subgraph aesthetics\n  x\n  y\n  colour\n  shape\n  end"
  },
  {
    "objectID": "slides/03-visualize.html#section-6",
    "href": "slides/03-visualize.html#section-6",
    "title": "Data Visualization",
    "section": "",
    "text": "A default dataset‚Ä¶\n\n\n\np <- \n  penguins %>% \n  drop_na(species, sex) %>% \n  ggplot()"
  },
  {
    "objectID": "slides/03-visualize.html#section-7",
    "href": "slides/03-visualize.html#section-7",
    "title": "Data Visualization",
    "section": "",
    "text": "A default dataset and set of mappings from variables to aesthetics.\n\n\n\np <- \n  penguins %>% \n  drop_na(species, sex) %>% \n  ggplot(\n    aes(x = bill_length_mm,\n        y = bill_depth_mm,\n        colour = species,\n        shape = sex)\n    )"
  },
  {
    "objectID": "slides/03-visualize.html#section-8",
    "href": "slides/03-visualize.html#section-8",
    "title": "Data Visualization",
    "section": "",
    "text": "One or more layers, with each layer having one geometric object‚Ä¶\n\n\n\np <- \n  penguins %>% \n  drop_na(species, sex) %>% \n  ggplot(\n    aes(x = bill_length_mm,\n        y = bill_depth_mm,\n        colour = species,\n        shape = sex)\n  ) + \n  geom_point()"
  },
  {
    "objectID": "slides/03-visualize.html#section-9",
    "href": "slides/03-visualize.html#section-9",
    "title": "Data Visualization",
    "section": "",
    "text": "‚Ä¶and a statistical transformation.\n\n\n\np <- \n  penguins %>% \n  drop_na(species, sex) %>% \n  ggplot(\n    aes(x = bill_length_mm,\n        y = bill_depth_mm,\n        colour = species,\n        shape = sex)\n  ) + \n  geom_point() +\n  geom_smooth()"
  },
  {
    "objectID": "slides/03-visualize.html#section-10",
    "href": "slides/03-visualize.html#section-10",
    "title": "Data Visualization",
    "section": "",
    "text": "‚Ä¶and a statistical transformation.\n\n\n\np <- \n  penguins %>% \n  drop_na(species, sex) %>% \n  ggplot(\n    aes(x = bill_length_mm,\n        y = bill_depth_mm,\n        colour = species,\n        shape = sex)\n  ) + \n  geom_point() +\n  geom_smooth(method = 'lm')"
  },
  {
    "objectID": "slides/03-visualize.html#section-11",
    "href": "slides/03-visualize.html#section-11",
    "title": "Data Visualization",
    "section": "",
    "text": "The facet specification.\n\n\n\np <- \n  penguins %>%\n  drop_na(species, sex) %>% \n  ggplot(\n    aes(x = bill_length_mm,\n        y = bill_depth_mm,\n        colour = species,\n        shape = sex)\n  ) + \n  geom_point() +\n  geom_smooth(method = 'lm') +\n  facet_wrap(facets = 'sex',\n             ncol = 1)"
  },
  {
    "objectID": "slides/03-visualize.html#section-12",
    "href": "slides/03-visualize.html#section-12",
    "title": "Data Visualization",
    "section": "",
    "text": "We can also modify the coordinate system, if needed.\n\n\n\np <- \n  penguins %>%\n  drop_na(species, sex) %>% \n  ggplot(\n    aes(x = bill_length_mm,\n        y = bill_depth_mm,\n        colour = species,\n        shape = sex)\n  ) + \n  geom_point() +\n  geom_smooth(method = 'lm') +\n  facet_wrap(facets = 'sex',\n             ncol = 1) +\n  scale_y_log10()"
  },
  {
    "objectID": "slides/03-visualize.html#exercise-1",
    "href": "slides/03-visualize.html#exercise-1",
    "title": "Data Visualization",
    "section": "Exercise",
    "text": "Exercise\nTake the penguins dataset; make a bar chart that counts how many penguins have been recorded for each species.\n\nwhich variable are you mapping to each aesthetic specification?\nWhich geometric object are you using?\nAre you using a statistical transformation?"
  },
  {
    "objectID": "slides/03-visualize.html#graphical-exploration",
    "href": "slides/03-visualize.html#graphical-exploration",
    "title": "Data Visualization",
    "section": "Graphical exploration",
    "text": "Graphical exploration\nYou can use graphics to learn what‚Äôs inside our data.\n\nFirst, asking questions about data then, plotting them with different visual models to highlight and learn about data patterns, we can go through these two steps iteratively (plot, rinse and repeat)."
  },
  {
    "objectID": "slides/03-visualize.html#visual-models",
    "href": "slides/03-visualize.html#visual-models",
    "title": "Data Visualization",
    "section": "Visual models",
    "text": "Visual models\nA visual model is a specific type of graph, designed for a specific purpose.\n\nggplot provides many basic visual models in its set of geom_* functions.\n\nNiche and advanced visual models can be found in its ecosystem of extensions."
  },
  {
    "objectID": "slides/03-visualize.html#visual-models-1",
    "href": "slides/03-visualize.html#visual-models-1",
    "title": "Data Visualization",
    "section": "Visual models",
    "text": "Visual models\nExamples of visual models used in exploratory data analysis are:\n\n\none variable\n\nbarplots.\nhistograms.\nboxplots.\n\n\ntwo variables\n\nscatterplots.\nheatmaps.\n\n\n\nDon‚Äôt feel limited to these visual models, we learn to program because we want flexibility."
  },
  {
    "objectID": "slides/03-visualize.html#histograms",
    "href": "slides/03-visualize.html#histograms",
    "title": "Data Visualization",
    "section": "Histograms",
    "text": "Histograms\n\npenguins %>% ggplot(aes(x = flipper_length_mm, fill = species)) + geom_histogram()"
  },
  {
    "objectID": "slides/03-visualize.html#histograms-1",
    "href": "slides/03-visualize.html#histograms-1",
    "title": "Data Visualization",
    "section": "Histograms",
    "text": "Histograms\n\npenguins %>% ggplot(aes(x = flipper_length_mm, fill = species)) + geom_histogram()"
  },
  {
    "objectID": "slides/03-visualize.html#boxplots",
    "href": "slides/03-visualize.html#boxplots",
    "title": "Data Visualization",
    "section": "Boxplots",
    "text": "Boxplots\nRobust summary statistics displayed (median, IQR, outliers)."
  },
  {
    "objectID": "slides/03-visualize.html#boxplots-1",
    "href": "slides/03-visualize.html#boxplots-1",
    "title": "Data Visualization",
    "section": "Boxplots",
    "text": "Boxplots\n\n\nRobust summary statistics displayed.\n\n\n\n\n\nImage source: Wikipedia"
  },
  {
    "objectID": "slides/03-visualize.html#boxplots-2",
    "href": "slides/03-visualize.html#boxplots-2",
    "title": "Data Visualization",
    "section": "Boxplots",
    "text": "Boxplots\n\npenguins %>%\n  ggplot(aes(x = species, y = flipper_length_mm, fill = sex)) + geom_boxplot()"
  },
  {
    "objectID": "slides/03-visualize.html#scatterplots",
    "href": "slides/03-visualize.html#scatterplots",
    "title": "Data Visualization",
    "section": "Scatterplots",
    "text": "Scatterplots\n\npenguins %>% \n  ggplot(aes(x = flipper_length_mm, y= body_mass_g, colour = species)) + geom_point()"
  },
  {
    "objectID": "slides/03-visualize.html#heatmaps-1",
    "href": "slides/03-visualize.html#heatmaps-1",
    "title": "Data Visualization",
    "section": "Heatmaps",
    "text": "Heatmaps"
  },
  {
    "objectID": "slides/03-visualize.html#heatmaps-2",
    "href": "slides/03-visualize.html#heatmaps-2",
    "title": "Data Visualization",
    "section": "Heatmaps",
    "text": "Heatmaps\n\npenguins %>% \n  ggplot(aes(x = flipper_length_mm, body_mass_g)) +\n  geom_hex(bins = c(20, 20*0.010)) +\n  scale_fill_gradient(low = 'grey70', high = 'blue')"
  },
  {
    "objectID": "slides/03-visualize.html#exercise-2",
    "href": "slides/03-visualize.html#exercise-2",
    "title": "Data Visualization",
    "section": "Exercise",
    "text": "Exercise\nMake a histogram of the continuous variables in the penguins dataset but compute the bin statistics before making the plot.\n\n\n2022 CBSER Summer School"
  },
  {
    "objectID": "slides/04-get.html#dataframes-are-rectangular-datasets",
    "href": "slides/04-get.html#dataframes-are-rectangular-datasets",
    "title": "Get and Clean Data",
    "section": "Dataframes are rectangular datasets",
    "text": "Dataframes are rectangular datasets\nMore often than not when we speak about datasets, we speak about rectangular data, i.e., data in two-dimensional table, made of values organized in rows and columns.\n\n\nEach cell stores a value.\nEach value belongs to one column and one row.\n\n\n\nRectnagular data are the easiest to use, when we get data that are not rectangular, we try to reshape them in that form."
  },
  {
    "objectID": "slides/04-get.html#readr",
    "href": "slides/04-get.html#readr",
    "title": "Get and Clean Data",
    "section": "Readr",
    "text": "Readr\n\n\n\n\nReadr is a package that loads (reads) Rectangular Text data in R.\nIt‚Äôs fast, it guesses column types explicitly and it‚Äôs pipe friendly\nYou can use it to read both local data and online data from a URL.\nFor example we can use it to read data in CSV and TSV formats and many more."
  },
  {
    "objectID": "slides/04-get.html#read-the-palmer-pengunis-dataset",
    "href": "slides/04-get.html#read-the-palmer-pengunis-dataset",
    "title": "Get and Clean Data",
    "section": "Read the Palmer Pengunis dataset",
    "text": "Read the Palmer Pengunis dataset\nWe can use again on the Palmer Penguins Dataset\nThe source code of this package, is on github; we can find the tidy CSV data in the inst/exdata folder.\n\n\npenguin_csv_url <- 'https://raw.githubusercontent.com/allisonhorst/palmerpenguins/main/inst/extdata/penguins.csv'\n \nread_csv(penguin_csv_url)\n\nRows: 344 Columns: 8\n‚îÄ‚îÄ Column specification ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\nDelimiter: \",\"\nchr (3): species, island, sex\ndbl (5): bill_length_mm, bill_depth_mm, flipper_length_mm, body_mass_g, year\n\n‚Ñπ Use `spec()` to retrieve the full column specification for this data.\n‚Ñπ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n# A tibble: 344 √ó 8\n   species island    bill_length_mm bill_depth_mm flipper_‚Ä¶¬π body_‚Ä¶¬≤ sex    year\n   <chr>   <chr>              <dbl>         <dbl>      <dbl>   <dbl> <chr> <dbl>\n 1 Adelie  Torgersen           39.1          18.7        181    3750 male   2007\n 2 Adelie  Torgersen           39.5          17.4        186    3800 fema‚Ä¶  2007\n 3 Adelie  Torgersen           40.3          18          195    3250 fema‚Ä¶  2007\n 4 Adelie  Torgersen           NA            NA           NA      NA <NA>   2007\n 5 Adelie  Torgersen           36.7          19.3        193    3450 fema‚Ä¶  2007\n 6 Adelie  Torgersen           39.3          20.6        190    3650 male   2007\n 7 Adelie  Torgersen           38.9          17.8        181    3625 fema‚Ä¶  2007\n 8 Adelie  Torgersen           39.2          19.6        195    4675 male   2007\n 9 Adelie  Torgersen           34.1          18.1        193    3475 <NA>   2007\n10 Adelie  Torgersen           42            20.2        190    4250 <NA>   2007\n# ‚Ä¶ with 334 more rows, and abbreviated variable names ¬π‚Äãflipper_length_mm,\n#   ¬≤‚Äãbody_mass_g\n# ‚Ñπ Use `print(n = ...)` to see more rows"
  },
  {
    "objectID": "slides/04-get.html#section",
    "href": "slides/04-get.html#section",
    "title": "Get and Clean Data",
    "section": "",
    "text": "The tibble that we have loaded and generate d from CSV is not identical to the one that comes already loaded with the palmerpenguins package:\n\npenguins_from_csv <- \n  penguin_csv_url %>% \n  read_csv()\n\nidentical(\n  penguins_from_csv,\n  palmerpenguins::penguins\n)\n\n[1] FALSE\n\n\nLet‚Äôs compare them side by side\n\n\n\npalmerpenguins::penguins %>% \n  glimpse(width = 40)\n\nRows: 344\nColumns: 8\n$ species           <fct> Adelie, Adel‚Ä¶\n$ island            <fct> Torgersen, T‚Ä¶\n$ bill_length_mm    <dbl> 39.1, 39.5, ‚Ä¶\n$ bill_depth_mm     <dbl> 18.7, 17.4, ‚Ä¶\n$ flipper_length_mm <int> 181, 186, 19‚Ä¶\n$ body_mass_g       <int> 3750, 3800, ‚Ä¶\n$ sex               <fct> male, female‚Ä¶\n$ year              <int> 2007, 2007, ‚Ä¶\n\n\n\n\npenguins_from_csv %>% \n  glimpse(width = 40)\n\nRows: 344\nColumns: 8\n$ species           <chr> \"Adelie\", \"A‚Ä¶\n$ island            <chr> \"Torgersen\",‚Ä¶\n$ bill_length_mm    <dbl> 39.1, 39.5, ‚Ä¶\n$ bill_depth_mm     <dbl> 18.7, 17.4, ‚Ä¶\n$ flipper_length_mm <dbl> 181, 186, 19‚Ä¶\n$ body_mass_g       <dbl> 3750, 3800, ‚Ä¶\n$ sex               <chr> \"male\", \"fem‚Ä¶\n$ year              <dbl> 2007, 2007, ‚Ä¶\n\n\n\n\nCan you spot that column types are different?"
  },
  {
    "objectID": "slides/04-get.html#parsing",
    "href": "slides/04-get.html#parsing",
    "title": "Get and Clean Data",
    "section": "Parsing",
    "text": "Parsing\nWhen we read data from text encoded ‚Äúdelimited‚Äù files, such as CSV, we use function that parse the file.\nWhen we parse something, we formalize its structure applying a set of grammatical rules.\nNo parsing rule is perfect, thus we must often review the results and ‚Äúfix‚Äù parsing ‚Äúmistakes‚Äù.\n\n# specify column types manually\n\npenguins_from_csv <-\n  penguin_csv_url %>% \n  read_csv(\n    col_types = cols(\n      species = col_factor(),\n      island = col_factor(),\n      flipper_length_mm = col_integer(),\n      body_mass_g = col_integer(),\n      sex = col_factor(),\n      year = col_integer()\n    )\n  )"
  },
  {
    "objectID": "slides/04-get.html#exercise",
    "href": "slides/04-get.html#exercise",
    "title": "Get and Clean Data",
    "section": "Exercise",
    "text": "Exercise\nFind the source code of the readr package.\nIn the inst/extdata folder you can find 10 datasets that display different challenges that you might enconter when you have to load data from an external file.\nLoad in R at least 3 of those datasets using functions from readr.\nGet help from readr‚Äôs documentation and the data import chapter of r4ds.\nWhich function did you use? Did you encounter any parsing failure? How did you fix it?"
  },
  {
    "objectID": "slides/04-get.html#read-a-dataset-from-pangaea",
    "href": "slides/04-get.html#read-a-dataset-from-pangaea",
    "title": "Get and Clean Data",
    "section": "Read a dataset from PANGAEA",
    "text": "Read a dataset from PANGAEA\nPANGAEA, a Data repository for the evironmental sciences.\nFor our exercise we will use this dataset from Wu et al:\n\n\n‚ÄúEffect of barite-bound Sr on detrital Sr isotope systematics in marine sediments with pertinent Mediterranean examples‚Äù.\n\n\nhttps://doi.pangaea.de/10.1594/PANGAEA.946258"
  },
  {
    "objectID": "slides/04-get.html#section-1",
    "href": "slides/04-get.html#section-1",
    "title": "Get and Clean Data",
    "section": "",
    "text": "pangaea_filename <- 'Dataset_S2_HCl-leaching.tab'\n\npangaea_path <- here('data-int/Wu-etal_2022/datasets', pangaea_filename)\n\nLet‚Äôs try to read the data file Dataset_S2_HCl-leaching.tab.\nIt‚Äôs a .tab file.\n\npangaea_data <- \n  pangaea_path %>% \n  read_delim()\n\nWarning: One or more parsing issues, see `problems()` for details\n\n\nRows: 177 Columns: 3\n‚îÄ‚îÄ Column specification ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\nDelimiter: \" \"\nchr (3): /*, DATA, DESCRIPTION:\n\n‚Ñπ Use `spec()` to retrieve the full column specification for this data.\n‚Ñπ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "slides/04-get.html#section-2",
    "href": "slides/04-get.html#section-2",
    "title": "Get and Clean Data",
    "section": "",
    "text": "If we call problems() readr tells us what went wrong.\n\npangaea_data\n\n# A tibble: 177 √ó 3\n   `/*`                   DATA           `DESCRIPTION:`                         \n   <chr>                  <chr>          <chr>                                  \n 1 \"Citation:\\tWu,\"       \"Jiawang;\"     \"Liu, Zhifei; Michard, Annie; Tachikaw‚Ä¶\n 2 \"\\tIn:\"                \"Wu,\"          \"J et al. (2022): Effect of barite-bou‚Ä¶\n 3 \"Keyword(s):\\tBarite;\" \"Barium\"       \"(Ba); marine sediments; Mediterranean‚Ä¶\n 4 \"Related\"              \"to:\\tWu,\"     \"Jiawang; Liu, Zhifei; Michard, Annie;‚Ä¶\n 5 \"Funding:\\tChina\"      \"Postdoctoral\" \"Science Foundation (URI: http://res.c‚Ä¶\n 6 \"\\tChina\"              \"Postdoctoral\" \"Science Foundation (URI: http://res.c‚Ä¶\n 7 \"\\tEuropean\"           \"Commission\"   \"(EC), grant/award no. MAS2-CT93-0051:‚Ä¶\n 8 \"\\tEuropean\"           \"Commission\"   \"(EC), grant/award no. MAS3 CT97-0137:‚Ä¶\n 9 \"\\tEuropean\"           \"Commission\"   \"(EC), grant/award no. MAST1-90022C: E‚Ä¶\n10 \"\\tNational\"           \"Natural\"      \"Science Foundation of China (NSFC) (U‚Ä¶\n# ‚Ä¶ with 167 more rows\n# ‚Ñπ Use `print(n = ...)` to see more rows"
  },
  {
    "objectID": "slides/04-get.html#section-3",
    "href": "slides/04-get.html#section-3",
    "title": "Get and Clean Data",
    "section": "",
    "text": "We can use the arguments:\n\n\ndelim = '\\t' to tell read_delim() that we are reading a file delimited by tabulature (\\t).\nskip = 49 to tell it that the first 49 rows must be skipped.\n\n\n\npangaea_data <- \n  pangaea_path %>% \n  read_delim(delim = '\\t',\n             skip = 49)"
  },
  {
    "objectID": "slides/04-get.html#section-4",
    "href": "slides/04-get.html#section-4",
    "title": "Get and Clean Data",
    "section": "",
    "text": "Now the data that we‚Äôve imported into R looks fine.\n\npangaea_data %>% glimpse()\n\nRows: 128\nColumns: 19\n$ Event                      <chr> \"SL73BC\", \"SL73BC\", \"SL73BC\", \"SL73BC\", \"SL‚Ä¶\n$ Latitude                   <dbl> 39.6617, 39.6617, 39.6617, 39.6617, 39.6617‚Ä¶\n$ Longitude                  <dbl> 24.5117, 24.5117, 24.5117, 24.5117, 24.5117‚Ä¶\n$ `Elevation [m]`            <dbl> -339, -339, -339, -339, -339, -339, -339, -‚Ä¶\n$ `Sample label (barite-Sr)` <chr> \"SL73-1\", \"SL73-2\", \"SL73-3\", \"SL73-4\", \"SL‚Ä¶\n$ `Samp type`                <chr> \"non-S1\", \"non-S1\", \"non-S1\", \"S1b\", \"S1b\",‚Ä¶\n$ `Depth [m]`                <dbl> 0.0045, 0.0465, 0.0665, 0.1215, 0.1765, 0.1‚Ä¶\n$ `Age [ka BP]`              <dbl> 1.66, 3.13, 4.13, 5.75, 7.30, 7.78, 8.65, 9‚Ä¶\n$ `CaCO3 [%]`                <dbl> 61.5, 55.1, 53.0, 43.4, 41.8, 42.3, 42.6, 3‚Ä¶\n$ `Ba [¬µg/g] (Leachate)`     <dbl> 72.6, 64.3, 37.4, 63.5, 101.0, 141.0, 75.2,‚Ä¶\n$ `Sr [¬µg/g] (Leachate)`     <dbl> 767, 681, 690, 552, 527, 528, 551, 482, 391‚Ä¶\n$ `Ca [¬µg/g] (Leachate)`     <dbl> 188951.9, 163260.4, 162188.7, 125937.6, 124‚Ä¶\n$ `Al [¬µg/g] (Leachate)`     <dbl> 10612.7, 11428.4, 5463.0, 3261.5, 2121.7, 1‚Ä¶\n$ `Fe [¬µg/g] (Leachate)`     <dbl> 5935.0, 6814.3, 2465.7, 3936.8, 189.6, 7711‚Ä¶\n$ `Ba [¬µg/g] (Residue)`      <dbl> 171.0, 198.0, 251.0, 290.0, 315.0, 259.0, 3‚Ä¶\n$ `Sr [¬µg/g] (Residue)`      <dbl> 66.6, 71.3, 90.3, 99.8, 106.0, 90.7, 108.0,‚Ä¶\n$ `Ca [¬µg/g] (Residue)`      <dbl> 2315.5, 2369.6, 3007.7, 3447.9, 3713.2, 331‚Ä¶\n$ `Al [¬µg/g] (Residue)`      <dbl> 29262.5, 35561.4, 45862.4, 52485.6, 55083.0‚Ä¶\n$ `Fe [¬µg/g] (Residue)`      <dbl> 14834.8, 18301.4, 24534.5, 30745.3, 28532.2‚Ä¶"
  },
  {
    "objectID": "slides/04-get.html#section-5",
    "href": "slides/04-get.html#section-5",
    "title": "Get and Clean Data",
    "section": "",
    "text": "Now the data that we‚Äôve imported into R looks fine.\n\npangaea_data %>% skimr::skim()\n\n\nData summary\n\n\nName\nPiped data\n\n\nNumber of rows\n128\n\n\nNumber of columns\n19\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n3\n\n\nnumeric\n16\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nEvent\n0\n1\n5\n7\n0\n11\n0\n\n\nSample label (barite-Sr)\n0\n1\n5\n7\n0\n128\n0\n\n\nSamp type\n0\n1\n3\n6\n0\n3\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nLatitude\n0\n1\n35.32\n2.24\n33.38\n33.67\n34.55\n35.29\n39.66\n‚ñá‚ñÇ‚ñÅ‚ñÅ‚ñÉ\n\n\nLongitude\n0\n1\n22.79\n8.17\n4.51\n17.86\n24.51\n28.61\n32.67\n‚ñÇ‚ñÅ‚ñÜ‚ñÜ‚ñá\n\n\nElevation [m]\n0\n1\n-1807.65\n829.55\n-3390.00\n-2373.00\n-1587.00\n-1375.00\n-339.00\n‚ñÇ‚ñá‚ñÅ‚ñÖ‚ñÖ\n\n\nDepth [m]\n0\n1\n0.30\n0.25\n0.00\n0.17\n0.26\n0.34\n1.40\n‚ñá‚ñÖ‚ñÅ‚ñÅ‚ñÅ\n\n\nAge [ka BP]\n0\n1\n7.88\n3.49\n0.30\n5.83\n7.86\n9.82\n19.61\n‚ñÉ‚ñá‚ñá‚ñÇ‚ñÅ\n\n\nCaCO3 [%]\n0\n1\n57.94\n8.29\n33.70\n52.58\n57.80\n64.45\n74.60\n‚ñÅ‚ñÉ‚ñá‚ñá‚ñÖ\n\n\nBa [¬µg/g] (Leachate)\n0\n1\n216.49\n223.26\n0.00\n37.15\n122.00\n398.75\n954.00\n‚ñá‚ñÇ‚ñÇ‚ñÅ‚ñÅ\n\n\nSr [¬µg/g] (Leachate)\n0\n1\n784.98\n207.08\n341.00\n635.15\n767.50\n886.25\n1419.00\n‚ñÉ‚ñá‚ñá‚ñÇ‚ñÅ\n\n\nCa [¬µg/g] (Leachate)\n0\n1\n179277.91\n34034.64\n82460.20\n158421.22\n182153.85\n204214.33\n240253.00\n‚ñÅ‚ñÉ‚ñÜ‚ñá‚ñÖ\n\n\nAl [¬µg/g] (Leachate)\n0\n1\n9075.10\n3739.72\n122.20\n6036.95\n9034.50\n11691.80\n21011.90\n‚ñÇ‚ñá‚ñá‚ñÖ‚ñÅ\n\n\nFe [¬µg/g] (Leachate)\n0\n1\n7673.07\n4235.50\n189.60\n4937.08\n6918.25\n9513.88\n21428.70\n‚ñÉ‚ñá‚ñÉ‚ñÅ‚ñÅ\n\n\nBa [¬µg/g] (Residue)\n0\n1\n184.58\n109.97\n54.80\n98.30\n142.00\n251.00\n507.00\n‚ñá‚ñÉ‚ñÇ‚ñÅ‚ñÅ\n\n\nSr [¬µg/g] (Residue)\n0\n1\n46.15\n17.69\n20.50\n33.53\n41.10\n51.85\n120.00\n‚ñá‚ñá‚ñÇ‚ñÅ‚ñÅ\n\n\nCa [¬µg/g] (Residue)\n0\n1\n1316.60\n930.42\n475.50\n825.50\n1057.45\n1446.40\n8343.50\n‚ñá‚ñÅ‚ñÅ‚ñÅ‚ñÅ\n\n\nAl [¬µg/g] (Residue)\n0\n1\n36668.75\n8937.30\n19227.20\n29424.80\n37297.75\n43806.80\n60033.10\n‚ñÜ‚ñá‚ñá‚ñÜ‚ñÅ\n\n\nFe [¬µg/g] (Residue)\n0\n1\n21446.97\n6866.21\n10823.30\n16197.70\n20393.90\n24408.27\n48057.60\n‚ñá‚ñá‚ñÉ‚ñÅ‚ñÅ"
  },
  {
    "objectID": "slides/04-get.html#always-check-for-missing-values",
    "href": "slides/04-get.html#always-check-for-missing-values",
    "title": "Get and Clean Data",
    "section": "Always check for missing values",
    "text": "Always check for missing values\nskimr::skim() shows you how many values are missing in your dataset:\n\n\nHow many missing value are there?\nWhere do they occur?"
  },
  {
    "objectID": "slides/04-get.html#section-6",
    "href": "slides/04-get.html#section-6",
    "title": "Get and Clean Data",
    "section": "",
    "text": "A more formal way to check for missing values.\n\npangaea_data %>% \n  summarise(\n    across(\n      .fns = ~is.na(.) %>% sum()\n    )\n  ) %>% \n  glimpse()\n\nRows: 1\nColumns: 19\n$ Event                      <int> 0\n$ Latitude                   <int> 0\n$ Longitude                  <int> 0\n$ `Elevation [m]`            <int> 0\n$ `Sample label (barite-Sr)` <int> 0\n$ `Samp type`                <int> 0\n$ `Depth [m]`                <int> 0\n$ `Age [ka BP]`              <int> 0\n$ `CaCO3 [%]`                <int> 0\n$ `Ba [¬µg/g] (Leachate)`     <int> 0\n$ `Sr [¬µg/g] (Leachate)`     <int> 0\n$ `Ca [¬µg/g] (Leachate)`     <int> 0\n$ `Al [¬µg/g] (Leachate)`     <int> 0\n$ `Fe [¬µg/g] (Leachate)`     <int> 0\n$ `Ba [¬µg/g] (Residue)`      <int> 0\n$ `Sr [¬µg/g] (Residue)`      <int> 0\n$ `Ca [¬µg/g] (Residue)`      <int> 0\n$ `Al [¬µg/g] (Residue)`      <int> 0\n$ `Fe [¬µg/g] (Residue)`      <int> 0"
  },
  {
    "objectID": "slides/04-get.html#quick-checklist-when-you-read-new-data-into-r",
    "href": "slides/04-get.html#quick-checklist-when-you-read-new-data-into-r",
    "title": "Get and Clean Data",
    "section": "Quick checklist when you read new data into R",
    "text": "Quick checklist when you read new data into R\n\n\nCheck for missing values.\nCheck the column types, are they what you expect?\nCheck the row number and the column names.\nOptional, check the head() and the tail() of the file.\n\n\nNow let‚Äôs tidy the data."
  },
  {
    "objectID": "slides/04-get.html#exercise-1",
    "href": "slides/04-get.html#exercise-1",
    "title": "Get and Clean Data",
    "section": "Exercise",
    "text": "Exercise\nTidytuesday is a weekly data project aimed at learning, collaborating and networking the R ecosystem.\nFind this week‚Äôs dataset and read it in R. Run the checklist from the previous slide on the data that you‚Äôve read.\nIf you are donw early, proceed reading data from the previous week or find a colleague to help.\nCheck Tidytuesday submissions on Twitter with the hashtag #TidyTuesday\n\n\n2022 CBSER Summer School"
  },
  {
    "objectID": "slides/05-clean.html#which-dataset-is-tidy",
    "href": "slides/05-clean.html#which-dataset-is-tidy",
    "title": "Clean and Tidy Data",
    "section": "Which Dataset is Tidy?",
    "text": "Which Dataset is Tidy?\nA common practical way to structure (empirical) data.\n\n\nEvery column is a variable.\nEvery row is an observation.\nEvery cell is a single value.\n(Every observational unit is in its own table).\n\n\nPlus: fixed variables should come first, followed by measured variables.\nReference: An Introduction to Tidy Data"
  },
  {
    "objectID": "slides/05-clean.html#section",
    "href": "slides/05-clean.html#section",
    "title": "Clean and Tidy Data",
    "section": "",
    "text": "Joey\n\n\nMonica\n\n\nRachel\n\n\nPhoebe\n\n\nRoss\n\n\nChandler\n\n\nTribbiani\n\n\nGeller\n\n\nGreen\n\n\nBuffay\n\n\nGeller\n\n\nBing\n\n\n27\n\n\n24\n\n\n23\n\n\n27\n\n\n26\n\n\n26"
  },
  {
    "objectID": "slides/05-clean.html#semantics-of-tidy-data",
    "href": "slides/05-clean.html#semantics-of-tidy-data",
    "title": "Clean and Tidy Data",
    "section": "Semantics of (tidy) Data",
    "text": "Semantics of (tidy) Data\nAlways quoting the Tidy Data article:\n\nA dataset is a collection of values.\nEvery value belongs to a variable and an observation.\nA variable contains all values that measure the same underlying attribute (like height, temperature, duration) across units.\nAn observation contains all values measured on the same unit (like a person, or a day, or a race) across attributes"
  },
  {
    "objectID": "slides/05-clean.html#tools-tidy-data-with-tidyr",
    "href": "slides/05-clean.html#tools-tidy-data-with-tidyr",
    "title": "Clean and Tidy Data",
    "section": "Tools: Tidy data with Tidyr",
    "text": "Tools: Tidy data with Tidyr\n\n\n\n\nTidyr provides functions for:\n\nPivoting data.\nRectangling data.\nNesting data.\nCombining and splitting columns.\nMake missing values explicit."
  },
  {
    "objectID": "slides/05-clean.html#pangea-data",
    "href": "slides/05-clean.html#pangea-data",
    "title": "Clean and Tidy Data",
    "section": "Pangea Data",
    "text": "Pangea Data\nRemember the dataset from Pangaea?\n\npangaea_filename <- 'Dataset_S2_HCl-leaching.tab'\n\npangaea_path <- here('data-int/Wu-etal_2022/datasets', pangaea_filename)\n\npangaea_data <- \n  pangaea_path %>% \n  read_delim(delim = '\\t',\n             skip = 49)\n\n\npangaea_data %>% \n  glimpse()\n\nRows: 128\nColumns: 19\n$ Event                      <chr> \"SL73BC\", \"SL73BC\", \"SL73BC\", \"SL73BC\", \"SL‚Ä¶\n$ Latitude                   <dbl> 39.6617, 39.6617, 39.6617, 39.6617, 39.6617‚Ä¶\n$ Longitude                  <dbl> 24.5117, 24.5117, 24.5117, 24.5117, 24.5117‚Ä¶\n$ `Elevation [m]`            <dbl> -339, -339, -339, -339, -339, -339, -339, -‚Ä¶\n$ `Sample label (barite-Sr)` <chr> \"SL73-1\", \"SL73-2\", \"SL73-3\", \"SL73-4\", \"SL‚Ä¶\n$ `Samp type`                <chr> \"non-S1\", \"non-S1\", \"non-S1\", \"S1b\", \"S1b\",‚Ä¶\n$ `Depth [m]`                <dbl> 0.0045, 0.0465, 0.0665, 0.1215, 0.1765, 0.1‚Ä¶\n$ `Age [ka BP]`              <dbl> 1.66, 3.13, 4.13, 5.75, 7.30, 7.78, 8.65, 9‚Ä¶\n$ `CaCO3 [%]`                <dbl> 61.5, 55.1, 53.0, 43.4, 41.8, 42.3, 42.6, 3‚Ä¶\n$ `Ba [¬µg/g] (Leachate)`     <dbl> 72.6, 64.3, 37.4, 63.5, 101.0, 141.0, 75.2,‚Ä¶\n$ `Sr [¬µg/g] (Leachate)`     <dbl> 767, 681, 690, 552, 527, 528, 551, 482, 391‚Ä¶\n$ `Ca [¬µg/g] (Leachate)`     <dbl> 188951.9, 163260.4, 162188.7, 125937.6, 124‚Ä¶\n$ `Al [¬µg/g] (Leachate)`     <dbl> 10612.7, 11428.4, 5463.0, 3261.5, 2121.7, 1‚Ä¶\n$ `Fe [¬µg/g] (Leachate)`     <dbl> 5935.0, 6814.3, 2465.7, 3936.8, 189.6, 7711‚Ä¶\n$ `Ba [¬µg/g] (Residue)`      <dbl> 171.0, 198.0, 251.0, 290.0, 315.0, 259.0, 3‚Ä¶\n$ `Sr [¬µg/g] (Residue)`      <dbl> 66.6, 71.3, 90.3, 99.8, 106.0, 90.7, 108.0,‚Ä¶\n$ `Ca [¬µg/g] (Residue)`      <dbl> 2315.5, 2369.6, 3007.7, 3447.9, 3713.2, 331‚Ä¶\n$ `Al [¬µg/g] (Residue)`      <dbl> 29262.5, 35561.4, 45862.4, 52485.6, 55083.0‚Ä¶\n$ `Fe [¬µg/g] (Residue)`      <dbl> 14834.8, 18301.4, 24534.5, 30745.3, 28532.2‚Ä¶"
  },
  {
    "objectID": "slides/05-clean.html#clean-the-column-names-with-janitor",
    "href": "slides/05-clean.html#clean-the-column-names-with-janitor",
    "title": "Clean and Tidy Data",
    "section": "Clean the column names with Janitor",
    "text": "Clean the column names with Janitor\nwe can remove capitalization, spaces, and strange characters from the column names with the function clean_names() from the Janitor Package.\n\npangaea_data <- \n  pangaea_data %>% \n  janitor::clean_names()\n\npangaea_data %>%\n  glimpse()\n\nRows: 128\nColumns: 19\n$ event                  <chr> \"SL73BC\", \"SL73BC\", \"SL73BC\", \"SL73BC\", \"SL73BC‚Ä¶\n$ latitude               <dbl> 39.6617, 39.6617, 39.6617, 39.6617, 39.6617, 39‚Ä¶\n$ longitude              <dbl> 24.5117, 24.5117, 24.5117, 24.5117, 24.5117, 24‚Ä¶\n$ elevation_m            <dbl> -339, -339, -339, -339, -339, -339, -339, -339,‚Ä¶\n$ sample_label_barite_sr <chr> \"SL73-1\", \"SL73-2\", \"SL73-3\", \"SL73-4\", \"SL73-5‚Ä¶\n$ samp_type              <chr> \"non-S1\", \"non-S1\", \"non-S1\", \"S1b\", \"S1b\", \"S1‚Ä¶\n$ depth_m                <dbl> 0.0045, 0.0465, 0.0665, 0.1215, 0.1765, 0.1915,‚Ä¶\n$ age_ka_bp              <dbl> 1.66, 3.13, 4.13, 5.75, 7.30, 7.78, 8.65, 9.94,‚Ä¶\n$ ca_co3_percent         <dbl> 61.5, 55.1, 53.0, 43.4, 41.8, 42.3, 42.6, 39.1,‚Ä¶\n$ ba_mg_g_leachate       <dbl> 72.6, 64.3, 37.4, 63.5, 101.0, 141.0, 75.2, 99.‚Ä¶\n$ sr_mg_g_leachate       <dbl> 767, 681, 690, 552, 527, 528, 551, 482, 391, 70‚Ä¶\n$ ca_mg_g_leachate       <dbl> 188951.9, 163260.4, 162188.7, 125937.6, 124733.‚Ä¶\n$ al_mg_g_leachate       <dbl> 10612.7, 11428.4, 5463.0, 3261.5, 2121.7, 12740‚Ä¶\n$ fe_mg_g_leachate       <dbl> 5935.0, 6814.3, 2465.7, 3936.8, 189.6, 7711.3, ‚Ä¶\n$ ba_mg_g_residue        <dbl> 171.0, 198.0, 251.0, 290.0, 315.0, 259.0, 310.0‚Ä¶\n$ sr_mg_g_residue        <dbl> 66.6, 71.3, 90.3, 99.8, 106.0, 90.7, 108.0, 96.‚Ä¶\n$ ca_mg_g_residue        <dbl> 2315.5, 2369.6, 3007.7, 3447.9, 3713.2, 3316.7,‚Ä¶\n$ al_mg_g_residue        <dbl> 29262.5, 35561.4, 45862.4, 52485.6, 55083.0, 44‚Ä¶\n$ fe_mg_g_residue        <dbl> 14834.8, 18301.4, 24534.5, 30745.3, 28532.2, 22‚Ä¶\n\n\nWatch out: Janitor transforms ¬µ into m (so micrograms become milligrams)."
  },
  {
    "objectID": "slides/05-clean.html#place-fixed-variables-in-the-first-columns",
    "href": "slides/05-clean.html#place-fixed-variables-in-the-first-columns",
    "title": "Clean and Tidy Data",
    "section": "Place fixed variables in the first columns",
    "text": "Place fixed variables in the first columns\nWhich column is a fixed variable?\nI‚Äôm not sure if ca_co3_percent is a measured variable, and if it belongs to another informational unit.\nBesides that, the fixed variables are already in front."
  },
  {
    "objectID": "slides/05-clean.html#there-are-values-stored-in-the-column-names",
    "href": "slides/05-clean.html#there-are-values-stored-in-the-column-names",
    "title": "Clean and Tidy Data",
    "section": "There are values stored in the column names",
    "text": "There are values stored in the column names\nLet‚Äôs pivot the measured variables.\n\npangaea_long <- \n  pangaea_data %>% \n  pivot_longer(\n    cols = contains(match = c('leachate', 'residue')),\n    values_to = 'concentration',\n    names_to = 'element'\n  )\n\npangaea_long\n\n# A tibble: 1,280 √ó 11\n   event latit‚Ä¶¬π longi‚Ä¶¬≤ eleva‚Ä¶¬≥ sampl‚Ä¶‚Å¥ samp_‚Ä¶‚Åµ depth_m age_k‚Ä¶‚Å∂ ca_co‚Ä¶‚Å∑ element\n   <chr>   <dbl>   <dbl>   <dbl> <chr>   <chr>     <dbl>   <dbl>   <dbl> <chr>  \n 1 SL73‚Ä¶    39.7    24.5    -339 SL73-1  non-S1   0.0045    1.66    61.5 ba_mg_‚Ä¶\n 2 SL73‚Ä¶    39.7    24.5    -339 SL73-1  non-S1   0.0045    1.66    61.5 sr_mg_‚Ä¶\n 3 SL73‚Ä¶    39.7    24.5    -339 SL73-1  non-S1   0.0045    1.66    61.5 ca_mg_‚Ä¶\n 4 SL73‚Ä¶    39.7    24.5    -339 SL73-1  non-S1   0.0045    1.66    61.5 al_mg_‚Ä¶\n 5 SL73‚Ä¶    39.7    24.5    -339 SL73-1  non-S1   0.0045    1.66    61.5 fe_mg_‚Ä¶\n 6 SL73‚Ä¶    39.7    24.5    -339 SL73-1  non-S1   0.0045    1.66    61.5 ba_mg_‚Ä¶\n 7 SL73‚Ä¶    39.7    24.5    -339 SL73-1  non-S1   0.0045    1.66    61.5 sr_mg_‚Ä¶\n 8 SL73‚Ä¶    39.7    24.5    -339 SL73-1  non-S1   0.0045    1.66    61.5 ca_mg_‚Ä¶\n 9 SL73‚Ä¶    39.7    24.5    -339 SL73-1  non-S1   0.0045    1.66    61.5 al_mg_‚Ä¶\n10 SL73‚Ä¶    39.7    24.5    -339 SL73-1  non-S1   0.0045    1.66    61.5 fe_mg_‚Ä¶\n# ‚Ä¶ with 1,270 more rows, 1 more variable: concentration <dbl>, and abbreviated\n#   variable names ¬π‚Äãlatitude, ¬≤‚Äãlongitude, ¬≥‚Äãelevation_m,\n#   ‚Å¥‚Äãsample_label_barite_sr, ‚Åµ‚Äãsamp_type, ‚Å∂‚Äãage_ka_bp, ‚Å∑‚Äãca_co3_percent\n# ‚Ñπ Use `print(n = ...)` to see more rows, and `colnames()` to see all variable names\n\npangaea_long %>% glimpse()\n\nRows: 1,280\nColumns: 11\n$ event                  <chr> \"SL73BC\", \"SL73BC\", \"SL73BC\", \"SL73BC\", \"SL73BC‚Ä¶\n$ latitude               <dbl> 39.6617, 39.6617, 39.6617, 39.6617, 39.6617, 39‚Ä¶\n$ longitude              <dbl> 24.5117, 24.5117, 24.5117, 24.5117, 24.5117, 24‚Ä¶\n$ elevation_m            <dbl> -339, -339, -339, -339, -339, -339, -339, -339,‚Ä¶\n$ sample_label_barite_sr <chr> \"SL73-1\", \"SL73-1\", \"SL73-1\", \"SL73-1\", \"SL73-1‚Ä¶\n$ samp_type              <chr> \"non-S1\", \"non-S1\", \"non-S1\", \"non-S1\", \"non-S1‚Ä¶\n$ depth_m                <dbl> 0.0045, 0.0045, 0.0045, 0.0045, 0.0045, 0.0045,‚Ä¶\n$ age_ka_bp              <dbl> 1.66, 1.66, 1.66, 1.66, 1.66, 1.66, 1.66, 1.66,‚Ä¶\n$ ca_co3_percent         <dbl> 61.5, 61.5, 61.5, 61.5, 61.5, 61.5, 61.5, 61.5,‚Ä¶\n$ element                <chr> \"ba_mg_g_leachate\", \"sr_mg_g_leachate\", \"ca_mg_‚Ä¶\n$ concentration          <dbl> 72.6, 767.0, 188951.9, 10612.7, 5935.0, 171.0, ‚Ä¶\n\n\nWhen we pivot data we move them from a wide to a long format and vice-versa.\n\n(Image from Alisson Horst, check her other stats illustrations here)"
  },
  {
    "objectID": "slides/05-clean.html#one-cell-contains-multiple-values",
    "href": "slides/05-clean.html#one-cell-contains-multiple-values",
    "title": "Clean and Tidy Data",
    "section": "One cell contains multiple values",
    "text": "One cell contains multiple values\nNow it‚Äôs clear that element contains more than one value.\nFor example: ba_mg_g_leachate is not a single values and could be split into:\n\nelement: ba.\nunit: mg_g.\nfraction: leachate.\n\nLet‚Äôs split this column at the _ and reconstitute it in a tidy way\n\npangaea_tidy <- \n  pangaea_long %>% \n  separate(element, into = c('element', 'unit_num', 'unit_dem', 'fraction'), sep = '_') %>% \n  unite(col = 'unit', unit_num:unit_dem, sep = '_')"
  },
  {
    "objectID": "slides/05-clean.html#exercise",
    "href": "slides/05-clean.html#exercise",
    "title": "Clean and Tidy Data",
    "section": "Exercise",
    "text": "Exercise\nTidy last week‚Äôs schedule.\n\n\n\n2022 CBSER Summer School"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Data Analysis in R",
    "section": "",
    "text": "Hands-on Lessons\n\nMeet R\nManipulate Data\nVisualize Data\nGet Data into R\nClean Data with R"
  }
]