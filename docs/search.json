[
  {
    "objectID": "slides/00-intro.html#the-r-project-for-statistical-computing",
    "href": "slides/00-intro.html#the-r-project-for-statistical-computing",
    "title": "About R",
    "section": "The R Project for Statistical Computing",
    "text": "The R Project for Statistical Computing\nhttps://www.r-project.org/\n\nStarted in 1991 by Ross Ihaka and Robert Gentleman at the University of Auckland (NZ).\nMade open source in 1995.\nOfficial ‚Äúpeer reviewed‚Äù packages are hosted on CRAN.\nHas multiple ‚Äúuniverses‚Äù of packages, including Bioconductor dedicated to bioinformatics, and the Tidyverse for Data Science.\nGreat for analyzing data, for statistics, for research and for communicating data to others."
  },
  {
    "objectID": "slides/00-intro.html#a-bit-more-on-r",
    "href": "slides/00-intro.html#a-bit-more-on-r",
    "title": "About R",
    "section": "A bit more on R",
    "text": "A bit more on R\n\nWe are going to use the Tidyverse. But you might have to learn also a bit of the original idiom, now called base R, which sometimes helps if you have to programm your own functions.\nWe are going to use R in visual studio code as you did for Python, but you might want to try out also Rstudio, which is a great open source IDE dedicated to R."
  },
  {
    "objectID": "slides/00-intro.html#as-always-stackoverflow-is-your-friend",
    "href": "slides/00-intro.html#as-always-stackoverflow-is-your-friend",
    "title": "About R",
    "section": "As always, stackoverflow is your friend",
    "text": "As always, stackoverflow is your friend\nIf you need help, as always, Google and Stackoverflow are your friends.\n\nBut sometimes you need to learn on a support that is structured, nuanced and detailed‚Ä¶ üìö"
  },
  {
    "objectID": "slides/00-intro.html#a-helpful-and-welcoming-community",
    "href": "slides/00-intro.html#a-helpful-and-welcoming-community",
    "title": "About R",
    "section": "A helpful and welcoming community üìö",
    "text": "A helpful and welcoming community üìö\nOne of the things that makes R great is its community of users and programmer.\nIt is open source and open access oriented and highly dedicated to lowering the barrier to learning R and data science, and make their tools available and usable to everyone."
  },
  {
    "objectID": "slides/00-intro.html#open-books",
    "href": "slides/00-intro.html#open-books",
    "title": "About R",
    "section": "Open Books",
    "text": "Open Books\n\n\nBookdown: a package and a repository for open access books about R."
  },
  {
    "objectID": "slides/00-intro.html#open-books-1",
    "href": "slides/00-intro.html#open-books-1",
    "title": "About R",
    "section": "Open Books",
    "text": "Open Books\n\n\n\nR for Data Science - A gentle introducion to data science with the Tidyverse.\nIntroduction to Data Science - A detailed introduction to Data science by a biostatistician.\nAdvanced R - All you need to know about programming in R.\nIntroduction to Statistical Learning - A detailed introductio to modern statistical methods, implemented in R.\n\n\n\nText Mining in R Dealing with natural language and written text in R.\nTidy Modeling with R R Machine learning framework.\nDesigning and Building Data Science Solutions how to set up a data science project."
  },
  {
    "objectID": "slides/00-intro.html#more",
    "href": "slides/00-intro.html#more",
    "title": "About R",
    "section": "More ‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è",
    "text": "More ‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è\n\nSlack Spaces\n\n\nR for Data Science Community a slack chanel for R networking.\n\n\nBlogs\n\nAlison Hill‚Äôs Blog; great for everything Rmarkdown.\nSimply Statistics; modern statistics and R.\nJulia Silge‚Äôs Blog; learn about R machine learning framework from one of its main developer.\nGina Reynolds Flipbooks; for more tidyverse and Rmarkdown mastery.\nFornkonstin; at the interface between math, art and coding.\nData imaginist; more art in R üé®.\n\nCollaborative Challenges\n\nTidytuesday Tidy and visualize a dataset and share your results with the R community every week on Tuesday.\n\n\n\n\n2022 CBSER Summer School"
  },
  {
    "objectID": "slides/01-meet-r.html#r-understands-you",
    "href": "slides/01-meet-r.html#r-understands-you",
    "title": "Meet R",
    "section": "R understands you",
    "text": "R understands you\nWrite someting at the R console:\n\nA simple number‚Ä¶\n\n2\n\n[1] 2\n\n\n\n\nSome operation‚Ä¶\n\n3 + 7\n\n[1] 10\n\n\n\n\nText must be quoted‚Ä¶\n\n'hello'\n\n[1] \"hello\"\n\n\n\n\nOtherwise it is interpreted as the name of a variable:\n\nmy_var\n\nError in eval(expr, envir, enclos): object 'my_var' not found"
  },
  {
    "objectID": "slides/01-meet-r.html#you-can-define-variables",
    "href": "slides/01-meet-r.html#you-can-define-variables",
    "title": "Meet R",
    "section": "You can define variables",
    "text": "You can define variables\nYou can define a variable with the operator <- .\n\n# a numeric variable\nthis_year <- 2022\n \n# a character variable\nitalian_greetings <- 'ciao'\n\n\nIf you type the name of a variable without quotes, r prints its value:\n\nthis_year\n\n[1] 2022\n\n\n\nitalian_greetings\n\n[1] \"ciao\"\n\n\n\n\nUse the keyboard shortcut alt/option + - to write the assign operator <- more easily."
  },
  {
    "objectID": "slides/01-meet-r.html#data-types",
    "href": "slides/01-meet-r.html#data-types",
    "title": "Meet R",
    "section": "Data Types",
    "text": "Data Types\nWhen you define an object R guesses its type.\n\ntypeof() returns the internal type of an object.\n\ntypeof(this_year)\n\n[1] \"double\"\n\ntypeof(italian_greetings)\n\n[1] \"character\"\n\n\n\n\nclass() returns a the class attribute of an object.\n\nclass(this_year)\n\n[1] \"numeric\"\n\nclass(italian_greetings)\n\n[1] \"character\""
  },
  {
    "objectID": "slides/01-meet-r.html#everything-in-r-is-an-object",
    "href": "slides/01-meet-r.html#everything-in-r-is-an-object",
    "title": "Meet R",
    "section": "Everything in R is an object",
    "text": "Everything in R is an object\nAnd objects have a types.\n\n\nclass(2)\n\n[1] \"numeric\"\n\n\n\n\n\nclass('hello')\n\n[1] \"character\"\n\n\n\n\n\nclass(FALSE)\n\n[1] \"logical\"\n\n\n\n\n\nclass(mean)\n\n[1] \"function\"\n\n\n\n\n\nclass(`<-`)\n\n[1] \"function\"\n\n\n\n\n\nclass(Sys.Date())\n\n[1] \"Date\""
  },
  {
    "objectID": "slides/01-meet-r.html#exercise",
    "href": "slides/01-meet-r.html#exercise",
    "title": "Meet R",
    "section": "Exercise",
    "text": "Exercise\n\nUse the function c(arg_1, arg_2, ..., arg_n) to put together in a vector many objects that you expect to have the same class. Try with different ones.\nNow do the same, but try to put together in a vector data with different types, what happened?\n\n\n\nLearn more about vectors and types at Advanced R."
  },
  {
    "objectID": "slides/01-meet-r.html#vectors-store-one-or-more-data-point-of-the-same-class",
    "href": "slides/01-meet-r.html#vectors-store-one-or-more-data-point-of-the-same-class",
    "title": "Meet R",
    "section": "Vectors store one or more data point of the same class",
    "text": "Vectors store one or more data point of the same class\n\nnum_vector <- c(1, 3, 5, 3, 6)\n\ncharacter_vector <- c('Hi', ',', 'I', 'am', 'a', 'character', 'vector')\n\nlogical_vector <- c(TRUE, FALSE, FALSE, TRUE, FALSE)\n\n\n\n\nclass(num_vector)\n\n[1] \"numeric\"\n\nclass(character_vector)\n\n[1] \"character\"\n\nclass(logical_vector)\n\n[1] \"logical\""
  },
  {
    "objectID": "slides/01-meet-r.html#classes-can-be-coherced",
    "href": "slides/01-meet-r.html#classes-can-be-coherced",
    "title": "Meet R",
    "section": "Classes can be coherced",
    "text": "Classes can be coherced\nTRUE and FALSE can be coerced into numeric zeroes and ones, or also into characters.\n\nc(2, TRUE, 5, FALSE, 4)\n\n[1] 2 1 5 0 4\n\n\n\nNumbers can be coerced into characters.\n\nc('a', TRUE, 5, FALSE, 4)\n\n[1] \"a\"     \"TRUE\"  \"5\"     \"FALSE\" \"4\""
  },
  {
    "objectID": "slides/01-meet-r.html#classes-can-be-coherced-1",
    "href": "slides/01-meet-r.html#classes-can-be-coherced-1",
    "title": "Meet R",
    "section": "Classes can be coherced",
    "text": "Classes can be coherced\nClasses can be coerced explicitly.\n\nlogical_vector <- c(T, F, F, T, T, F)\nlogical_vector\n\n[1]  TRUE FALSE FALSE  TRUE  TRUE FALSE\n\nas.numeric(logical_vector)\n\n[1] 1 0 0 1 1 0\n\nas.character(logical_vector)\n\n[1] \"TRUE\"  \"FALSE\" \"FALSE\" \"TRUE\"  \"TRUE\"  \"FALSE\"\n\n\n\nIf an element can‚Äôt be coerced to the desired class, R returns a missing value (NA).\n\nas.numeric(c('1', 'two', '3'))\n\n[1]  1 NA  3"
  },
  {
    "objectID": "slides/01-meet-r.html#atomic-elements-are-vectors-of-length-1",
    "href": "slides/01-meet-r.html#atomic-elements-are-vectors-of-length-1",
    "title": "Meet R",
    "section": "Atomic elements are vectors of length 1",
    "text": "Atomic elements are vectors of length 1\n\nshort_vector <- 1\nlong_vector <- 1:50\n\n\n\nshort_vector\n\n[1] 1\n\nlong_vector\n\n [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25\n[26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50\n\n\n\n\n\nclass(short_vector)\n\n[1] \"numeric\"\n\nclass(long_vector)\n\n[1] \"integer\"\n\n\n\n\n\nlength(short_vector)\n\n[1] 1\n\nlength(long_vector)\n\n[1] 50"
  },
  {
    "objectID": "slides/01-meet-r.html#most-functions-in-r-are-vectorized",
    "href": "slides/01-meet-r.html#most-functions-in-r-are-vectorized",
    "title": "Meet R",
    "section": "Most functions in R are vectorized",
    "text": "Most functions in R are vectorized\nIf I want to apply an operation over a vector, I can just write it as it is without a for loop. For example:\n\nAdd an integer to every number in a vector:\n\nlong_vector + 100\n\n [1] 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119\n[20] 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138\n[39] 139 140 141 142 143 144 145 146 147 148 149 150\n\n\n\n\nMultiply every number in a vector by an integer:\n\nlong_vector * 2\n\n [1]   2   4   6   8  10  12  14  16  18  20  22  24  26  28  30  32  34  36  38\n[20]  40  42  44  46  48  50  52  54  56  58  60  62  64  66  68  70  72  74  76\n[39]  78  80  82  84  86  88  90  92  94  96  98 100"
  },
  {
    "objectID": "slides/01-meet-r.html#most-functions-in-r-are-vectorized-1",
    "href": "slides/01-meet-r.html#most-functions-in-r-are-vectorized-1",
    "title": "Meet R",
    "section": "Most functions in R are vectorized",
    "text": "Most functions in R are vectorized\nTake the square root of every number in a vector:\n\nsqrt(long_vector)\n\n [1] 1.000000 1.414214 1.732051 2.000000 2.236068 2.449490 2.645751 2.828427\n [9] 3.000000 3.162278 3.316625 3.464102 3.605551 3.741657 3.872983 4.000000\n[17] 4.123106 4.242641 4.358899 4.472136 4.582576 4.690416 4.795832 4.898979\n[25] 5.000000 5.099020 5.196152 5.291503 5.385165 5.477226 5.567764 5.656854\n[33] 5.744563 5.830952 5.916080 6.000000 6.082763 6.164414 6.244998 6.324555\n[41] 6.403124 6.480741 6.557439 6.633250 6.708204 6.782330 6.855655 6.928203\n[49] 7.000000 7.071068"
  },
  {
    "objectID": "slides/01-meet-r.html#exercise-1",
    "href": "slides/01-meet-r.html#exercise-1",
    "title": "Meet R",
    "section": "Exercise",
    "text": "Exercise\n\nGenerate a vector of 100 (semi-) random numbers with a normal distribution.\nUse a for loop (even if you don‚Äôt need one) to multiply eachs number in the vector by 2.\n\n\n\nFor loops in R according to Roger D. Peng."
  },
  {
    "objectID": "slides/01-meet-r.html#extra---lists",
    "href": "slides/01-meet-r.html#extra---lists",
    "title": "Meet R",
    "section": "Extra - Lists",
    "text": "Extra - Lists\nIf you need to collect together and store data of different types, you can use lists.\n\nmy_list <- list(\n  'hello',\n  1,\n  FALSE,\n  1:25\n)\n\nmy_list\n\n[[1]]\n[1] \"hello\"\n\n[[2]]\n[1] 1\n\n[[3]]\n[1] FALSE\n\n[[4]]\n [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25"
  },
  {
    "objectID": "slides/01-meet-r.html#can-we-use-vectors-to-build-a-dataframe",
    "href": "slides/01-meet-r.html#can-we-use-vectors-to-build-a-dataframe",
    "title": "Meet R",
    "section": "Can we use vectors to build a dataframe?",
    "text": "Can we use vectors to build a dataframe?\nWe learned that vector contain elements of the same type, for example, numerics, character, logical.\n\nAccording to the Tidy Data theory, in rectangular dataframes:\n\n\nEach row is an observation.\nEach column is a variable.\n\n\nBy definiton variables of your data, must be made by atomic elements of the same type. So we can use vectors of the same length to build the columns of a dataframe.\nLet‚Äôs try."
  },
  {
    "objectID": "slides/01-meet-r.html#and-we-have-data",
    "href": "slides/01-meet-r.html#and-we-have-data",
    "title": "Meet R",
    "section": "And‚Ä¶ We have data",
    "text": "And‚Ä¶ We have data\nLet‚Äôs prepare three vectors with the first observations of iris and use them to make a dataframe.\n\nsepal_length <- c(5.1, 7.0, 6.3)\n\nsepal_width <- c(3.5, 3.2, 3.3)\n\nspecies <- c('setosa', 'versicolor', 'virginica')\n\niris_simple <- \n  data.frame(\n    species,\n    sepal_length,\n    sepal_width\n  )\n\niris_simple\n\n     species sepal_length sepal_width\n1     setosa          5.1         3.5\n2 versicolor          7.0         3.2\n3  virginica          6.3         3.3"
  },
  {
    "objectID": "slides/01-meet-r.html#and-we-have-data-1",
    "href": "slides/01-meet-r.html#and-we-have-data-1",
    "title": "Meet R",
    "section": "And‚Ä¶ We have data",
    "text": "And‚Ä¶ We have data\nThe variable iris_simple points to a dataframe that stores rectangular data.\n\nclass(iris_simple)\n\n[1] \"data.frame\"\n\n\n\ndim(iris_simple)\n\n[1] 3 3\n\n\n\nWe can access its columns with the operator $. Each column is a vector.\n\niris_simple$sepal_length\n\n[1] 5.1 7.0 6.3\n\n\n\nclass(iris_simple$sepal_length)\n\n[1] \"numeric\"\n\n\n\nis.vector(iris_simple$sepal_length)\n\n[1] TRUE"
  },
  {
    "objectID": "slides/01-meet-r.html#section",
    "href": "slides/01-meet-r.html#section",
    "title": "Meet R",
    "section": "",
    "text": "Now that we have data, let‚Äôs take our first stroll into the Tidyverse."
  },
  {
    "objectID": "slides/01-meet-r.html#tibbles-a-modern-take-on-dataframes",
    "href": "slides/01-meet-r.html#tibbles-a-modern-take-on-dataframes",
    "title": "Meet R",
    "section": "Tibbles: a modern take on dataframes",
    "text": "Tibbles: a modern take on dataframes\nLet‚Äôs attach the whole Tidyverse, which includes also the Tibble package‚Ä¶\n\nlibrary(tidyverse)\n\n\n‚Ä¶and convert our dataframe iris_simple into a tibble.\n\niris_simple <- as_tibble(iris_simple)\n\n\n\nThe print method for a tibble, provides a handy and informative output.\n\niris_simple\n\n# A tibble: 3 √ó 3\n  species    sepal_length sepal_width\n  <chr>             <dbl>       <dbl>\n1 setosa              5.1         3.5\n2 versicolor          7           3.2\n3 virginica           6.3         3.3"
  },
  {
    "objectID": "slides/01-meet-r.html#tibbles-a-modern-take-on-dataframes-1",
    "href": "slides/01-meet-r.html#tibbles-a-modern-take-on-dataframes-1",
    "title": "Meet R",
    "section": "Tibbles: a modern take on dataframes",
    "text": "Tibbles: a modern take on dataframes\nLet‚Äôs compare the print method for the dataframe iris, before and after we convert it to a tibble.\n\niris\n\n    Sepal.Length Sepal.Width Petal.Length Petal.Width    Species\n1            5.1         3.5          1.4         0.2     setosa\n2            4.9         3.0          1.4         0.2     setosa\n3            4.7         3.2          1.3         0.2     setosa\n4            4.6         3.1          1.5         0.2     setosa\n5            5.0         3.6          1.4         0.2     setosa\n6            5.4         3.9          1.7         0.4     setosa\n7            4.6         3.4          1.4         0.3     setosa\n8            5.0         3.4          1.5         0.2     setosa\n9            4.4         2.9          1.4         0.2     setosa\n10           4.9         3.1          1.5         0.1     setosa\n11           5.4         3.7          1.5         0.2     setosa\n12           4.8         3.4          1.6         0.2     setosa\n13           4.8         3.0          1.4         0.1     setosa\n14           4.3         3.0          1.1         0.1     setosa\n15           5.8         4.0          1.2         0.2     setosa\n16           5.7         4.4          1.5         0.4     setosa\n17           5.4         3.9          1.3         0.4     setosa\n18           5.1         3.5          1.4         0.3     setosa\n19           5.7         3.8          1.7         0.3     setosa\n20           5.1         3.8          1.5         0.3     setosa\n21           5.4         3.4          1.7         0.2     setosa\n22           5.1         3.7          1.5         0.4     setosa\n23           4.6         3.6          1.0         0.2     setosa\n24           5.1         3.3          1.7         0.5     setosa\n25           4.8         3.4          1.9         0.2     setosa\n26           5.0         3.0          1.6         0.2     setosa\n27           5.0         3.4          1.6         0.4     setosa\n28           5.2         3.5          1.5         0.2     setosa\n29           5.2         3.4          1.4         0.2     setosa\n30           4.7         3.2          1.6         0.2     setosa\n31           4.8         3.1          1.6         0.2     setosa\n32           5.4         3.4          1.5         0.4     setosa\n33           5.2         4.1          1.5         0.1     setosa\n34           5.5         4.2          1.4         0.2     setosa\n35           4.9         3.1          1.5         0.2     setosa\n36           5.0         3.2          1.2         0.2     setosa\n37           5.5         3.5          1.3         0.2     setosa\n38           4.9         3.6          1.4         0.1     setosa\n39           4.4         3.0          1.3         0.2     setosa\n40           5.1         3.4          1.5         0.2     setosa\n41           5.0         3.5          1.3         0.3     setosa\n42           4.5         2.3          1.3         0.3     setosa\n43           4.4         3.2          1.3         0.2     setosa\n44           5.0         3.5          1.6         0.6     setosa\n45           5.1         3.8          1.9         0.4     setosa\n46           4.8         3.0          1.4         0.3     setosa\n47           5.1         3.8          1.6         0.2     setosa\n48           4.6         3.2          1.4         0.2     setosa\n49           5.3         3.7          1.5         0.2     setosa\n50           5.0         3.3          1.4         0.2     setosa\n51           7.0         3.2          4.7         1.4 versicolor\n52           6.4         3.2          4.5         1.5 versicolor\n53           6.9         3.1          4.9         1.5 versicolor\n54           5.5         2.3          4.0         1.3 versicolor\n55           6.5         2.8          4.6         1.5 versicolor\n56           5.7         2.8          4.5         1.3 versicolor\n57           6.3         3.3          4.7         1.6 versicolor\n58           4.9         2.4          3.3         1.0 versicolor\n59           6.6         2.9          4.6         1.3 versicolor\n60           5.2         2.7          3.9         1.4 versicolor\n61           5.0         2.0          3.5         1.0 versicolor\n62           5.9         3.0          4.2         1.5 versicolor\n63           6.0         2.2          4.0         1.0 versicolor\n64           6.1         2.9          4.7         1.4 versicolor\n65           5.6         2.9          3.6         1.3 versicolor\n66           6.7         3.1          4.4         1.4 versicolor\n67           5.6         3.0          4.5         1.5 versicolor\n68           5.8         2.7          4.1         1.0 versicolor\n69           6.2         2.2          4.5         1.5 versicolor\n70           5.6         2.5          3.9         1.1 versicolor\n71           5.9         3.2          4.8         1.8 versicolor\n72           6.1         2.8          4.0         1.3 versicolor\n73           6.3         2.5          4.9         1.5 versicolor\n74           6.1         2.8          4.7         1.2 versicolor\n75           6.4         2.9          4.3         1.3 versicolor\n76           6.6         3.0          4.4         1.4 versicolor\n77           6.8         2.8          4.8         1.4 versicolor\n78           6.7         3.0          5.0         1.7 versicolor\n79           6.0         2.9          4.5         1.5 versicolor\n80           5.7         2.6          3.5         1.0 versicolor\n81           5.5         2.4          3.8         1.1 versicolor\n82           5.5         2.4          3.7         1.0 versicolor\n83           5.8         2.7          3.9         1.2 versicolor\n84           6.0         2.7          5.1         1.6 versicolor\n85           5.4         3.0          4.5         1.5 versicolor\n86           6.0         3.4          4.5         1.6 versicolor\n87           6.7         3.1          4.7         1.5 versicolor\n88           6.3         2.3          4.4         1.3 versicolor\n89           5.6         3.0          4.1         1.3 versicolor\n90           5.5         2.5          4.0         1.3 versicolor\n91           5.5         2.6          4.4         1.2 versicolor\n92           6.1         3.0          4.6         1.4 versicolor\n93           5.8         2.6          4.0         1.2 versicolor\n94           5.0         2.3          3.3         1.0 versicolor\n95           5.6         2.7          4.2         1.3 versicolor\n96           5.7         3.0          4.2         1.2 versicolor\n97           5.7         2.9          4.2         1.3 versicolor\n98           6.2         2.9          4.3         1.3 versicolor\n99           5.1         2.5          3.0         1.1 versicolor\n100          5.7         2.8          4.1         1.3 versicolor\n101          6.3         3.3          6.0         2.5  virginica\n102          5.8         2.7          5.1         1.9  virginica\n103          7.1         3.0          5.9         2.1  virginica\n104          6.3         2.9          5.6         1.8  virginica\n105          6.5         3.0          5.8         2.2  virginica\n106          7.6         3.0          6.6         2.1  virginica\n107          4.9         2.5          4.5         1.7  virginica\n108          7.3         2.9          6.3         1.8  virginica\n109          6.7         2.5          5.8         1.8  virginica\n110          7.2         3.6          6.1         2.5  virginica\n111          6.5         3.2          5.1         2.0  virginica\n112          6.4         2.7          5.3         1.9  virginica\n113          6.8         3.0          5.5         2.1  virginica\n114          5.7         2.5          5.0         2.0  virginica\n115          5.8         2.8          5.1         2.4  virginica\n116          6.4         3.2          5.3         2.3  virginica\n117          6.5         3.0          5.5         1.8  virginica\n118          7.7         3.8          6.7         2.2  virginica\n119          7.7         2.6          6.9         2.3  virginica\n120          6.0         2.2          5.0         1.5  virginica\n121          6.9         3.2          5.7         2.3  virginica\n122          5.6         2.8          4.9         2.0  virginica\n123          7.7         2.8          6.7         2.0  virginica\n124          6.3         2.7          4.9         1.8  virginica\n125          6.7         3.3          5.7         2.1  virginica\n126          7.2         3.2          6.0         1.8  virginica\n127          6.2         2.8          4.8         1.8  virginica\n128          6.1         3.0          4.9         1.8  virginica\n129          6.4         2.8          5.6         2.1  virginica\n130          7.2         3.0          5.8         1.6  virginica\n131          7.4         2.8          6.1         1.9  virginica\n132          7.9         3.8          6.4         2.0  virginica\n133          6.4         2.8          5.6         2.2  virginica\n134          6.3         2.8          5.1         1.5  virginica\n135          6.1         2.6          5.6         1.4  virginica\n136          7.7         3.0          6.1         2.3  virginica\n137          6.3         3.4          5.6         2.4  virginica\n138          6.4         3.1          5.5         1.8  virginica\n139          6.0         3.0          4.8         1.8  virginica\n140          6.9         3.1          5.4         2.1  virginica\n141          6.7         3.1          5.6         2.4  virginica\n142          6.9         3.1          5.1         2.3  virginica\n143          5.8         2.7          5.1         1.9  virginica\n144          6.8         3.2          5.9         2.3  virginica\n145          6.7         3.3          5.7         2.5  virginica\n146          6.7         3.0          5.2         2.3  virginica\n147          6.3         2.5          5.0         1.9  virginica\n148          6.5         3.0          5.2         2.0  virginica\n149          6.2         3.4          5.4         2.3  virginica\n150          5.9         3.0          5.1         1.8  virginica"
  },
  {
    "objectID": "slides/01-meet-r.html#tibbles-a-modern-take-on-dataframes-2",
    "href": "slides/01-meet-r.html#tibbles-a-modern-take-on-dataframes-2",
    "title": "Meet R",
    "section": "Tibbles: a modern take on dataframes",
    "text": "Tibbles: a modern take on dataframes\nLet‚Äôs compare the print method for the dataframe iris, before and after we convert it to a tibble.\n\nas_tibble(iris)\n\n# A tibble: 150 √ó 5\n   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n          <dbl>       <dbl>        <dbl>       <dbl> <fct>  \n 1          5.1         3.5          1.4         0.2 setosa \n 2          4.9         3            1.4         0.2 setosa \n 3          4.7         3.2          1.3         0.2 setosa \n 4          4.6         3.1          1.5         0.2 setosa \n 5          5           3.6          1.4         0.2 setosa \n 6          5.4         3.9          1.7         0.4 setosa \n 7          4.6         3.4          1.4         0.3 setosa \n 8          5           3.4          1.5         0.2 setosa \n 9          4.4         2.9          1.4         0.2 setosa \n10          4.9         3.1          1.5         0.1 setosa \n# ‚Ä¶ with 140 more rows\n# ‚Ñπ Use `print(n = ...)` to see more rows"
  },
  {
    "objectID": "slides/01-meet-r.html#exercise-2",
    "href": "slides/01-meet-r.html#exercise-2",
    "title": "Meet R",
    "section": "Exercise",
    "text": "Exercise\n\n\nCheck the weather forecast for your hometown (or a place of your choice).\nAssign the forecasted temperature in one vector and the corresponding time in another vector for at least 5 data points.\nMake a dataframe with those two variables.\nWhat‚Äôs the average temperature? And what‚Äôs its standard deviation?\nThen, visualize those data with a line-chart in which the x axis represents time and the y axis represents the forecasted temperature.\n\n\n\n\n2022 CBSER Summer School"
  },
  {
    "objectID": "slides/02-manipulate.html#the-tidyverse-is-an-ecosystem-of-packages-for-data-science",
    "href": "slides/02-manipulate.html#the-tidyverse-is-an-ecosystem-of-packages-for-data-science",
    "title": "Manipulate Data",
    "section": "The Tidyverse is an ecosystem of packages for Data Science",
    "text": "The Tidyverse is an ecosystem of packages for Data Science\nAll the packages share a common design:\n\nOne function does one thing, well.\nDesigned for pipes.\nExtensive user-friendly documentation.\nNon-standard evaluation, to write code quickly and easily.\n\n\nAll packages can be loaded with library(tidyverse), but you can also load single packages one by one."
  },
  {
    "objectID": "slides/02-manipulate.html#we-first-explore-the-palmer-penguins-dataset",
    "href": "slides/02-manipulate.html#we-first-explore-the-palmer-penguins-dataset",
    "title": "Manipulate Data",
    "section": "We first explore the Palmer Penguins Dataset",
    "text": "We first explore the Palmer Penguins Dataset\nThe Penguins Dataset stores real data about palmer penguins. This R data package was developed and is maintained by Allison Horst, Alison Hill and Kirsten Gorman for teaching purposes.\n\nLet‚Äôs install the package‚Ä¶\n\ninstall.packages('palmerpenguins')\n\n\n\n‚Ä¶and load it in R.\n\nlibrary(palmerpenguins)"
  },
  {
    "objectID": "slides/02-manipulate.html#palmerpenguins-exports-two-datasets",
    "href": "slides/02-manipulate.html#palmerpenguins-exports-two-datasets",
    "title": "Manipulate Data",
    "section": "palmerpenguins exports two datasets",
    "text": "palmerpenguins exports two datasets\n\npenguins_raw\n\n# A tibble: 344 √ó 17\n   studyName Sample Num‚Ä¶¬π Species Region Island Stage Indiv‚Ä¶¬≤ Clutc‚Ä¶¬≥ `Date Egg`\n   <chr>            <dbl> <chr>   <chr>  <chr>  <chr> <chr>   <chr>   <date>    \n 1 PAL0708              1 Adelie‚Ä¶ Anvers Torge‚Ä¶ Adul‚Ä¶ N1A1    Yes     2007-11-11\n 2 PAL0708              2 Adelie‚Ä¶ Anvers Torge‚Ä¶ Adul‚Ä¶ N1A2    Yes     2007-11-11\n 3 PAL0708              3 Adelie‚Ä¶ Anvers Torge‚Ä¶ Adul‚Ä¶ N2A1    Yes     2007-11-16\n 4 PAL0708              4 Adelie‚Ä¶ Anvers Torge‚Ä¶ Adul‚Ä¶ N2A2    Yes     2007-11-16\n 5 PAL0708              5 Adelie‚Ä¶ Anvers Torge‚Ä¶ Adul‚Ä¶ N3A1    Yes     2007-11-16\n 6 PAL0708              6 Adelie‚Ä¶ Anvers Torge‚Ä¶ Adul‚Ä¶ N3A2    Yes     2007-11-16\n 7 PAL0708              7 Adelie‚Ä¶ Anvers Torge‚Ä¶ Adul‚Ä¶ N4A1    No      2007-11-15\n 8 PAL0708              8 Adelie‚Ä¶ Anvers Torge‚Ä¶ Adul‚Ä¶ N4A2    No      2007-11-15\n 9 PAL0708              9 Adelie‚Ä¶ Anvers Torge‚Ä¶ Adul‚Ä¶ N5A1    Yes     2007-11-09\n10 PAL0708             10 Adelie‚Ä¶ Anvers Torge‚Ä¶ Adul‚Ä¶ N5A2    Yes     2007-11-09\n# ‚Ä¶ with 334 more rows, 8 more variables: `Culmen Length (mm)` <dbl>,\n#   `Culmen Depth (mm)` <dbl>, `Flipper Length (mm)` <dbl>,\n#   `Body Mass (g)` <dbl>, Sex <chr>, `Delta 15 N (o/oo)` <dbl>,\n#   `Delta 13 C (o/oo)` <dbl>, Comments <chr>, and abbreviated variable names\n#   ¬π‚Äã`Sample Number`, ¬≤‚Äã`Individual ID`, ¬≥‚Äã`Clutch Completion`\n# ‚Ñπ Use `print(n = ...)` to see more rows, and `colnames()` to see all variable names"
  },
  {
    "objectID": "slides/02-manipulate.html#palmerpenguins-exports-two-datasets-1",
    "href": "slides/02-manipulate.html#palmerpenguins-exports-two-datasets-1",
    "title": "Manipulate Data",
    "section": "palmerpenguins exports two datasets",
    "text": "palmerpenguins exports two datasets\n\npenguins\n\n# A tibble: 344 √ó 8\n   species island    bill_length_mm bill_depth_mm flipper_‚Ä¶¬π body_‚Ä¶¬≤ sex    year\n   <fct>   <fct>              <dbl>         <dbl>      <int>   <int> <fct> <int>\n 1 Adelie  Torgersen           39.1          18.7        181    3750 male   2007\n 2 Adelie  Torgersen           39.5          17.4        186    3800 fema‚Ä¶  2007\n 3 Adelie  Torgersen           40.3          18          195    3250 fema‚Ä¶  2007\n 4 Adelie  Torgersen           NA            NA           NA      NA <NA>   2007\n 5 Adelie  Torgersen           36.7          19.3        193    3450 fema‚Ä¶  2007\n 6 Adelie  Torgersen           39.3          20.6        190    3650 male   2007\n 7 Adelie  Torgersen           38.9          17.8        181    3625 fema‚Ä¶  2007\n 8 Adelie  Torgersen           39.2          19.6        195    4675 male   2007\n 9 Adelie  Torgersen           34.1          18.1        193    3475 <NA>   2007\n10 Adelie  Torgersen           42            20.2        190    4250 <NA>   2007\n# ‚Ä¶ with 334 more rows, and abbreviated variable names ¬π‚Äãflipper_length_mm,\n#   ¬≤‚Äãbody_mass_g\n# ‚Ñπ Use `print(n = ...)` to see more rows\n\n\nWe will use the first one: penguins, which has already been cleaned."
  },
  {
    "objectID": "slides/02-manipulate.html#exercise",
    "href": "slides/02-manipulate.html#exercise",
    "title": "Manipulate Data",
    "section": "Exercise",
    "text": "Exercise\nThe print method for a tibble gives you a reasonable overview of the data stored in it.\nCan you get more details with the package skimr?\nCheck its documentation, install it, try it out on the penguins dataset. Comment on the output: is it useful? How?."
  },
  {
    "objectID": "slides/02-manipulate.html#a-grammar-for-data-manipulation",
    "href": "slides/02-manipulate.html#a-grammar-for-data-manipulation",
    "title": "Manipulate Data",
    "section": "A grammar for data manipulation",
    "text": "A grammar for data manipulation\n\n\n\n\nDplyr provides a grammar for manipulating data, with many useful verbs:\n\nmutate() adds new variables that are functions of existing variables\nselect() picks variables based on their names.\nfilter() picks cases based on their values.\nsummarise() reduces multiple values down to a single summary.\ngroup_by() performs operations by group."
  },
  {
    "objectID": "slides/02-manipulate.html#we-can-apply-those-verbs-to-manipulate-data",
    "href": "slides/02-manipulate.html#we-can-apply-those-verbs-to-manipulate-data",
    "title": "Manipulate Data",
    "section": "We can apply those verbs to manipulate data",
    "text": "We can apply those verbs to manipulate data\n\npenguins %>%\n  mutate(bill_length_meters = bill_length_mm/1000)\n\n# A tibble: 344 √ó 9\n   species island    bill_length_mm bill_d‚Ä¶¬π flipp‚Ä¶¬≤ body_‚Ä¶¬≥ sex    year bill_‚Ä¶‚Å¥\n   <fct>   <fct>              <dbl>    <dbl>   <int>   <int> <fct> <int>   <dbl>\n 1 Adelie  Torgersen           39.1     18.7     181    3750 male   2007  0.0391\n 2 Adelie  Torgersen           39.5     17.4     186    3800 fema‚Ä¶  2007  0.0395\n 3 Adelie  Torgersen           40.3     18       195    3250 fema‚Ä¶  2007  0.0403\n 4 Adelie  Torgersen           NA       NA        NA      NA <NA>   2007 NA     \n 5 Adelie  Torgersen           36.7     19.3     193    3450 fema‚Ä¶  2007  0.0367\n 6 Adelie  Torgersen           39.3     20.6     190    3650 male   2007  0.0393\n 7 Adelie  Torgersen           38.9     17.8     181    3625 fema‚Ä¶  2007  0.0389\n 8 Adelie  Torgersen           39.2     19.6     195    4675 male   2007  0.0392\n 9 Adelie  Torgersen           34.1     18.1     193    3475 <NA>   2007  0.0341\n10 Adelie  Torgersen           42       20.2     190    4250 <NA>   2007  0.042 \n# ‚Ä¶ with 334 more rows, and abbreviated variable names ¬π‚Äãbill_depth_mm,\n#   ¬≤‚Äãflipper_length_mm, ¬≥‚Äãbody_mass_g, ‚Å¥‚Äãbill_length_meters\n# ‚Ñπ Use `print(n = ...)` to see more rows"
  },
  {
    "objectID": "slides/02-manipulate.html#we-can-apply-those-verbs-to-manipulate-data-1",
    "href": "slides/02-manipulate.html#we-can-apply-those-verbs-to-manipulate-data-1",
    "title": "Manipulate Data",
    "section": "We can apply those verbs to manipulate data",
    "text": "We can apply those verbs to manipulate data\n\npenguins %>%\n  select(bill_length_mm) %>% \n  mutate(bill_length_meters = bill_length_mm/1000)\n\n# A tibble: 344 √ó 2\n   bill_length_mm bill_length_meters\n            <dbl>              <dbl>\n 1           39.1             0.0391\n 2           39.5             0.0395\n 3           40.3             0.0403\n 4           NA              NA     \n 5           36.7             0.0367\n 6           39.3             0.0393\n 7           38.9             0.0389\n 8           39.2             0.0392\n 9           34.1             0.0341\n10           42               0.042 \n# ‚Ä¶ with 334 more rows\n# ‚Ñπ Use `print(n = ...)` to see more rows"
  },
  {
    "objectID": "slides/02-manipulate.html#we-can-apply-those-verbs-to-manipulate-data-2",
    "href": "slides/02-manipulate.html#we-can-apply-those-verbs-to-manipulate-data-2",
    "title": "Manipulate Data",
    "section": "We can apply those verbs to manipulate data",
    "text": "We can apply those verbs to manipulate data\n\npenguins %>%\n  select(species, island, bill_length_mm) %>% \n  mutate(bill_length_meters = bill_length_mm/1000)\n\n# A tibble: 344 √ó 4\n   species island    bill_length_mm bill_length_meters\n   <fct>   <fct>              <dbl>              <dbl>\n 1 Adelie  Torgersen           39.1             0.0391\n 2 Adelie  Torgersen           39.5             0.0395\n 3 Adelie  Torgersen           40.3             0.0403\n 4 Adelie  Torgersen           NA              NA     \n 5 Adelie  Torgersen           36.7             0.0367\n 6 Adelie  Torgersen           39.3             0.0393\n 7 Adelie  Torgersen           38.9             0.0389\n 8 Adelie  Torgersen           39.2             0.0392\n 9 Adelie  Torgersen           34.1             0.0341\n10 Adelie  Torgersen           42               0.042 \n# ‚Ä¶ with 334 more rows\n# ‚Ñπ Use `print(n = ...)` to see more rows"
  },
  {
    "objectID": "slides/02-manipulate.html#we-can-apply-those-verbs-to-manipulate-data-3",
    "href": "slides/02-manipulate.html#we-can-apply-those-verbs-to-manipulate-data-3",
    "title": "Manipulate Data",
    "section": "We can apply those verbs to manipulate data",
    "text": "We can apply those verbs to manipulate data\n\npenguins %>%\n count(island)\n\n# A tibble: 3 √ó 2\n  island        n\n  <fct>     <int>\n1 Biscoe      168\n2 Dream       124\n3 Torgersen    52"
  },
  {
    "objectID": "slides/02-manipulate.html#we-can-apply-those-verbs-to-manipulate-data-4",
    "href": "slides/02-manipulate.html#we-can-apply-those-verbs-to-manipulate-data-4",
    "title": "Manipulate Data",
    "section": "We can apply those verbs to manipulate data",
    "text": "We can apply those verbs to manipulate data\n\npenguins %>%\n  select(species, island, bill_length_mm) %>% \n  filter(island == 'Dream') %>% \n  mutate(bill_length_meters = bill_length_mm/1000)\n\n# A tibble: 124 √ó 4\n   species island bill_length_mm bill_length_meters\n   <fct>   <fct>           <dbl>              <dbl>\n 1 Adelie  Dream            39.5             0.0395\n 2 Adelie  Dream            37.2             0.0372\n 3 Adelie  Dream            39.5             0.0395\n 4 Adelie  Dream            40.9             0.0409\n 5 Adelie  Dream            36.4             0.0364\n 6 Adelie  Dream            39.2             0.0392\n 7 Adelie  Dream            38.8             0.0388\n 8 Adelie  Dream            42.2             0.0422\n 9 Adelie  Dream            37.6             0.0376\n10 Adelie  Dream            39.8             0.0398\n# ‚Ä¶ with 114 more rows\n# ‚Ñπ Use `print(n = ...)` to see more rows"
  },
  {
    "objectID": "slides/02-manipulate.html#we-can-apply-those-verbs-to-manipulate-data-5",
    "href": "slides/02-manipulate.html#we-can-apply-those-verbs-to-manipulate-data-5",
    "title": "Manipulate Data",
    "section": "We can apply those verbs to manipulate data",
    "text": "We can apply those verbs to manipulate data\n\npenguins %>%\n  select(species, island, bill_length_mm) %>% \n  filter(island == 'Dream') %>% \n  mutate(bill_length_meters = bill_length_mm/1000) %>% \n  group_by(species)\n\n# A tibble: 124 √ó 4\n# Groups:   species [2]\n   species island bill_length_mm bill_length_meters\n   <fct>   <fct>           <dbl>              <dbl>\n 1 Adelie  Dream            39.5             0.0395\n 2 Adelie  Dream            37.2             0.0372\n 3 Adelie  Dream            39.5             0.0395\n 4 Adelie  Dream            40.9             0.0409\n 5 Adelie  Dream            36.4             0.0364\n 6 Adelie  Dream            39.2             0.0392\n 7 Adelie  Dream            38.8             0.0388\n 8 Adelie  Dream            42.2             0.0422\n 9 Adelie  Dream            37.6             0.0376\n10 Adelie  Dream            39.8             0.0398\n# ‚Ä¶ with 114 more rows\n# ‚Ñπ Use `print(n = ...)` to see more rows"
  },
  {
    "objectID": "slides/02-manipulate.html#we-can-apply-those-verbs-to-manipulate-data-6",
    "href": "slides/02-manipulate.html#we-can-apply-those-verbs-to-manipulate-data-6",
    "title": "Manipulate Data",
    "section": "We can apply those verbs to manipulate data",
    "text": "We can apply those verbs to manipulate data\n\npenguins %>%\n  select(species, island, bill_length_mm) %>% \n  filter(island == 'Dream') %>% \n  mutate(bill_length_meters = bill_length_mm/1000) %>% \n  group_by(species) %>% \n  summarise(mean_bill_length_mm = mean(bill_length_mm),\n            sd_bill_length_mm = sd(bill_length_mm))\n\n# A tibble: 2 √ó 3\n  species   mean_bill_length_mm sd_bill_length_mm\n  <fct>                   <dbl>             <dbl>\n1 Adelie                   38.5              2.47\n2 Chinstrap                48.8              3.34"
  },
  {
    "objectID": "slides/02-manipulate.html#we-can-apply-those-verbs-to-manipulate-data-7",
    "href": "slides/02-manipulate.html#we-can-apply-those-verbs-to-manipulate-data-7",
    "title": "Manipulate Data",
    "section": "We can apply those verbs to manipulate data",
    "text": "We can apply those verbs to manipulate data\n\ndream_summary <- \n  penguins %>%\n  select(species, island, bill_length_mm) %>% \n  filter(island == 'Dream') %>% \n  mutate(bill_length_meters = bill_length_mm/1000) %>% \n  group_by(species) %>% \n  summarise(mean_bill_length_mm = mean(bill_length_mm),\n            sd_bill_length_mm = sd(bill_length_mm))\n\nLet‚Äôs assign the output to a new variable dream_summary."
  },
  {
    "objectID": "slides/02-manipulate.html#section-1",
    "href": "slides/02-manipulate.html#section-1",
    "title": "Manipulate Data",
    "section": "",
    "text": "In the previous code we have seen also two additional aspects that feature heavily in the tidyverse:\n\nThe Pipe %>%.\nNon-Standard Evaluation."
  },
  {
    "objectID": "slides/02-manipulate.html#the-pipe",
    "href": "slides/02-manipulate.html#the-pipe",
    "title": "Manipulate Data",
    "section": "The Pipe %>%",
    "text": "The Pipe %>%\n\n\n\n\n\n\nThe pipe is provided by the package magrittr, it‚Äôs a forwarding operator:\n\nIt takes the ouput of what comes before (LHS) and sends it to the first argument of the function that comes after (RHS).\n\nLHS %>% RHS"
  },
  {
    "objectID": "slides/02-manipulate.html#the-pipe-1",
    "href": "slides/02-manipulate.html#the-pipe-1",
    "title": "Manipulate Data",
    "section": "The Pipe %>%",
    "text": "The Pipe %>%\nFor example, you could write:\n\nselect(penguins, species, body_mass_g)\n\n# A tibble: 344 √ó 2\n   species body_mass_g\n   <fct>         <int>\n 1 Adelie         3750\n 2 Adelie         3800\n 3 Adelie         3250\n 4 Adelie           NA\n 5 Adelie         3450\n 6 Adelie         3650\n 7 Adelie         3625\n 8 Adelie         4675\n 9 Adelie         3475\n10 Adelie         4250\n# ‚Ä¶ with 334 more rows\n# ‚Ñπ Use `print(n = ...)` to see more rows"
  },
  {
    "objectID": "slides/02-manipulate.html#the-pipe-2",
    "href": "slides/02-manipulate.html#the-pipe-2",
    "title": "Manipulate Data",
    "section": "The Pipe %>%",
    "text": "The Pipe %>%\n‚Ä¶but if you use the pipe, your code is easier to read‚Ä¶\n\npenguins %>% select(species, body_mass_g)\n\n# A tibble: 344 √ó 2\n   species body_mass_g\n   <fct>         <int>\n 1 Adelie         3750\n 2 Adelie         3800\n 3 Adelie         3250\n 4 Adelie           NA\n 5 Adelie         3450\n 6 Adelie         3650\n 7 Adelie         3625\n 8 Adelie         4675\n 9 Adelie         3475\n10 Adelie         4250\n# ‚Ä¶ with 334 more rows\n# ‚Ñπ Use `print(n = ...)` to see more rows"
  },
  {
    "objectID": "slides/02-manipulate.html#the-pipe-3",
    "href": "slides/02-manipulate.html#the-pipe-3",
    "title": "Manipulate Data",
    "section": "The Pipe %>%",
    "text": "The Pipe %>%\n‚Ä¶especially if you have to perform many operations one after the other‚Ä¶\n\npenguins %>%\n  select(species, body_mass_g) %>% \n  filter(species == 'Adelie')\n\n# A tibble: 152 √ó 2\n   species body_mass_g\n   <fct>         <int>\n 1 Adelie         3750\n 2 Adelie         3800\n 3 Adelie         3250\n 4 Adelie           NA\n 5 Adelie         3450\n 6 Adelie         3650\n 7 Adelie         3625\n 8 Adelie         4675\n 9 Adelie         3475\n10 Adelie         4250\n# ‚Ä¶ with 142 more rows\n# ‚Ñπ Use `print(n = ...)` to see more rows"
  },
  {
    "objectID": "slides/02-manipulate.html#the-pipe-4",
    "href": "slides/02-manipulate.html#the-pipe-4",
    "title": "Manipulate Data",
    "section": "The Pipe %>%",
    "text": "The Pipe %>%\n‚Ä¶that otherwise would force you to nest your code horribly.\n\nfilter(\n  select(\n    penguins,\n    species, body_mass_g\n  ),\n  species == 'Adelie'\n)\n\n# A tibble: 152 √ó 2\n   species body_mass_g\n   <fct>         <int>\n 1 Adelie         3750\n 2 Adelie         3800\n 3 Adelie         3250\n 4 Adelie           NA\n 5 Adelie         3450\n 6 Adelie         3650\n 7 Adelie         3625\n 8 Adelie         4675\n 9 Adelie         3475\n10 Adelie         4250\n# ‚Ä¶ with 142 more rows\n# ‚Ñπ Use `print(n = ...)` to see more rows"
  },
  {
    "objectID": "slides/02-manipulate.html#non-standard-evaluation",
    "href": "slides/02-manipulate.html#non-standard-evaluation",
    "title": "Manipulate Data",
    "section": "Non-Standard Evaluation",
    "text": "Non-Standard Evaluation\nThis one is difficult‚Ä¶\n\nWhich argument does the function select() take? Let‚Äôs check it in its help page with ?select.\n\n?select\n\nUnder the Usage section it says:\nselect(.data, ...)\n\n\nAnd then in the section Arguments the help page says:\n.data: A data frame, data frame extension (e.g. a tibble), or a lazy data frame (e.g. from dbplyr or dtplyr). See Methods, below, for more details.\n\n...: <tidy-select> One or more unquoted expressions separated by commas. Variable names can be used as if they were positions in the data frame, so expressions like x:y can be used to select a range of variables."
  },
  {
    "objectID": "slides/02-manipulate.html#non-standard-evaluation-1",
    "href": "slides/02-manipulate.html#non-standard-evaluation-1",
    "title": "Manipulate Data",
    "section": "Non-Standard Evaluation",
    "text": "Non-Standard Evaluation\nSo, what are do we mean if we write:\n\npenguins %>% \n  select(species, island)\n\n\nThe penguins tibble is fills the.data parameter through the pipe %>%.\nThe unquoted names species, island fill the argument ..., they represent the names of the columns to be selected.\n\n\nBut the name of columns in a tibble is a character vector.\n\ncolnames(penguins)\n\n[1] \"species\"           \"island\"            \"bill_length_mm\"   \n[4] \"bill_depth_mm\"     \"flipper_length_mm\" \"body_mass_g\"      \n[7] \"sex\"               \"year\""
  },
  {
    "objectID": "slides/02-manipulate.html#non-standard-evaluation-2",
    "href": "slides/02-manipulate.html#non-standard-evaluation-2",
    "title": "Manipulate Data",
    "section": "Non-Standard Evaluation",
    "text": "Non-Standard Evaluation\nThrough non-standard evaluation, in the function select, we can call element of a character vector like if they were variables (without quoting them).\n\npenguins %>% \n  select(species, island)\n\nThe variables species and island don‚Äôt exist outside of the dplyr function select().\n\nspecies\n\nError in eval(expr, envir, enclos): object 'species' not found"
  },
  {
    "objectID": "slides/02-manipulate.html#section-2",
    "href": "slides/02-manipulate.html#section-2",
    "title": "Manipulate Data",
    "section": "",
    "text": "With non-standard evaluation we can write names without quoting them. This makes writing code for iterative data exploration faster.\n\nIf you come from a more strict programming language, it could be hard to get use to this behaviour.\n\n\nMost function of the Tidyverse do non-standard evaluation."
  },
  {
    "objectID": "slides/02-manipulate.html#exercise-1",
    "href": "slides/02-manipulate.html#exercise-1",
    "title": "Manipulate Data",
    "section": "Exercise",
    "text": "Exercise\nWith the penguin dataset:\n\n\nSelect all numeric variables (columns).\nConvert all variables that are expressed in millimeters into meters, rename them accordingly.\n\n\nGet help from:\n\nDplyr‚Äôs website.\nThe Data Wrangling Chapter of R4DS."
  },
  {
    "objectID": "slides/02-manipulate.html#exercise-2",
    "href": "slides/02-manipulate.html#exercise-2",
    "title": "Manipulate Data",
    "section": "Exercise",
    "text": "Exercise\nMove all the defined variable of the penguins dataset (species, island, sex, year) to the left of the measured variables.\nDoes any of the defined variables has missing data? In case remove the corresponding row.\nThen group the dataset by all of those variable defined variables and estimate the minimum for each measured variable of each group."
  },
  {
    "objectID": "slides/02-manipulate.html#exercise-3",
    "href": "slides/02-manipulate.html#exercise-3",
    "title": "Manipulate Data",
    "section": "Exercise",
    "text": "Exercise\nHow many penguins have bill_length_mm above average?\nRepeat the analysis for each species.\n\n\n2022 CBSER Summer School"
  },
  {
    "objectID": "slides/03-visualize.html#we-are-bad-at-recognizing-pattern-from-raw-data",
    "href": "slides/03-visualize.html#we-are-bad-at-recognizing-pattern-from-raw-data",
    "title": "Data Visualization",
    "section": "We are bad at recognizing pattern from raw data",
    "text": "We are bad at recognizing pattern from raw data\n\n\n# A tibble: 2,582 √ó 2\n         x      y\n     <dbl>  <dbl>\n   1 265   385   \n   2 247   260   \n   3 533   388   \n   4 146   172   \n   5 323   354   \n   6 361   377   \n   7 127.  150.  \n   8 490   427   \n   9 275   269   \n  10 270   325   \n  11 287   257   \n  12 220   165   \n  13 116.   98.2 \n  14 223   178   \n  15 633   446   \n  16 247   353   \n  17 141.   54   \n  18 273   396   \n  19 732   407   \n  20 445   475   \n  21 148.  102.  \n  22 756   359   \n  23 176.   91.7 \n  24 653   420   \n  25 255   215   \n  26 158   197   \n  27 490   428   \n  28 350   393   \n  29 111.  161.  \n  30 176.   65.7 \n  31 822   296   \n  32 171   245   \n  33 271   293   \n  34 235   221   \n  35 649   407   \n  36 238   225   \n  37 729   385   \n  38 154   232   \n  39 148.  103.  \n  40 533   400   \n  41 545   398   \n  42 559   471   \n  43 622   467   \n  44 502   465   \n  45 351   373   \n  46 165.   38.4 \n  47 144.  133.  \n  48 595   460   \n  49 415   455   \n  50 567   479   \n  51 607   415   \n  52 452   460   \n  53 154   239   \n  54 657   415   \n  55 606   390   \n  56 273   274   \n  57 165   227   \n  58 217   240   \n  59 159.  122.  \n  60 225   184   \n  61 146.   94.3 \n  62 109.   28   \n  63 322   351   \n  64 292   372   \n  65 165   200   \n  66 295   268   \n  67 166   228   \n  68 761   353   \n  69 546   482   \n  70 329   313   \n  71 593   473   \n  72 124.   56.6 \n  73  99.6  74.8 \n  74 178.   61.8 \n  75 335   414   \n  76 305   415   \n  77 609   427   \n  78 163.   82.6 \n  79 562   442   \n  80 171.   20.2 \n  81 582   476   \n  82 187   143   \n  83 457   443   \n  84 649   416   \n  85 805   332   \n  86 354   307   \n  87 258   349   \n  88 119.  103.  \n  89 533   473   \n  90 446   394   \n  91 383   395   \n  92 181   223   \n  93 130.  162.  \n  94 296   311   \n  95 533   434   \n  96 107.   63.1 \n  97 171.  115.  \n  98 821   301   \n  99 114.  166.  \n 100 171.   73.5 \n 101 130.  164.  \n 102 336   416   \n 103  91.8 144.  \n 104 130.   38.4 \n 105 161   198   \n 106 658   453   \n 107 370   441   \n 108 790   316   \n 109 488   438   \n 110 324   322   \n 111 155   195   \n 112 289   269   \n 113 304   415   \n 114 127.   93   \n 115 274   324   \n 116 583   386   \n 117 786   358   \n 118 160   198   \n 119 295   416   \n 120 417   446   \n 121 318   297   \n 122 216   208   \n 123 535   413   \n 124 231   241   \n 125  95.7 158   \n 126 137.   26.7 \n 127 120.  131.  \n 128 210   145   \n 129 411   400   \n 130 122.  106   \n 131 372   389   \n 132 752   364   \n 133 477   402   \n 134 486   472   \n 135 151   227   \n 136 411   458   \n 137 247   333   \n 138 259   297   \n 139  90.5 146.  \n 140 161   216   \n 141 284   291   \n 142 416   465   \n 143 288   258   \n 144 584   475   \n 145 519   395   \n 146 150.   37.1 \n 147 539   482   \n 148 175    91.7 \n 149 468   423   \n 150 286   257   \n 151 149   115.  \n 152 337   334   \n 153 281   349   \n 154 159   176   \n 155 711   421   \n 156 371   408   \n 157 292   362   \n 158 420   420   \n 159 270   323   \n 160 172   179   \n 161 392   385   \n 162 271   362   \n 163 754   381   \n 164 371   358   \n 165 359   434   \n 166 266   361   \n 167 261   278   \n 168 171   183   \n 169 330   314   \n 170  90.5  39.7 \n 171 118.  174.  \n 172 427   470   \n 173 281   257   \n 174 511   445   \n 175 392   454   \n 176 178.  105.  \n 177 612   421   \n 178 276   278   \n 179 427   401   \n 180 126.   93   \n 181 136    35.8 \n 182 142.    8.5 \n 183 314   339   \n 184  84   148.  \n 185 761   382   \n 186 232   216   \n 187 326   339   \n 188 520   395   \n 189 170   179   \n 190 566   420   \n 191 140.   55.3 \n 192  51.5 112.  \n 193 755   381   \n 194  82.7  57.9 \n 195 240   227   \n 196 788   319   \n 197 170.   77.4 \n 198 588   426   \n 199 268   392   \n 200 186   205   \n 201 597   447   \n 202 269   282   \n 203 196   154   \n 204 576   383   \n 205 130.  141.  \n 206 201   130   \n 207 729   409   \n 208  56.7 106   \n 209 622   452   \n 210 105.  106   \n 211 345   424   \n 212 308   411   \n 213 470   409   \n 214 704   426   \n 215 331   411   \n 216 123   109.  \n 217 793   312   \n 218 149   128.  \n 219  60.6  86.5 \n 220 815   316   \n 221 364   430   \n 222 120.   77.4 \n 223 164   140   \n 224 218   225   \n 225 381   448   \n 226 104.   44.9 \n 227 127.   59.2 \n 228 110   141.  \n 229 771   342   \n 230 569   376   \n 231 253   367   \n 232 339   369   \n 233 150.  112.  \n 234 512   440   \n 235 263   311   \n 236 212   240   \n 237 139.   37.1 \n 238 280   249   \n 239 137.   35.8 \n 240 438   391   \n 241 449   455   \n 242  95.7 152.  \n 243 210   244   \n 244 394   415   \n 245 787   322   \n 246 361   435   \n 247 155   210   \n 248 772   342   \n 249 167.   78.7 \n 250 598   398   \n 251 740   388   \n 252 272   237   \n 253 416   455   \n 254 132.  153.  \n 255 578   385   \n 256 116.   85.2 \n 257 587   444   \n 258 702   426   \n 259 221   175   \n 260 596   435   \n 261 308   328   \n 262 169   240   \n 263 152.  110.  \n 264 819   285   \n 265 650   416   \n 266 522   394   \n 267 327   358   \n 268 680   442   \n 269 526   453   \n 270 146.   43.6 \n 271 818   309   \n 272 807   287   \n 273 521   463   \n 274 163.   85.2 \n 275 150.   29.3 \n 276 325   407   \n 277 191   151   \n 278 612   419   \n 279 238   209   \n 280 422   387   \n 281 167.  109.  \n 282 372   435   \n 283 302   319   \n 284 270   234   \n 285 249   262   \n 286 348   373   \n 287 114.   77.4 \n 288 248   202   \n 289 256   250   \n 290 507   398   \n 291 115.   73.5 \n 292 135.   29.3 \n 293 162   172   \n 294 799   303   \n 295 799   333   \n 296 155   196   \n 297 130.   39.7 \n 298 344   347   \n 299 227   175   \n 300 271   395   \n 301 126.   42.3 \n 302 790   344   \n 303 386   365   \n 304 286   375   \n 305 417   399   \n 306 266   297   \n 307 560   382   \n 308 537   437   \n 309 644   428   \n 310 185   161   \n 311 456   445   \n 312 489   482   \n 313 787   347   \n 314 310   386   \n 315 412   450   \n 316 212   160   \n 317 154   216   \n 318 156   196   \n 319 341   328   \n 320 153.   86.5 \n 321 427   433   \n 322 693   428   \n 323 174   244   \n 324 347   425   \n 325 300   382   \n 326 289   410   \n 327 248   262   \n 328  93.1  41   \n 329 235   276   \n 330 500   468   \n 331  78.8  99.5 \n 332 346   333   \n 333 653   410   \n 334 113.   70.9 \n 335 407   389   \n 336 269   331   \n 337 287   310   \n 338  91.8  41   \n 339 806   332   \n 340  55.4  93   \n 341 553   376   \n 342 296   310   \n 343 570   465   \n 344 109.   46.2 \n 345 807   330   \n 346 180   151   \n 347 253   314   \n 348 653   427   \n 349 552   463   \n 350 795   346   \n 351 124.   42.3 \n 352 458   479   \n 353 377   395   \n 354 744   380   \n 355 619   468   \n 356 105.   65.7 \n 357 136   207   \n 358 775   361   \n 359 223   262   \n 360 153.  123.  \n 361 154   211   \n 362 137.  154.  \n 363 337   322   \n 364 126.  109.  \n 365 128.   16.3 \n 366 447   471   \n 367 753   363   \n 368 763   380   \n 369 203   236   \n 370  55.4 129.  \n 371 274   275   \n 372 263   298   \n 373 109.   52.7 \n 374  98.3 179.  \n 375 283   380   \n 376 612   457   \n 377 498   417   \n 378 116.   99.5 \n 379 266   388   \n 380 345   322   \n 381 322   311   \n 382 352   310   \n 383 306   281   \n 384 137.   80   \n 385 307   282   \n 386 118.   93   \n 387 223   169   \n 388 257   251   \n 389 361   338   \n 390 258   358   \n 391 489   437   \n 392 531   443   \n 393 307   317   \n 394 231   271   \n 395 643   428   \n 396 248   239   \n 397 343   347   \n 398 116.   95.6 \n 399 105.  102.  \n 400 793   348   \n 401 263   249   \n 402 202   130   \n 403 119.   59.2 \n 404 361   310   \n 405 589   474   \n 406 174.   70.9 \n 407 193   196   \n 408 157.  129.  \n 409 116.  101.  \n 410 309   322   \n 411 423   412   \n 412 209   143   \n 413 822   291   \n 414 163.   48.8 \n 415 604   459   \n 416 510   402   \n 417 260   307   \n 418 567   387   \n 419 658   424   \n 420 563   414   \n 421 390   444   \n 422 333   319   \n 423 211   240   \n 424 577   412   \n 425 222   169   \n 426 307   290   \n 427 149    91.7 \n 428 252   244   \n 429  99.6 178.  \n 430 109.   68.3 \n 431 588   443   \n 432 418   453   \n 433 433   422   \n 434 278   247   \n 435 119.   42.3 \n 436 605   433   \n 437 468   426   \n 438 518   477   \n 439 151   226   \n 440 307   327   \n 441 568   479   \n 442 797   305   \n 443 352   397   \n 444 462   475   \n 445 259   220   \n 446 625   391   \n 447 803   295   \n 448 546   379   \n 449 787   335   \n 450 230   263   \n 451 670   447   \n 452 498   419   \n 453 327   408   \n 454 608   403   \n 455 342   362   \n 456 309   285   \n 457 195   147   \n 458 491   419   \n 459 213   165   \n 460 449   463   \n 461 145.   20.2 \n 462 294   307   \n 463 161.   98.2 \n 464 106.   94.3 \n 465 685   425   \n 466 289   335   \n 467 226   266   \n 468 251   206   \n 469 195   236   \n 470 425   407   \n 471  50.2 118.  \n 472  77.5 145   \n 473 276   386   \n 474 691   415   \n 475 269   268   \n 476 455   478   \n 477 344   323   \n 478 150.  136.  \n 479 213   140   \n 480 600   471   \n 481 163   181   \n 482 599   460   \n 483 561   468   \n 484 787   321   \n 485 137.   37.1 \n 486  87.9 162.  \n 487 352   373   \n 488 509   398   \n 489 596   448   \n 490  65.8 141.  \n 491 352   353   \n 492 120.  105.  \n 493 635   401   \n 494 159.  126.  \n 495 312   289   \n 496 118.   94.3 \n 497 789   337   \n 498 617   409   \n 499 602   427   \n 500 243   235   \n 501 618   454   \n 502 268   231   \n 503 172.   72.2 \n 504 227   195   \n 505 542   482   \n 506 176.   93   \n 507 550   466   \n 508 452   459   \n 509 277   271   \n 510 806   331   \n 511 614   403   \n 512 554   386   \n 513 110    24.1 \n 514 130.    2   \n 515 363   430   \n 516 163   148   \n 517 566   398   \n 518 247   352   \n 519 265   311   \n 520 574   421   \n 521 250   203   \n 522 231   190   \n 523 253   315   \n 524  54.1 119   \n 525 148   179   \n 526 385   367   \n 527  50.2 115.  \n 528 289   278   \n 529 166.  101.  \n 530 263   334   \n 531 290   300   \n 532 120.   56.6 \n 533 320   300   \n 534 615   415   \n 535 646   448   \n 536 488   440   \n 537 328   387   \n 538 653   435   \n 539 111.   38.4 \n 540 102.   52.7 \n 541 136    16.3 \n 542 149   177   \n 543 757   364   \n 544 244   199   \n 545 199   214   \n 546  93.1 159.  \n 547  76.2 161.  \n 548 801   339   \n 549 149    28   \n 550 176.   99.5 \n 551 110    48.8 \n 552 220   190   \n 553 310   299   \n 554 165   175   \n 555 548   477   \n 556 131.  148.  \n 557 123    56.6 \n 558 463   440   \n 559 146.  101.  \n 560 794   309   \n 561 170.   18.9 \n 562 110   163.  \n 563 396   439   \n 564 738   401   \n 565 382   430   \n 566 670   427   \n 567 596   408   \n 568 336   321   \n 569 583   391   \n 570 246   343   \n 571 164   199   \n 572 530   446   \n 573 156   241   \n 574 556   459   \n 575 219   197   \n 576 792   341   \n 577 331   365   \n 578 365   438   \n 579 361   311   \n 580 172.   73.5 \n 581 218   198   \n 582 144   183   \n 583 264   298   \n 584 119.   20.2 \n 585 504   479   \n 586 248   298   \n 587 345   331   \n 588 127.   31.9 \n 589 707   405   \n 590 328   311   \n 591 551   444   \n 592 426   469   \n 593 143   214   \n 594 162   167   \n 595 771   351   \n 596 235   220   \n 597  56.7  91.7 \n 598 614   402   \n 599 149    29.3 \n 600 640   441   \n 601 357   334   \n 602  94.4 172.  \n 603 406   461   \n 604 434   432   \n 605 283   282   \n 606 289   342   \n 607 819   306   \n 608  98.3 164.  \n 609 344   339   \n 610 120.   34.5 \n 611 408   427   \n 612  85.3 146.  \n 613 470   476   \n 614 686   437   \n 615 425   438   \n 616 174   211   \n 617  80.1  46.2 \n 618 601   440   \n 619 377   432   \n 620 413   418   \n 621 551   383   \n 622 162   151   \n 623 523   459   \n 624 176.  101.  \n 625 593   392   \n 626 294   364   \n 627 549   459   \n 628 329   403   \n 629 291   381   \n 630 672   427   \n 631 111.  170.  \n 632 376   360   \n 633 798   343   \n 634 800   301   \n 635 174.   69.6 \n 636 133.   86.5 \n 637 416   406   \n 638 130.  148.  \n 639 201   236   \n 640 722   398   \n 641 461   474   \n 642 584   386   \n 643 444   405   \n 644 334   374   \n 645 187   142   \n 646 577   477   \n 647 436   415   \n 648 258   274   \n 649 290   261   \n 650 115.   25.4 \n 651 501   468   \n 652 294   345   \n 653 234   276   \n 654 704   425   \n 655 104.  150.  \n 656 233   184   \n 657 119.   83.9 \n 658 214   240   \n 659 217   201   \n 660 463   442   \n 661 383   388   \n 662 789   327   \n 663 163.   83.9 \n 664 286   341   \n 665 258   345   \n 666 185   197   \n 667 419   400   \n 668 165.   99.5 \n 669 144.   18.9 \n 670 569   479   \n 671 133.   85.2 \n 672 111.   21.5 \n 673 218   228   \n 674 568   416   \n 675 183   159   \n 676 613   389   \n 677 646   447   \n 678 405   379   \n 679 545   472   \n 680 270   261   \n 681 171   224   \n 682 355   396   \n 683 563   393   \n 684 463   420   \n 685 153   169   \n 686 476   481   \n 687 646   446   \n 688 265   324   \n 689 604   390   \n 690 101.  178.  \n 691 150   176   \n 692 443   470   \n 693 302   296   \n 694 555   459   \n 695 138   196   \n 696  86.6  50.1 \n 697 359   349   \n 698 153.  122.  \n 699 170.   20.2 \n 700 388   369   \n 701 634   400   \n 702 411   395   \n 703 340   379   \n 704 127.  142.  \n 705 154.  120.  \n 706 191   196   \n 707 130.  167.  \n 708 339   396   \n 709 609   457   \n 710 743   380   \n 711 793   332   \n 712 139.   25.4 \n 713 144.  114.  \n 714 148.   28   \n 715 543   390   \n 716 153.  103.  \n 717 598   388   \n 718 246   342   \n 719 185   153   \n 720 171.  103.  \n 721 330   323   \n 722 167.   18.9 \n 723 200   202   \n 724 192   196   \n 725 567   435   \n 726 504   461   \n 727  97    43.6 \n 728 137.   59.2 \n 729 179   243   \n 730 212   246   \n 731 643   439   \n 732 174.   90.4 \n 733 284   282   \n 734 502   398   \n 735 256   270   \n 736 480   482   \n 737 757   375   \n 738 180.   50.1 \n 739 331   323   \n 740 170.  115.  \n 741 433   434   \n 742 344   322   \n 743 658   417   \n 744 172.   21.5 \n 745 359   308   \n 746 633   408   \n 747 180.   51.4 \n 748 166   245   \n 749 557   428   \n 750 252   361   \n 751 299   273   \n 752 429   465   \n 753 305   337   \n 754 820   286   \n 755 272   335   \n 756 291   412   \n 757  64.5  86.5 \n 758 136    60.5 \n 759 566   404   \n 760 407   394   \n 761 136    34.5 \n 762 283   352   \n 763 239   251   \n 764 737   384   \n 765 646   429   \n 766 275   278   \n 767 346   359   \n 768 130.   95.6 \n 769 335   320   \n 770 105.   64.4 \n 771 204   221   \n 772 415   410   \n 773 215   144   \n 774 128.   59.2 \n 775 760   382   \n 776  90.5 155.  \n 777 230   182   \n 778 227   236   \n 779 316   343   \n 780 226   209   \n 781 668   428   \n 782 490   410   \n 783 146   199   \n 784 503   402   \n 785 698   430   \n 786 603   437   \n 787 105.  112.  \n 788  89.2 162.  \n 789 672   440   \n 790 251   205   \n 791 305   326   \n 792 116.  152.  \n 793 289   336   \n 794 220   189   \n 795 177   244   \n 796 418   392   \n 797 130.  161.  \n 798 628   410   \n 799 269   243   \n 800 299   333   \n 801 453   473   \n 802 762   381   \n 803 751   364   \n 804 148.   39.7 \n 805 355   431   \n 806 248   357   \n 807  58    89.1 \n 808 132.   78.7 \n 809 495   466   \n 810 223   186   \n 811 653   411   \n 812 407   428   \n 813 141   195   \n 814 137   197   \n 815 110    34.5 \n 816 321   302   \n 817 645   459   \n 818 180.   47.5 \n 819 157   149   \n 820 570   376   \n 821 209   141   \n 822 366   366   \n 823  63.2 110.  \n 824  86.6  65.7 \n 825 812   322   \n 826 742   399   \n 827 623   394   \n 828 783   328   \n 829 454   410   \n 830 560   445   \n 831 177   239   \n 832 266   247   \n 833 616   468   \n 834 328   343   \n 835 261   353   \n 836 639   451   \n 837 268   232   \n 838 178.   41   \n 839 701   418   \n 840 356   426   \n 841 192   130   \n 842 286   383   \n 843 266   281   \n 844 797   344   \n 845 106.   44.9 \n 846 166.   80   \n 847 344   373   \n 848 252   236   \n 849 296   339   \n 850 754   368   \n 851 400   452   \n 852  77.5 154.  \n 853  94.4  86.5 \n 854 360   332   \n 855 109.   90.4 \n 856 349   427   \n 857 288   289   \n 858 171.   39.7 \n 859 140   216   \n 860 324   307   \n 861 187   141   \n 862 398   437   \n 863 448   476   \n 864 164   173   \n 865 440   404   \n 866 626   396   \n 867 571   436   \n 868 292   393   \n 869 106.  154.  \n 870 212   154   \n 871 339   418   \n 872 154   233   \n 873 565   393   \n 874 304   303   \n 875 319   299   \n 876 265   312   \n 877 120.   93   \n 878 770   351   \n 879 265   262   \n 880 791   315   \n 881 157   159   \n 882 148.   83.9 \n 883 450   395   \n 884 777   348   \n 885 451   452   \n 886 641   412   \n 887 458   441   \n 888  74.9 132   \n 889 387   381   \n 890 472   413   \n 891 298   313   \n 892 645   416   \n 893 187   134   \n 894 293   275   \n 895 253   365   \n 896 318   346   \n 897 217   156   \n 898 566   401   \n 899 309   405   \n 900 443   475   \n 901 452   406   \n 902 380   447   \n 903 421   416   \n 904 272   379   \n 905 661   431   \n 906 139.   26.7 \n 907 109.  122.  \n 908 492   445   \n 909 239   250   \n 910 362   311   \n 911 139.   59.2 \n 912 603   427   \n 913 730   408   \n 914 263   233   \n 915 153.   35.8 \n 916  69.7 161.  \n 917 205   242   \n 918 365   393   \n 919 601   389   \n 920 436   465   \n 921 141.   48.8 \n 922  82.7 140.  \n 923 334   371   \n 924 440   392   \n 925 303   378   \n 926 579   386   \n 927 122.   21.5 \n 928 104.  144.  \n 929 155   205   \n 930 171.   74.8 \n 931 226   183   \n 932 136    28   \n 933 349   373   \n 934 127.   30.6 \n 935 426   401   \n 936 178.   63.1 \n 937 140.   57.9 \n 938 461   401   \n 939 598   394   \n 940 722   392   \n 941 354   431   \n 942 567   461   \n 943 133.  158   \n 944 140   195   \n 945 338   351   \n 946 133.   35.8 \n 947 727   410   \n 948 257   328   \n 949 503   455   \n 950 569   412   \n 951 577   414   \n 952 465   397   \n 953 114.   17.6 \n 954 566   454   \n 955 152   219   \n 956 457   453   \n 957 192   142   \n 958 119.   74.8 \n 959  54.1 129.  \n 960 260   277   \n 961 164   162   \n 962 283   370   \n 963 210   245   \n 964 353   396   \n 965 728   410   \n 966 144   199   \n 967 487   399   \n 968  82.7  81.3 \n 969 789   318   \n 970 255   214   \n 971  54.1  94.3 \n 972 124.  132   \n 973 309   336   \n 974 771   352   \n 975 304   286   \n 976 119.  131.  \n 977 218   255   \n 978 783   361   \n 979 369   328   \n 980 574   379   \n 981 176   139   \n 982 714   419   \n 983 272   396   \n 984 603   390   \n 985 370   442   \n 986 810   285   \n 987 259   352   \n 988 359   355   \n 989 127.   82.6 \n 990 597   393   \n 991 237   247   \n 992 332   325   \n 993 306   292   \n 994 157   151   \n 995 582   386   \n 996  95.7  64.4 \n 997 179   202   \n 998 237   281   \n 999 612   420   \n1000 246   272   \n1001 573   479   \n1002 484   473   \n1003 613   456   \n1004 691   414   \n1005 447   398   \n1006 180.   52.7 \n1007 385   380   \n1008 627   465   \n1009 120.  103.  \n1010 149    55.3 \n1011 732   406   \n1012 185   205   \n1013 180.  180.  \n1014 107.  120.  \n1015 255   311   \n1016 295   339   \n1017 292   302   \n1018 175   143   \n1019 405   430   \n1020 174   228   \n1021 325   389   \n1022 340   420   \n1023 525   393   \n1024 637   408   \n1025 753   383   \n1026 786   323   \n1027 254   247   \n1028 321   387   \n1029 822   297   \n1030 361   405   \n1031 413   456   \n1032 263   258   \n1033 724   390   \n1034 667   449   \n1035  52.8 119   \n1036 319   393   \n1037 552   435   \n1038  86.6  78.7 \n1039 185   242   \n1040  74.9 155.  \n1041 333   341   \n1042 273   384   \n1043 237   199   \n1044 241   204   \n1045 116.  162.  \n1046 471   481   \n1047  97    76.1 \n1048 188   163   \n1049 382   376   \n1050 186   156   \n1051 109.   57.9 \n1052 460   448   \n1053 532   389   \n1054 165.   87.8 \n1055 269   314   \n1056 615   408   \n1057 617   389   \n1058 148.   50.1 \n1059 141.   52.7 \n1060 380   448   \n1061 244   288   \n1062 549   383   \n1063  81.4  39.7 \n1064 540   384   \n1065 297   270   \n1066 294   266   \n1067 676   424   \n1068  94.4 141.  \n1069 373   434   \n1070 780   330   \n1071 110   124.  \n1072 211   147   \n1073 356   341   \n1074 654   411   \n1075 324   323   \n1076 282   377   \n1077 110   170.  \n1078 114.  150.  \n1079 595   450   \n1080 153.   57.9 \n1081 293   266   \n1082 318   403   \n1083 247   351   \n1084 283   253   \n1085 387   362   \n1086 332   367   \n1087 537   440   \n1088 719   394   \n1089 110    26.7 \n1090 136     7.20\n1091 613   399   \n1092 284   351   \n1093 158.  116.  \n1094 115.   60.5 \n1095 198   218   \n1096 601   442   \n1097 110    50.1 \n1098 424   401   \n1099 192   135   \n1100 253   316   \n1101 599   388   \n1102 158   215   \n1103 219   163   \n1104 625   395   \n1105 289   367   \n1106  99.6 161.  \n1107 338   364   \n1108  94.4  42.3 \n1109 308   397   \n1110 464   438   \n1111 469   402   \n1112 116.   74.8 \n1113 468   424   \n1114 167   177   \n1115 286   406   \n1116  93.1  47.5 \n1117 435   417   \n1118 327   409   \n1119 131.  146.  \n1120 336   415   \n1121 190   163   \n1122 128.   28   \n1123 580   386   \n1124 295   269   \n1125 566   444   \n1126 146.   24.1 \n1127 738   402   \n1128 221   259   \n1129 265   227   \n1130 105.  142.  \n1131 152.   35.8 \n1132 368   440   \n1133 175   181.  \n1134 109.   29.3 \n1135 300   338   \n1136 551   396   \n1137 355   432   \n1138 155   174   \n1139 563   480   \n1140 171   168   \n1141 382   388   \n1142 492   399   \n1143 290   269   \n1144 720   400   \n1145 233   273   \n1146 577   464   \n1147 251   306   \n1148 596   473   \n1149 271   262   \n1150 382   378   \n1151 818   308   \n1152 358   395   \n1153 329   314   \n1154 716   418   \n1155 216   207   \n1156 445   394   \n1157 618   468   \n1158 284   361   \n1159 182.  181.  \n1160 178.  112.  \n1161 180.   46.2 \n1162 647   448   \n1163 295   368   \n1164 709   403   \n1165 366   362   \n1166 127.   25.4 \n1167 239   201   \n1168 319   348   \n1169  77.5 115.  \n1170 418   454   \n1171 368   322   \n1172 122.  155.  \n1173 172.  103.  \n1174 168.   77.4 \n1175 105.  115.  \n1176 282   250   \n1177 207   238   \n1178 250   263   \n1179 265   382   \n1180 783   327   \n1181 296   334   \n1182 130.   94.3 \n1183 350   337   \n1184 231   216   \n1185 335   407   \n1186 326   310   \n1187 107.   44.9 \n1188 496   433   \n1189 820   304   \n1190 693   419   \n1191 531   442   \n1192 146.   48.8 \n1193 575   478   \n1194 592   446   \n1195 613   401   \n1196 655   413   \n1197 119.   43.6 \n1198 199   202   \n1199 145.   95.6 \n1200 295   334   \n1201 293   414   \n1202 513   397   \n1203 148   215   \n1204 362   328   \n1205 167.   80   \n1206 551   377   \n1207 368   430   \n1208 192   154   \n1209 343   422   \n1210 681   442   \n1211 234   219   \n1212 320   349   \n1213 632   409   \n1214 663   431   \n1215 227   254   \n1216 258   346   \n1217 794   310   \n1218 635   408   \n1219 314   293   \n1220 573   425   \n1221  61.9 115.  \n1222 585   475   \n1223 140.  106   \n1224 300   416   \n1225 463   423   \n1226 105.  111.  \n1227 409   426   \n1228 423   413   \n1229 153   193   \n1230 647   449   \n1231 418   399   \n1232 160   144   \n1233 303   321   \n1234 215   213   \n1235 581   386   \n1236 395   387   \n1237 369   402   \n1238 570   429   \n1239 657   453   \n1240 140.   38.4 \n1241 170.   60.5 \n1242 341   327   \n1243 593   438   \n1244 220   250   \n1245 221   188   \n1246 153.  133.  \n1247 247   238   \n1248 702   419   \n1249 734   381   \n1250 179.   43.6 \n1251 167   144   \n1252 621   453   \n1253 193   145   \n1254 712   421   \n1255 819   308   \n1256 724   406   \n1257 420   401   \n1258 306   282   \n1259 609   389   \n1260 622   460   \n1261 298   338   \n1262 226   202   \n1263 165.   48.8 \n1264 387   452   \n1265 266   389   \n1266 141.   51.4 \n1267 265   338   \n1268  77.5 133.  \n1269 216   209   \n1270 168   214   \n1271  95.7 141.  \n1272 542   474   \n1273 782   329   \n1274 408   452   \n1275 118.   74.8 \n1276 219   256   \n1277 166.   46.2 \n1278 241   253   \n1279 330   410   \n1280 152.   37.1 \n1281 148   180   \n1282 380   400   \n1283 685   438   \n1284 611   469   \n1285 421   462   \n1286 334   237   \n1287 426   446   \n1288 239   249   \n1289 580   476   \n1290 140.  135.  \n1291 802   298   \n1292 216   148   \n1293 337   383   \n1294 174   240   \n1295 251   207   \n1296 511   442   \n1297 364   412   \n1298 274   252   \n1299 228   191   \n1300 536   386   \n1301 423   388   \n1302 198   196   \n1303 302   338   \n1304 703   426   \n1305 766   376   \n1306 109.   31.9 \n1307 786   357   \n1308 231   215   \n1309 309   286   \n1310 244   287   \n1311 229   239   \n1312 139.   57.9 \n1313 144.   20.2 \n1314 217   204   \n1315 118.  175.  \n1316 227   267   \n1317 128.   39.7 \n1318 152   192   \n1319 246   202   \n1320 267   391   \n1321 672   446   \n1322 165.   81.3 \n1323 156.  103.  \n1324 182   158   \n1325  76.2  54   \n1326 299   387   \n1327 743   379   \n1328 562   374   \n1329 579   421   \n1330 196   205   \n1331 165   245   \n1332 599   431   \n1333 105.   99.5 \n1334 366   356   \n1335 170.   90.4 \n1336 297   380   \n1337 708   404   \n1338 434   407   \n1339 106.   93   \n1340 306   414   \n1341 357   372   \n1342 796   307   \n1343 253   267   \n1344 105.  107.  \n1345 593   460   \n1346 599   414   \n1347 436   473   \n1348 165   174   \n1349 142.    7.20\n1350 173   143   \n1351 264   227   \n1352 462   397   \n1353 755   372   \n1354 778   334   \n1355 107.   91.7 \n1356 208   239   \n1357 397   439   \n1358 410   434   \n1359 279   247   \n1360 654   422   \n1361 367   356   \n1362 349   408   \n1363 257   340   \n1364 118.   12.4 \n1365 136   209   \n1366 147   199   \n1367 135.   34.5 \n1368 162    18.9 \n1369 625   465   \n1370 724   412   \n1371 362   319   \n1372 237   279   \n1373 141.   47.5 \n1374 167   245   \n1375 287   271   \n1376 740   387   \n1377 545   391   \n1378 119.   93   \n1379 130.  109.  \n1380 518   406   \n1381 326   390   \n1382 168   204   \n1383 754   388   \n1384 350   428   \n1385 156   153   \n1386 748   392   \n1387 154.  119   \n1388 375   397   \n1389 391   385   \n1390 220   166   \n1391 136   205   \n1392 758   357   \n1393 415   397   \n1394 732   382   \n1395  82.7 164.  \n1396 332   384   \n1397 169   229   \n1398 146.   93   \n1399 159   243   \n1400 613   402   \n1401 402   459   \n1402 156.  116.  \n1403 111.   22.8 \n1404 157   215   \n1405 110    25.4 \n1406 485   482   \n1407 789   319   \n1408 182   143   \n1409 131.  135.  \n1410  77.5 116.  \n1411 466   397   \n1412 467   428   \n1413 350   338   \n1414 271   235   \n1415 293   329   \n1416 459   474   \n1417 782   363   \n1418 131.  144.  \n1419 221   236   \n1420 217   224   \n1421 306   317   \n1422 159.  124.  \n1423 478   482   \n1424 220   215   \n1425 266   280   \n1426  63.2 131.  \n1427 215   251   \n1428 304   295   \n1429 324   388   \n1430 310   322   \n1431 576   464   \n1432 110    89.1 \n1433 548   379   \n1434 266   312   \n1435 358   308   \n1436 150.   52.7 \n1437 361   370   \n1438  69.7 107.  \n1439  91.8  72.2 \n1440 368   357   \n1441  97    70.9 \n1442 136    30.6 \n1443 249   279   \n1444 403   433   \n1445 768   345   \n1446 470   397   \n1447 642   459   \n1448 642   440   \n1449 297   402   \n1450 111.   39.7 \n1451 467   480   \n1452 107.   90.4 \n1453 585   445   \n1454 266   264   \n1455 367   331   \n1456 154   217   \n1457 789   330   \n1458 811   284   \n1459 409   462   \n1460 225   232   \n1461  93.1  56.6 \n1462 750   391   \n1463 813   284   \n1464 130.  170.  \n1465 311   298   \n1466 140.    3.30\n1467 176.   98.2 \n1468 159.  105.  \n1469  78.8 166.  \n1470 168.   90.4 \n1471 363   322   \n1472 105.  103.  \n1473  87.9  74.8 \n1474 344   316   \n1475 768   344   \n1476 359   339   \n1477 366   438   \n1478 739   401   \n1479  91.8  83.9 \n1480 580   449   \n1481 255   301   \n1482 250   358   \n1483 602   404   \n1484 304   380   \n1485 666   434   \n1486 433   472   \n1487 498   416   \n1488 218   172   \n1489 446   476   \n1490 660   446   \n1491 728   409   \n1492 257   357   \n1493 133.   87.8 \n1494 171   138   \n1495 149   152.  \n1496 144   185   \n1497 428   407   \n1498 149   140.  \n1499 180   152   \n1500 275   277   \n1501 123   175.  \n1502  87.9 150.  \n1503 814   316   \n1504  58    95.6 \n1505 169   178   \n1506 576   477   \n1507 589   460   \n1508 106.  159.  \n1509 478   409   \n1510 281   250   \n1511 115.   42.3 \n1512 265   298   \n1513 114.   60.5 \n1514 150.   38.4 \n1515 299   416   \n1516 269   356   \n1517 192   212   \n1518 165.   82.6 \n1519 262   374   \n1520 257   272   \n1521 165.  115.  \n1522 735   404   \n1523 141.   55.3 \n1524 623   390   \n1525 412   420   \n1526 163.   99.5 \n1527 581   435   \n1528 269   295   \n1529 502   479   \n1530 279   274   \n1531 365   392   \n1532 210   240   \n1533 796   334   \n1534 627   401   \n1535 513   402   \n1536 273   383   \n1537 237   191   \n1538 160   165   \n1539 122.    7.20\n1540 244   290   \n1541 111.   37.1 \n1542 782   328   \n1543 227   202   \n1544 462   429   \n1545  81.4  93   \n1546 776   347   \n1547 438   473   \n1548 325   355   \n1549 364   437   \n1550 268   282   \n1551 653   425   \n1552 288   386   \n1553 263   260   \n1554 115.   31.9 \n1555 220   213   \n1556 725   390   \n1557 271   283   \n1558 105.  110.  \n1559 622   458   \n1560 269   233   \n1561 127.    9.80\n1562 222   224   \n1563 553   442   \n1564 213   240   \n1565 241   261   \n1566 315   294   \n1567 220   257   \n1568 157.   31.9 \n1569 593   451   \n1570 308   300   \n1571 221   176   \n1572 312   290   \n1573 162   179   \n1574 634   408   \n1575 202   135   \n1576 179.   57.9 \n1577 681   432   \n1578 812   320   \n1579 178.  106   \n1580 217   155   \n1581 308   409   \n1582 343   316   \n1583 185   154   \n1584 748   374   \n1585 254   268   \n1586 272   293   \n1587 785   334   \n1588 107.  141.  \n1589 443   398   \n1590 242   222   \n1591 162    35.8 \n1592 576   471   \n1593 496   399   \n1594 171.  110.  \n1595 283   252   \n1596  93.1  77.4 \n1597  56.7 114.  \n1598 325   390   \n1599 723   405   \n1600 176.  114.  \n1601 315   293   \n1602 740   400   \n1603 149   185   \n1604 574   396   \n1605 184   238   \n1606 548   460   \n1607 577   470   \n1608 402   385   \n1609  99.6 162.  \n1610 271   294   \n1611 212   150   \n1612  81.4  57.9 \n1613 169   214   \n1614 491   446   \n1615 289   327   \n1616 160   238   \n1617 630   394   \n1618 233   217   \n1619 517   406   \n1620 270   262   \n1621 305   332   \n1622 190   158   \n1623  64.5 120.  \n1624 141.   39.7 \n1625 495   399   \n1626 333   318   \n1627 116.   60.5 \n1628 144.   17.6 \n1629 228   253   \n1630 197   196   \n1631 401   392   \n1632 295   307   \n1633 529   460   \n1634  77.5  82.6 \n1635 605   422   \n1636 230   240   \n1637 519   410   \n1638 490   415   \n1639 544   482   \n1640 504   462   \n1641 579   463   \n1642 178.  110.  \n1643 130.  168.  \n1644 621   407   \n1645 289   333   \n1646 775   368   \n1647 102.   63.1 \n1648 187   135   \n1649 477   482   \n1650 114.   72.2 \n1651 569   461   \n1652 270   235   \n1653 212   157   \n1654 479   482   \n1655 113.   86.5 \n1656 145   187   \n1657 176.   95.6 \n1658  54.1 112.  \n1659 159.  120.  \n1660 809   285   \n1661 400   379   \n1662 450   410   \n1663 276   279   \n1664 745   397   \n1665 521   395   \n1666 177   172   \n1667 306   326   \n1668 312   388   \n1669 293   305   \n1670 518   476   \n1671 378   401   \n1672 268   267   \n1673 122.  131.  \n1674 143   220   \n1675 252   232   \n1676 266   228   \n1677 276   378   \n1678 282   389   \n1679 459   407   \n1680 253   245   \n1681 409   395   \n1682 157.   96.9 \n1683 334   413   \n1684 195   216   \n1685 137.    2   \n1686 105.   44.9 \n1687 137.  135.  \n1688 536   387   \n1689 346   332   \n1690 183   238   \n1691 105.  114.  \n1692 329   363   \n1693 168.   41   \n1694 106.   95.6 \n1695 420   386   \n1696 308   408   \n1697 624   451   \n1698 154.   57.9 \n1699 506   458   \n1700 299   400   \n1701 146.  102.  \n1702 284   290   \n1703 243   263   \n1704 775   354   \n1705 124.    4.60\n1706 365   315   \n1707 341   349   \n1708 499   461   \n1709 154   194   \n1710 345   347   \n1711 246   237   \n1712 358   433   \n1713 488   482   \n1714 709   409   \n1715 285   406   \n1716 589   386   \n1717 354   407   \n1718  93.1  51.4 \n1719 168   245   \n1720 242   254   \n1721 363   327   \n1722 359   316   \n1723 153.   34.5 \n1724 804   291   \n1725 128.   29.3 \n1726 698   431   \n1727 161.   52.7 \n1728 110    37.1 \n1729 237   190   \n1730 819   286   \n1731 438   396   \n1732 111.   87.8 \n1733 273   239   \n1734 131.   17.6 \n1735 189   204   \n1736 149    51.4 \n1737 267   246   \n1738 659   420   \n1739 423   468   \n1740 245   258   \n1741  63.2 145   \n1742 641   459   \n1743 512   407   \n1744 521   410   \n1745 416   405   \n1746 140   204   \n1747 225   172   \n1748 267   230   \n1749 240   269   \n1750 170   183   \n1751 247   354   \n1752  94.4 138.  \n1753 127.   57.9 \n1754 341   326   \n1755  71   157.  \n1756 164   245   \n1757 145.   39.7 \n1758 198   130   \n1759 780   365   \n1760 554   387   \n1761  76.2 154.  \n1762 243   286   \n1763 311   288   \n1764 607   430   \n1765  65.8 115.  \n1766 279   248   \n1767 703   408   \n1768 251   209   \n1769 373   369   \n1770 246   295   \n1771 261   308   \n1772 281   389   \n1773 302   303   \n1774 339   351   \n1775 157   197   \n1776 543   388   \n1777 165.  107.  \n1778 339   338   \n1779 217   160   \n1780 261   373   \n1781  80.1  47.5 \n1782 228   237   \n1783 221   221   \n1784 122.   56.6 \n1785 283   273   \n1786 122.   77.4 \n1787 128.  135.  \n1788 763   370   \n1789 270   394   \n1790 201   198   \n1791 178   174   \n1792 610   457   \n1793 634   446   \n1794 208   244   \n1795 325   384   \n1796 230   206   \n1797 558   434   \n1798 176.  103.  \n1799 122.   20.2 \n1800 422   388   \n1801 166   175   \n1802 148.   91.7 \n1803 369   358   \n1804 637   461   \n1805 485   472   \n1806 180   225   \n1807 820   287   \n1808 286   384   \n1809 174   138   \n1810 142   200   \n1811 145.   22.8 \n1812 131.   38.4 \n1813 804   292   \n1814 616   414   \n1815 817   311   \n1816 607   390   \n1817 376   395   \n1818 585   386   \n1819 391   454   \n1820 366   386   \n1821 447   457   \n1822 118.  168.  \n1823 412   422   \n1824 219   232   \n1825 145   199   \n1826 396   451   \n1827 469   417   \n1828 676   443   \n1829 774   354   \n1830 688   417   \n1831 252   349   \n1832 629   448   \n1833 576   459   \n1834 554   384   \n1835 105.  109.  \n1836 381   425   \n1837 122.  132   \n1838 176.   96.9 \n1839 639   454   \n1840 264   335   \n1841  68.4 132   \n1842 656   414   \n1843 147   172   \n1844 784   326   \n1845 360   371   \n1846 168.   78.7 \n1847 362   338   \n1848 819   307   \n1849 785   325   \n1850 491   410   \n1851 537   386   \n1852 561   480   \n1853 377   427   \n1854 251   265   \n1855 219   239   \n1856 283   401   \n1857 220   214   \n1858 434   421   \n1859 587   475   \n1860 747   368   \n1861 282   273   \n1862 179   203   \n1863 636   444   \n1864 348   336   \n1865 249   301   \n1866 150.  127.  \n1867 102.   44.9 \n1868 360   429   \n1869 431   402   \n1870 245   226   \n1871 440   474   \n1872 176   144   \n1873  89.2 155.  \n1874  95.7  65.7 \n1875 261   372   \n1876 777   334   \n1877 110    87.8 \n1878 266   387   \n1879 681   422   \n1880 566   395   \n1881 449   476   \n1882 645   437   \n1883 159.   44.9 \n1884  71   158   \n1885 146.  131.  \n1886 249   326   \n1887 418   445   \n1888 498   418   \n1889 583   475   \n1890 191   142   \n1891 561   428   \n1892 558   481   \n1893 132.   61.8 \n1894 207   243   \n1895 738   377   \n1896 374   433   \n1897 713   415   \n1898 226   243   \n1899 176.   39.7 \n1900 148   199   \n1901 105.   96.9 \n1902 420   385   \n1903 217   170   \n1904 292   303   \n1905 693   413   \n1906 283   371   \n1907 155   203   \n1908 118.  170.  \n1909 372   428   \n1910 200   130   \n1911 625   396   \n1912 155   169   \n1913 357   378   \n1914 140.   39.7 \n1915 224   180   \n1916 386   364   \n1917 427   464   \n1918 116.   59.2 \n1919 521   394   \n1920 247   296   \n1921 648   430   \n1922 263   280   \n1923 333   395   \n1924 597   387   \n1925 355   336   \n1926 148   171   \n1927 292   394   \n1928 545   462   \n1929 570   377   \n1930 175    68.3 \n1931 516   401   \n1932 274   276   \n1933 370   373   \n1934 300   400   \n1935 306   337   \n1936 362   352   \n1937 197   204   \n1938 462   412   \n1939 151   175   \n1940 150.  126.  \n1941 771   365   \n1942 264   354   \n1943 308   399   \n1944 204   136   \n1945 616   409   \n1946 157   158   \n1947 356   307   \n1948 203   241   \n1949 542   473   \n1950 265   383   \n1951 518   467   \n1952 265   280   \n1953 466   432   \n1954 101.   69.6 \n1955 115.  128.  \n1956 205   237   \n1957 366   439   \n1958 590   454   \n1959 407   379   \n1960 216   151   \n1961 539   385   \n1962 776   344   \n1963 788   321   \n1964 259   256   \n1965 127.   15   \n1966 172.  115.  \n1967 726   405   \n1968 274   379   \n1969 265   384   \n1970 317   305   \n1971 613   468   \n1972 181   203   \n1973 154.  133.  \n1974 123   132   \n1975 363   323   \n1976 493   410   \n1977 312   322   \n1978 346   346   \n1979 354   311   \n1980 361   317   \n1981 301   416   \n1982 507   444   \n1983 592   452   \n1984 180.   48.8 \n1985 553   462   \n1986 175    69.6 \n1987 148.   26.7 \n1988 367   440   \n1989 265   323   \n1990 153   218   \n1991 219   172   \n1992 136    61.8 \n1993 340   350   \n1994 409   394   \n1995 289   331   \n1996 150.  103.  \n1997 436   391   \n1998 495   482   \n1999 463   408   \n2000 142.  152.  \n2001 800   300   \n2002 106.   67   \n2003 637   430   \n2004 277   387   \n2005 145   175   \n2006 232   184   \n2007 326   358   \n2008 179.   44.9 \n2009 146   173   \n2010 130.  166.  \n2011 547   469   \n2012 394   450   \n2013 124.  109.  \n2014 468   401   \n2015 162   159   \n2016 198   213   \n2017 241   229   \n2018 246   348   \n2019 275   252   \n2020 405   399   \n2021 525   405   \n2022 175    35.8 \n2023 150.   83.9 \n2024 123    42.3 \n2025 749   392   \n2026 223   228   \n2027 220   258   \n2028 284   403   \n2029 251   360   \n2030 175   114.  \n2031 273   339   \n2032 781   329   \n2033 394   387   \n2034 101.  171   \n2035 355   379   \n2036 344   423   \n2037 278   254   \n2038 594   425   \n2039  90.5  72.2 \n2040 489   434   \n2041 357   335   \n2042 166.   81.3 \n2043  93.1  90.4 \n2044 295   415   \n2045 146.   25.4 \n2046 218   162   \n2047 657   416   \n2048 450   472   \n2049 126.   57.9 \n2050 728   403   \n2051 270   255   \n2052 356   312   \n2053 133.  135.  \n2054 526   392   \n2055 262   298   \n2056 162    99.5 \n2057  73.6 140.  \n2058 109.  172.  \n2059 215   212   \n2060 544   434   \n2061 541   383   \n2062 508   440   \n2063 546   380   \n2064  58   114.  \n2065 190   237   \n2066  77.5  48.8 \n2067 130.  135.  \n2068 333   370   \n2069 380   383   \n2070 264   377   \n2071 613   418   \n2072 218   226   \n2073 170.  116.  \n2074 267   361   \n2075 272   334   \n2076 189   196   \n2077 216   170   \n2078 252   339   \n2079 541   479   \n2080 226   210   \n2081 123   107.  \n2082 105.   98.2 \n2083 297   339   \n2084 123   146.  \n2085  85.3 145   \n2086 263   367   \n2087 464   437   \n2088 602   389   \n2089 641   415   \n2090 417   454   \n2091 252   274   \n2092 251   264   \n2093 562   385   \n2094 102.  178.  \n2095 794   347   \n2096 218   254   \n2097 116.   22.8 \n2098 385   366   \n2099 436   395   \n2100 246   346   \n2101 160   177   \n2102  97   168.  \n2103 165   226   \n2104 186   197   \n2105 389   420   \n2106 707   411   \n2107 417   460   \n2108 295   366   \n2109 803   335   \n2110 229   270   \n2111 303   333   \n2112 434   431   \n2113 796   306   \n2114 217   203   \n2115 260   353   \n2116 723   413   \n2117 212   137   \n2118 256   215   \n2119 320   385   \n2120 328   361   \n2121 272   332   \n2122 267   312   \n2123 469   412   \n2124 193   135   \n2125 615   468   \n2126 764   379   \n2127 264   260   \n2128 330   390   \n2129 226   184   \n2130 124.   93   \n2131 493   440   \n2132 797   306   \n2133 422   401   \n2134 170.   76.1 \n2135 250   242   \n2136 102.  146.  \n2137 272   253   \n2138 124.   57.9 \n2139 331   316   \n2140 745   382   \n2141 250   322   \n2142 284   338   \n2143 139.   94.3 \n2144 167   220   \n2145 338   417   \n2146 250   301   \n2147 623   407   \n2148 462   414   \n2149 219   191   \n2150 410   463   \n2151 246   337   \n2152 218   163   \n2153 124.   33.2 \n2154 769   344   \n2155 273   338   \n2156 798   304   \n2157 217   223   \n2158 253   298   \n2159  87.9  90.4 \n2160 277   272   \n2161 469   413   \n2162 747   395   \n2163 127.  133.  \n2164 152   169   \n2165 105.  105.  \n2166 273   372   \n2167 448   464   \n2168 362   370   \n2169 376   368   \n2170 350   309   \n2171 139.   38.4 \n2172  97   166.  \n2173 590   474   \n2174 122.  176.  \n2175 644   412   \n2176 548   482   \n2177 746   396   \n2178 561   444   \n2179 213   248   \n2180 625   411   \n2181 113.   72.2 \n2182  76.2  83.9 \n2183 429   391   \n2184 629   464   \n2185 115.   85.2 \n2186 553   482   \n2187  78.8  47.5 \n2188 126.    4.60\n2189 332   366   \n2190 231   240   \n2191 115.   24.1 \n2192 252   319   \n2193 743   398   \n2194 445   459   \n2195 154   202   \n2196 726   388   \n2197 619   389   \n2198 635   445   \n2199 165   145   \n2200 762   351   \n2201 361   436   \n2202 244   235   \n2203  72.3 162.  \n2204 235   245   \n2205 200   197   \n2206 196   155   \n2207 429   471   \n2208  91.8 161.  \n2209 667   429   \n2210 389   373   \n2211 487   442   \n2212 491   425   \n2213 196   207   \n2214 608   410   \n2215 713   400   \n2216 383   360   \n2217 162   152   \n2218 647   429   \n2219 292   395   \n2220 159   204   \n2221 811   323   \n2222 674   434   \n2223 599   446   \n2224 141.   41   \n2225 184   161   \n2226 598   397   \n2227 217   253   \n2228 337   416   \n2229 279   388   \n2230 124.  133.  \n2231 238   192   \n2232 787   356   \n2233 242   262   \n2234 293   396   \n2235 152.   83.9 \n2236 183   145   \n2237 558   448   \n2238 159.   98.2 \n2239  76.2 111.  \n2240 459   400   \n2241 119.  144.  \n2242 684   439   \n2243  77.5  50.1 \n2244 193   213   \n2245 466   475   \n2246 142.   11.1 \n2247 805   289   \n2248 459   479   \n2249 396   457   \n2250 552   377   \n2251 410   425   \n2252 136   136.  \n2253 757   379   \n2254 289   411   \n2255 119.  145   \n2256 181   204   \n2257 325   406   \n2258 567   416   \n2259 171   173   \n2260 285   405   \n2261 451   461   \n2262 222   225   \n2263 615   389   \n2264 273   284   \n2265 277   292   \n2266 245   237   \n2267 148.  129.  \n2268 797   334   \n2269 356   432   \n2270 334   353   \n2271 216   211   \n2272 167.   44.9 \n2273 327   311   \n2274 368   410   \n2275 711   415   \n2276 168.  109.  \n2277 128.  103.  \n2278 561   374   \n2279 158   175   \n2280 793   311   \n2281 293   265   \n2282 274   326   \n2283 264   311   \n2284 109.   69.6 \n2285 376   439   \n2286 270   269   \n2287 235   277   \n2288 369   329   \n2289 195   196   \n2290 324   306   \n2291 539   384   \n2292 731   407   \n2293 753   389   \n2294 425   447   \n2295 591   441   \n2296 627   464   \n2297 101.  157.  \n2298 196   130   \n2299 198   203   \n2300  67.1 146.  \n2301 690   435   \n2302 730   385   \n2303 198   219   \n2304 349   337   \n2305 175    39.7 \n2306 272   284   \n2307 110   123.  \n2308 461   479   \n2309  76.2  51.4 \n2310 163   149   \n2311 273   292   \n2312 153.  120.  \n2313 560   422   \n2314 180.   55.3 \n2315 246   341   \n2316 454   457   \n2317 266   230   \n2318 160   208   \n2319 451   477   \n2320 342   421   \n2321 107.   93   \n2322 266   339   \n2323 715   418   \n2324 607   458   \n2325 128.   60.5 \n2326 757   376   \n2327 636   408   \n2328 267   390   \n2329 424   469   \n2330 167   204   \n2331 257   333   \n2332 146.   46.2 \n2333 174.  114.  \n2334  94.4 175.  \n2335 698   411   \n2336 810   324   \n2337 332   397   \n2338 114.  141.  \n2339 247   227   \n2340 397   457   \n2341 236   189   \n2342 284   261   \n2343 118.   59.2 \n2344 251   320   \n2345 725   389   \n2346 430   395   \n2347 564   412   \n2348 152.  107.  \n2349 700   410   \n2350 461   445   \n2351 308   400   \n2352 627   450   \n2353 591   453   \n2354 264   378   \n2355 179.   59.2 \n2356 128.   94.3 \n2357 159   145   \n2358 226   233   \n2359 159.   54   \n2360 332   406   \n2361 239   208   \n2362 591   386   \n2363 691   434   \n2364 459   440   \n2365 462   426   \n2366 462   479   \n2367 792   314   \n2368 527   451   \n2369 784   359   \n2370 391   443   \n2371 800   342   \n2372 286   354   \n2373 175   221   \n2374 717   417   \n2375 782   352   \n2376 465   408   \n2377 153.  105.  \n2378 239   193   \n2379 719   400   \n2380 348   416   \n2381 149   103.  \n2382 386   369   \n2383 697   412   \n2384 148.   93   \n2385 234   257   \n2386 482   473   \n2387 157.   95.6 \n2388 649   408   \n2389 178   146   \n2390 161   155   \n2391 534   429   \n2392 183   147   \n2393 808   286   \n2394 175    67   \n2395 566   394   \n2396 806   289   \n2397 241   285   \n2398 109.   89.1 \n2399 540   383   \n2400 404   439   \n2401 113.   20.2 \n2402 326   407   \n2403 628   393   \n2404 107.   54   \n2405 383   372   \n2406 105.  101.  \n2407  94.4  70.9 \n2408 640   442   \n2409 594   387   \n2410 380   426   \n2411 106.  175.  \n2412 163   140   \n2413 651   417   \n2414 261   364   \n2415  77.5  56.6 \n2416  86.6  60.5 \n2417 467   397   \n2418 286   256   \n2419 767   375   \n2420 456   478   \n2421 300   282   \n2422 118.  102.  \n2423 139   195   \n2424 158   169   \n2425 126.  133.  \n2426 174.  115.  \n2427 554   482   \n2428 453   400   \n2429 411   463   \n2430 238   248   \n2431 233   193   \n2432 317   345   \n2433 509   452   \n2434 175   239   \n2435 178.   64.4 \n2436 118.   42.3 \n2437 310   286   \n2438 214   166   \n2439 748   393   \n2440 139.   90.4 \n2441 674   433   \n2442 309   406   \n2443 153   239   \n2444 289   322   \n2445 149   170   \n2446 233   218   \n2447  68.4 146.  \n2448 609   428   \n2449 818   284   \n2450 532   400   \n2451 652   437   \n2452 410   395   \n2453 164   225   \n2454 149   233   \n2455 176.   41   \n2456 387   363   \n2457 611   396   \n2458 127.   29.3 \n2459 110    77.4 \n2460 282   397   \n2461 586   386   \n2462 179.   56.6 \n2463 696   432   \n2464 502   455   \n2465 265   380   \n2466 216   150   \n2467 717   412   \n2468 282   379   \n2469 362   312   \n2470 115.  150.  \n2471 152.   29.3 \n2472 168.   18.9 \n2473 382   449   \n2474 173   199   \n2475 635   402   \n2476 184   160   \n2477 492   482   \n2478 765   379   \n2479 175    37.1 \n2480 535   415   \n2481 782   362   \n2482 641   441   \n2483 110    35.8 \n2484 311   299   \n2485 555   482   \n2486 560   374   \n2487 105.  127.  \n2488 150   188   \n2489 652   410   \n2490 163.   86.5 \n2491 304   294   \n2492 184   197   \n2493 172.   90.4 \n2494 286   280   \n2495 298   272   \n2496 437   473   \n2497 590   386   \n2498 474   413   \n2499 811   322   \n2500 262   224   \n2501 207   139   \n2502 389   453   \n2503 154.   91.7 \n2504 531   456   \n2505 407   462   \n2506 111.  126.  \n2507 136   159.  \n2508 559   432   \n2509 679   423   \n2510 106.   64.4 \n2511 388   453   \n2512 123    35.8 \n2513 148   183   \n2514 530   476   \n2515  84    38.4 \n2516 141.   46.2 \n2517 413   396   \n2518 104.  166.  \n2519 164   224   \n2520 159.  114.  \n2521 283   402   \n2522 376   377   \n2523 546   470   \n2524 550   378   \n2525  78.8 167.  \n2526 122.   43.6 \n2527 639   460   \n2528 144.  132   \n2529 254   269   \n2530  84   145   \n2531 182.  180.  \n2532 411   396   \n2533 574   478   \n2534 109.  164.  \n2535 163   240   \n2536 701   428   \n2537 142.  103.  \n2538 822   300   \n2539 335   415   \n2540 272   338   \n2541 157.   33.2 \n2542 296   370   \n2543 152   200   \n2544 432   391   \n2545 364   368   \n2546 182   238   \n2547 242   269   \n2548  68.4 112.  \n2549 476   398   \n2550 294   306   \n2551 148.  149.  \n2552 176.   94.3 \n2553 164   240   \n2554  86.6 163.  \n2555 251   235   \n2556 424   463   \n2557 116.  128.  \n2558 266   329   \n2559 523   480   \n2560 780   350   \n2561 804   335   \n2562 236   278   \n2563 741   389   \n2564 500   413   \n2565 370   372   \n2566 369   441   \n2567 143   199   \n2568 161   153   \n2569 608   394   \n2570 565   408   \n2571 156.   94.3 \n2572 260   372   \n2573 358   333   \n2574 821   302   \n2575 368   323   \n2576 270   395   \n2577 198   134   \n2578 273   329   \n2579 324   389   \n2580 214   249   \n2581 284   382   \n2582 427   407"
  },
  {
    "objectID": "slides/03-visualize.html#summary-statistics-might-help-us",
    "href": "slides/03-visualize.html#summary-statistics-might-help-us",
    "title": "Data Visualization",
    "section": "Summary statistics might help us",
    "text": "Summary statistics might help us\nvar: x\n\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   50.2   167.2   288.0   346.0   499.8   822.0 \n\n\nvar: y\n\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n    2.0   162.2   314.0   283.3   401.0   482.0 \n\n\ncorrelation between x, y\n\n\n[1] 0.7601536"
  },
  {
    "objectID": "slides/03-visualize.html#who-needs-your-dataviz",
    "href": "slides/03-visualize.html#who-needs-your-dataviz",
    "title": "Data Visualization",
    "section": "Who needs your dataviz?",
    "text": "Who needs your dataviz?\nYou generally visualize data for two types of people:\n\n\nYourself.\nOthers.\n\n\n\nWhen you make dataviz for yourself, your aim is explorative and your goal is to generate as many raw graphs as quickly as possible to gain insights on your data.\n\n\nWhen you make dataviz for others, your aim is communicative and you work to be as clear and as understandable as possible."
  },
  {
    "objectID": "slides/03-visualize.html#exercise",
    "href": "slides/03-visualize.html#exercise",
    "title": "Data Visualization",
    "section": "Exercise",
    "text": "Exercise\n\nWith the penguin dataset:\n\nMake a histogram of the variable bill_length_mm. Repeat the same histogram, but use colors to differentiate species.\nMake a histogram of bill_depth_mm, but only for female penguins.\nMake a scatterplot of flipper_length_mm vs body_mass_g, use colors to differentiate species.\n\n\n\nGet help from ggplot2‚Äôs documentation.\n\nOn ggplot2‚Äôs.\nOn R4DS book.\nOn ggplot2‚Äôs website."
  },
  {
    "objectID": "slides/03-visualize.html#a-grammar-of-graphics",
    "href": "slides/03-visualize.html#a-grammar-of-graphics",
    "title": "Data Visualization",
    "section": "A grammar of graphics",
    "text": "A grammar of graphics\n\n\n\n\nggplot2 is one of the main tools for declaring graphics in R.\nIt is based on the grammar of graphics.\nIt can be used both for explorative analysis and for publication ready graphs."
  },
  {
    "objectID": "slides/03-visualize.html#the-grammar-of-graphics",
    "href": "slides/03-visualize.html#the-grammar-of-graphics",
    "title": "Data Visualization",
    "section": "The grammar of graphics",
    "text": "The grammar of graphics\nThe grammar of graphics is a unifying framework to conceptualize and program datavisualization.\nIt states that most graphics are composed of:\n\nA default dataset and set of mappings from variables to aesthetics.\nOne or more layers, with each layer having one geometric object, one statistical transformation, one position adjustment, and optionally, one dataset and set of aesthetic mappings,\nOne scale for each aesthetic mapping used.\nA coordinate system.\nThe facet specification.\n\nHadley Wickham - A Layered Grammar of Graphics, 2010"
  },
  {
    "objectID": "slides/03-visualize.html#lets-put-it-in-practice",
    "href": "slides/03-visualize.html#lets-put-it-in-practice",
    "title": "Data Visualization",
    "section": "Let‚Äôs put it in practice",
    "text": "Let‚Äôs put it in practice\nA default dataset (penguins) and set of mappings from variables to aesthetics‚Ä¶\n\n\nVariables\n\nbill_length_mm\nbill_depth_mm\nisland\nsex\n\n\nAesthetics\n\nx\ny\ncolour\nshape"
  },
  {
    "objectID": "slides/03-visualize.html#lets-put-it-in-practice-1",
    "href": "slides/03-visualize.html#lets-put-it-in-practice-1",
    "title": "Data Visualization",
    "section": "Let‚Äôs put it in practice",
    "text": "Let‚Äôs put it in practice\n\n\n\n\nflowchart LR\n  bill_length_mm --> x\n  bill_depth_mm --> y\n  island --> colour\n  sex --> shape\n  subgraph Variable\n  bill_length_mm\n  bill_depth_mm\n  island\n  sex\n  end\n  subgraph aesthetics\n  x\n  y\n  colour\n  shape\n  end"
  },
  {
    "objectID": "slides/03-visualize.html#section-6",
    "href": "slides/03-visualize.html#section-6",
    "title": "Data Visualization",
    "section": "",
    "text": "A default dataset\n\n\npenguins %>% \n  drop_na(species, sex) %>% \n  ggplot()"
  },
  {
    "objectID": "slides/03-visualize.html#section-7",
    "href": "slides/03-visualize.html#section-7",
    "title": "Data Visualization",
    "section": "",
    "text": "A default dataset and set of mappings from variables to aesthetics.\n\n\npenguins %>% \n  drop_na(species, sex) %>% \n  ggplot(aes(x = bill_length_mm,\n             y = bill_depth_mm,\n             colour = species,\n             shape = sex))"
  },
  {
    "objectID": "slides/03-visualize.html#section-8",
    "href": "slides/03-visualize.html#section-8",
    "title": "Data Visualization",
    "section": "",
    "text": "One or more layers, with each layer having one geometric object‚Ä¶\n\n\npenguins %>% \n  drop_na(species, sex) %>% \n  ggplot(aes(x = bill_length_mm,\n             y = bill_depth_mm,\n             colour = species,\n             shape = sex)) + \n  geom_point()"
  },
  {
    "objectID": "slides/03-visualize.html#section-9",
    "href": "slides/03-visualize.html#section-9",
    "title": "Data Visualization",
    "section": "",
    "text": "‚Ä¶and a statistical transformation.\n\n\npenguins %>% \n  drop_na(species, sex) %>% \n  ggplot(aes(x = bill_length_mm,\n             y = bill_depth_mm,\n             colour = species,\n             shape = sex)) + \n  geom_point() +\n  geom_smooth()"
  },
  {
    "objectID": "slides/03-visualize.html#section-10",
    "href": "slides/03-visualize.html#section-10",
    "title": "Data Visualization",
    "section": "",
    "text": "‚Ä¶and a statistical transformation.\n\n\npenguins %>% \n  drop_na(species, sex) %>% \n  ggplot(aes(x = bill_length_mm,\n             y = bill_depth_mm,\n             colour = species,\n             shape = sex)) + \n  geom_point() +\n  geom_smooth(method = 'lm')"
  },
  {
    "objectID": "slides/03-visualize.html#section-11",
    "href": "slides/03-visualize.html#section-11",
    "title": "Data Visualization",
    "section": "",
    "text": "The facet specification.\n\n\npenguins %>%\n  drop_na(species, sex) %>% \n  ggplot(aes(x = bill_length_mm,\n             y = bill_depth_mm,\n             colour = species,\n             shape = sex)) + \n  geom_point() +\n  geom_smooth(method = 'lm') +\n  facet_wrap(facets = 'sex', ncol = 1)"
  },
  {
    "objectID": "slides/03-visualize.html#section-12",
    "href": "slides/03-visualize.html#section-12",
    "title": "Data Visualization",
    "section": "",
    "text": "We can also modify the coordinate system, if needed.\n\n\npenguins %>%\n  drop_na(species, sex) %>% \n  ggplot(aes(x = bill_length_mm,\n             y = bill_depth_mm,\n             colour = species,\n             shape = sex)) + \n  stat_identity(geom = 'point') +\n  geom_smooth(method = 'lm') +\n  facet_wrap(facets = 'sex', ncol = 1) +\n  scale_y_log10()"
  },
  {
    "objectID": "slides/03-visualize.html#explore-your-data-with-graphics",
    "href": "slides/03-visualize.html#explore-your-data-with-graphics",
    "title": "Data Visualization",
    "section": "Explore your data with graphics",
    "text": "Explore your data with graphics\nYou can use graphics to learn what‚Äôs inside our data.\nFirst, asking questions about data then, plotting them with different visual models to highlight and learn about data patterns, we can go through these two steps iteratively (plot, rinse and repeat)."
  },
  {
    "objectID": "slides/03-visualize.html#visual-models",
    "href": "slides/03-visualize.html#visual-models",
    "title": "Data Visualization",
    "section": "Visual models",
    "text": "Visual models\nA visual model is a specific type of data visualization, designed to highlight a specific type of pattern in data.\nggplot provides many visual models ready to be used and coustomized.\nThe most used one in exploratory data analysis are:\n\nhistograms,\nboxplots,\nscatterplots,\nheatmaps,\nbarplots."
  },
  {
    "objectID": "slides/04-get.html#dataframes-are-rectangular-datasets",
    "href": "slides/04-get.html#dataframes-are-rectangular-datasets",
    "title": "Get and Clean Data",
    "section": "Dataframes are rectangular datasets",
    "text": "Dataframes are rectangular datasets\nMore often than not when we speak about datasets, we speak about rectangular data, i.e., data in two-dimensional table, made of values organized in rows and columns.\n\n\nEach cell stores a value.\nEach value belongs to one column and one row.\n\n\n\nRectnagular data are the easiest to use, when we get data that are not rectangular, we try to reshape them in that form."
  },
  {
    "objectID": "slides/04-get.html#readr",
    "href": "slides/04-get.html#readr",
    "title": "Get and Clean Data",
    "section": "Readr",
    "text": "Readr\n\n\n\n\nReadr is a package that loads (reads) Rectangular Text data in R.\nIt‚Äôs fast, it guesses column types explicitly and it‚Äôs pipe friendly\nYou can use it to read both local data and online data from a URL.\nFor example we can use it to read data in CSV and TSV formats and many more."
  },
  {
    "objectID": "slides/04-get.html#read-the-palmer-pengunis-dataset",
    "href": "slides/04-get.html#read-the-palmer-pengunis-dataset",
    "title": "Get and Clean Data",
    "section": "Read the Palmer Pengunis dataset",
    "text": "Read the Palmer Pengunis dataset\nWe can use again on the Palmer Penguins Dataset\nThe source code of this package, is on github; we can find the tidy CSV data in the inst/exdata folder.\n\n\npenguin_csv_url <- 'https://raw.githubusercontent.com/allisonhorst/palmerpenguins/main/inst/extdata/penguins.csv'\n \nread_csv(penguin_csv_url)\n\nRows: 344 Columns: 8\n‚îÄ‚îÄ Column specification ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\nDelimiter: \",\"\nchr (3): species, island, sex\ndbl (5): bill_length_mm, bill_depth_mm, flipper_length_mm, body_mass_g, year\n\n‚Ñπ Use `spec()` to retrieve the full column specification for this data.\n‚Ñπ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n# A tibble: 344 √ó 8\n   species island    bill_length_mm bill_depth_mm flipper_‚Ä¶¬π body_‚Ä¶¬≤ sex    year\n   <chr>   <chr>              <dbl>         <dbl>      <dbl>   <dbl> <chr> <dbl>\n 1 Adelie  Torgersen           39.1          18.7        181    3750 male   2007\n 2 Adelie  Torgersen           39.5          17.4        186    3800 fema‚Ä¶  2007\n 3 Adelie  Torgersen           40.3          18          195    3250 fema‚Ä¶  2007\n 4 Adelie  Torgersen           NA            NA           NA      NA <NA>   2007\n 5 Adelie  Torgersen           36.7          19.3        193    3450 fema‚Ä¶  2007\n 6 Adelie  Torgersen           39.3          20.6        190    3650 male   2007\n 7 Adelie  Torgersen           38.9          17.8        181    3625 fema‚Ä¶  2007\n 8 Adelie  Torgersen           39.2          19.6        195    4675 male   2007\n 9 Adelie  Torgersen           34.1          18.1        193    3475 <NA>   2007\n10 Adelie  Torgersen           42            20.2        190    4250 <NA>   2007\n# ‚Ä¶ with 334 more rows, and abbreviated variable names ¬π‚Äãflipper_length_mm,\n#   ¬≤‚Äãbody_mass_g\n# ‚Ñπ Use `print(n = ...)` to see more rows"
  },
  {
    "objectID": "slides/04-get.html#section",
    "href": "slides/04-get.html#section",
    "title": "Get and Clean Data",
    "section": "",
    "text": "The tibble that we have loaded and generate d from CSV is not identical to the one that comes already loaded with the palmerpenguins package:\n\npenguins_from_csv <- \n  penguin_csv_url %>% \n  read_csv()\n\nidentical(\n  penguins_from_csv,\n  palmerpenguins::penguins\n)\n\n[1] FALSE\n\n\nLet‚Äôs compare them side by side\n\n\n\npalmerpenguins::penguins %>% \n  glimpse(width = 40)\n\nRows: 344\nColumns: 8\n$ species           <fct> Adelie, Adel‚Ä¶\n$ island            <fct> Torgersen, T‚Ä¶\n$ bill_length_mm    <dbl> 39.1, 39.5, ‚Ä¶\n$ bill_depth_mm     <dbl> 18.7, 17.4, ‚Ä¶\n$ flipper_length_mm <int> 181, 186, 19‚Ä¶\n$ body_mass_g       <int> 3750, 3800, ‚Ä¶\n$ sex               <fct> male, female‚Ä¶\n$ year              <int> 2007, 2007, ‚Ä¶\n\n\n\n\npenguins_from_csv %>% \n  glimpse(width = 40)\n\nRows: 344\nColumns: 8\n$ species           <chr> \"Adelie\", \"A‚Ä¶\n$ island            <chr> \"Torgersen\",‚Ä¶\n$ bill_length_mm    <dbl> 39.1, 39.5, ‚Ä¶\n$ bill_depth_mm     <dbl> 18.7, 17.4, ‚Ä¶\n$ flipper_length_mm <dbl> 181, 186, 19‚Ä¶\n$ body_mass_g       <dbl> 3750, 3800, ‚Ä¶\n$ sex               <chr> \"male\", \"fem‚Ä¶\n$ year              <dbl> 2007, 2007, ‚Ä¶\n\n\n\n\nCan you spot that column types are different?"
  },
  {
    "objectID": "slides/04-get.html#parsing",
    "href": "slides/04-get.html#parsing",
    "title": "Get and Clean Data",
    "section": "Parsing",
    "text": "Parsing\nWhen we read data from text encoded ‚Äúdelimited‚Äù files, such as CSV, we use function that parse the file.\nWhen we parse something, we formalize its structure applying a set of grammatical rules.\nNo parsing rule is perfect, thus we must often review the results and ‚Äúfix‚Äù parsing ‚Äúmistakes‚Äù.\n\n# specify column types manually\n\npenguins_from_csv <-\n  penguin_csv_url %>% \n  read_csv(\n    col_types = cols(\n      species = col_factor(),\n      island = col_factor(),\n      flipper_length_mm = col_integer(),\n      body_mass_g = col_integer(),\n      sex = col_factor(),\n      year = col_integer()\n    )\n  )"
  },
  {
    "objectID": "slides/04-get.html#exercise",
    "href": "slides/04-get.html#exercise",
    "title": "Get and Clean Data",
    "section": "Exercise",
    "text": "Exercise\nFind the source code of the readr package.\nIn the inst/extdata folder you can find 10 datasets that display different challenges that you might enconter when you have to load data from an external file.\nLoad in R at least 3 of those datasets using functions from readr.\nGet help from readr‚Äôs documentation and the data import chapter of r4ds.\nWhich function did you use? Did you encounter any parsing failure? How did you fix it?"
  },
  {
    "objectID": "slides/04-get.html#read-a-dataset-from-pangaea",
    "href": "slides/04-get.html#read-a-dataset-from-pangaea",
    "title": "Get and Clean Data",
    "section": "Read a dataset from PANGAEA",
    "text": "Read a dataset from PANGAEA\nPANGAEA, a Data repository for the evironmental sciences.\nFor our exercise we will use this dataset from Wu et al:\n\n\n‚ÄúEffect of barite-bound Sr on detrital Sr isotope systematics in marine sediments with pertinent Mediterranean examples‚Äù.\n\n\nhttps://doi.pangaea.de/10.1594/PANGAEA.946258"
  },
  {
    "objectID": "slides/04-get.html#section-1",
    "href": "slides/04-get.html#section-1",
    "title": "Get and Clean Data",
    "section": "",
    "text": "pangaea_filename <- 'Dataset_S2_HCl-leaching.tab'\n\npangaea_path <- here('data-int/Wu-etal_2022/datasets', pangaea_filename)\n\nLet‚Äôs try to read the data file Dataset_S2_HCl-leaching.tab.\nIt‚Äôs a .tab file.\n\npangaea_data <- \n  pangaea_path %>% \n  read_delim()\n\nWarning: One or more parsing issues, see `problems()` for details\n\n\nRows: 177 Columns: 3\n‚îÄ‚îÄ Column specification ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\nDelimiter: \" \"\nchr (3): /*, DATA, DESCRIPTION:\n\n‚Ñπ Use `spec()` to retrieve the full column specification for this data.\n‚Ñπ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "slides/04-get.html#section-2",
    "href": "slides/04-get.html#section-2",
    "title": "Get and Clean Data",
    "section": "",
    "text": "If we call problems() readr tells us what went wrong.\n\npangaea_data\n\n# A tibble: 177 √ó 3\n   `/*`                   DATA           `DESCRIPTION:`                         \n   <chr>                  <chr>          <chr>                                  \n 1 \"Citation:\\tWu,\"       \"Jiawang;\"     \"Liu, Zhifei; Michard, Annie; Tachikaw‚Ä¶\n 2 \"\\tIn:\"                \"Wu,\"          \"J et al. (2022): Effect of barite-bou‚Ä¶\n 3 \"Keyword(s):\\tBarite;\" \"Barium\"       \"(Ba); marine sediments; Mediterranean‚Ä¶\n 4 \"Related\"              \"to:\\tWu,\"     \"Jiawang; Liu, Zhifei; Michard, Annie;‚Ä¶\n 5 \"Funding:\\tChina\"      \"Postdoctoral\" \"Science Foundation (URI: http://res.c‚Ä¶\n 6 \"\\tChina\"              \"Postdoctoral\" \"Science Foundation (URI: http://res.c‚Ä¶\n 7 \"\\tEuropean\"           \"Commission\"   \"(EC), grant/award no. MAS2-CT93-0051:‚Ä¶\n 8 \"\\tEuropean\"           \"Commission\"   \"(EC), grant/award no. MAS3 CT97-0137:‚Ä¶\n 9 \"\\tEuropean\"           \"Commission\"   \"(EC), grant/award no. MAST1-90022C: E‚Ä¶\n10 \"\\tNational\"           \"Natural\"      \"Science Foundation of China (NSFC) (U‚Ä¶\n# ‚Ä¶ with 167 more rows\n# ‚Ñπ Use `print(n = ...)` to see more rows"
  },
  {
    "objectID": "slides/04-get.html#section-3",
    "href": "slides/04-get.html#section-3",
    "title": "Get and Clean Data",
    "section": "",
    "text": "We can use the arguments:\n\n\ndelim = '\\t' to tell read_delim() that we are reading a file delimited by tabulature (\\t).\nskip = 49 to tell it that the first 49 rows must be skipped.\n\n\n\npangaea_data <- \n  pangaea_path %>% \n  read_delim(delim = '\\t',\n             skip = 49)"
  },
  {
    "objectID": "slides/04-get.html#section-4",
    "href": "slides/04-get.html#section-4",
    "title": "Get and Clean Data",
    "section": "",
    "text": "Now the data that we‚Äôve imported into R looks fine.\n\npangaea_data %>% glimpse()\n\nRows: 128\nColumns: 19\n$ Event                      <chr> \"SL73BC\", \"SL73BC\", \"SL73BC\", \"SL73BC\", \"SL‚Ä¶\n$ Latitude                   <dbl> 39.6617, 39.6617, 39.6617, 39.6617, 39.6617‚Ä¶\n$ Longitude                  <dbl> 24.5117, 24.5117, 24.5117, 24.5117, 24.5117‚Ä¶\n$ `Elevation [m]`            <dbl> -339, -339, -339, -339, -339, -339, -339, -‚Ä¶\n$ `Sample label (barite-Sr)` <chr> \"SL73-1\", \"SL73-2\", \"SL73-3\", \"SL73-4\", \"SL‚Ä¶\n$ `Samp type`                <chr> \"non-S1\", \"non-S1\", \"non-S1\", \"S1b\", \"S1b\",‚Ä¶\n$ `Depth [m]`                <dbl> 0.0045, 0.0465, 0.0665, 0.1215, 0.1765, 0.1‚Ä¶\n$ `Age [ka BP]`              <dbl> 1.66, 3.13, 4.13, 5.75, 7.30, 7.78, 8.65, 9‚Ä¶\n$ `CaCO3 [%]`                <dbl> 61.5, 55.1, 53.0, 43.4, 41.8, 42.3, 42.6, 3‚Ä¶\n$ `Ba [¬µg/g] (Leachate)`     <dbl> 72.6, 64.3, 37.4, 63.5, 101.0, 141.0, 75.2,‚Ä¶\n$ `Sr [¬µg/g] (Leachate)`     <dbl> 767, 681, 690, 552, 527, 528, 551, 482, 391‚Ä¶\n$ `Ca [¬µg/g] (Leachate)`     <dbl> 188951.9, 163260.4, 162188.7, 125937.6, 124‚Ä¶\n$ `Al [¬µg/g] (Leachate)`     <dbl> 10612.7, 11428.4, 5463.0, 3261.5, 2121.7, 1‚Ä¶\n$ `Fe [¬µg/g] (Leachate)`     <dbl> 5935.0, 6814.3, 2465.7, 3936.8, 189.6, 7711‚Ä¶\n$ `Ba [¬µg/g] (Residue)`      <dbl> 171.0, 198.0, 251.0, 290.0, 315.0, 259.0, 3‚Ä¶\n$ `Sr [¬µg/g] (Residue)`      <dbl> 66.6, 71.3, 90.3, 99.8, 106.0, 90.7, 108.0,‚Ä¶\n$ `Ca [¬µg/g] (Residue)`      <dbl> 2315.5, 2369.6, 3007.7, 3447.9, 3713.2, 331‚Ä¶\n$ `Al [¬µg/g] (Residue)`      <dbl> 29262.5, 35561.4, 45862.4, 52485.6, 55083.0‚Ä¶\n$ `Fe [¬µg/g] (Residue)`      <dbl> 14834.8, 18301.4, 24534.5, 30745.3, 28532.2‚Ä¶"
  },
  {
    "objectID": "slides/04-get.html#section-5",
    "href": "slides/04-get.html#section-5",
    "title": "Get and Clean Data",
    "section": "",
    "text": "Now the data that we‚Äôve imported into R looks fine.\n\npangaea_data %>% skimr::skim()\n\n\nData summary\n\n\nName\nPiped data\n\n\nNumber of rows\n128\n\n\nNumber of columns\n19\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n3\n\n\nnumeric\n16\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nEvent\n0\n1\n5\n7\n0\n11\n0\n\n\nSample label (barite-Sr)\n0\n1\n5\n7\n0\n128\n0\n\n\nSamp type\n0\n1\n3\n6\n0\n3\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nLatitude\n0\n1\n35.32\n2.24\n33.38\n33.67\n34.55\n35.29\n39.66\n‚ñá‚ñÇ‚ñÅ‚ñÅ‚ñÉ\n\n\nLongitude\n0\n1\n22.79\n8.17\n4.51\n17.86\n24.51\n28.61\n32.67\n‚ñÇ‚ñÅ‚ñÜ‚ñÜ‚ñá\n\n\nElevation [m]\n0\n1\n-1807.65\n829.55\n-3390.00\n-2373.00\n-1587.00\n-1375.00\n-339.00\n‚ñÇ‚ñá‚ñÅ‚ñÖ‚ñÖ\n\n\nDepth [m]\n0\n1\n0.30\n0.25\n0.00\n0.17\n0.26\n0.34\n1.40\n‚ñá‚ñÖ‚ñÅ‚ñÅ‚ñÅ\n\n\nAge [ka BP]\n0\n1\n7.88\n3.49\n0.30\n5.83\n7.86\n9.82\n19.61\n‚ñÉ‚ñá‚ñá‚ñÇ‚ñÅ\n\n\nCaCO3 [%]\n0\n1\n57.94\n8.29\n33.70\n52.58\n57.80\n64.45\n74.60\n‚ñÅ‚ñÉ‚ñá‚ñá‚ñÖ\n\n\nBa [¬µg/g] (Leachate)\n0\n1\n216.49\n223.26\n0.00\n37.15\n122.00\n398.75\n954.00\n‚ñá‚ñÇ‚ñÇ‚ñÅ‚ñÅ\n\n\nSr [¬µg/g] (Leachate)\n0\n1\n784.98\n207.08\n341.00\n635.15\n767.50\n886.25\n1419.00\n‚ñÉ‚ñá‚ñá‚ñÇ‚ñÅ\n\n\nCa [¬µg/g] (Leachate)\n0\n1\n179277.91\n34034.64\n82460.20\n158421.22\n182153.85\n204214.33\n240253.00\n‚ñÅ‚ñÉ‚ñÜ‚ñá‚ñÖ\n\n\nAl [¬µg/g] (Leachate)\n0\n1\n9075.10\n3739.72\n122.20\n6036.95\n9034.50\n11691.80\n21011.90\n‚ñÇ‚ñá‚ñá‚ñÖ‚ñÅ\n\n\nFe [¬µg/g] (Leachate)\n0\n1\n7673.07\n4235.50\n189.60\n4937.08\n6918.25\n9513.88\n21428.70\n‚ñÉ‚ñá‚ñÉ‚ñÅ‚ñÅ\n\n\nBa [¬µg/g] (Residue)\n0\n1\n184.58\n109.97\n54.80\n98.30\n142.00\n251.00\n507.00\n‚ñá‚ñÉ‚ñÇ‚ñÅ‚ñÅ\n\n\nSr [¬µg/g] (Residue)\n0\n1\n46.15\n17.69\n20.50\n33.53\n41.10\n51.85\n120.00\n‚ñá‚ñá‚ñÇ‚ñÅ‚ñÅ\n\n\nCa [¬µg/g] (Residue)\n0\n1\n1316.60\n930.42\n475.50\n825.50\n1057.45\n1446.40\n8343.50\n‚ñá‚ñÅ‚ñÅ‚ñÅ‚ñÅ\n\n\nAl [¬µg/g] (Residue)\n0\n1\n36668.75\n8937.30\n19227.20\n29424.80\n37297.75\n43806.80\n60033.10\n‚ñÜ‚ñá‚ñá‚ñÜ‚ñÅ\n\n\nFe [¬µg/g] (Residue)\n0\n1\n21446.97\n6866.21\n10823.30\n16197.70\n20393.90\n24408.27\n48057.60\n‚ñá‚ñá‚ñÉ‚ñÅ‚ñÅ"
  },
  {
    "objectID": "slides/04-get.html#always-check-for-missing-values",
    "href": "slides/04-get.html#always-check-for-missing-values",
    "title": "Get and Clean Data",
    "section": "Always check for missing values",
    "text": "Always check for missing values\nskimr::skim() shows you how many values are missing in your dataset:\n\n\nHow many missing value are there?\nWhere do they occur?"
  },
  {
    "objectID": "slides/04-get.html#section-6",
    "href": "slides/04-get.html#section-6",
    "title": "Get and Clean Data",
    "section": "",
    "text": "A more formal way to check for missing values.\n\npangaea_data %>% \n  summarise(\n    across(\n      .fns = ~is.na(.) %>% sum()\n    )\n  ) %>% \n  glimpse()\n\nRows: 1\nColumns: 19\n$ Event                      <int> 0\n$ Latitude                   <int> 0\n$ Longitude                  <int> 0\n$ `Elevation [m]`            <int> 0\n$ `Sample label (barite-Sr)` <int> 0\n$ `Samp type`                <int> 0\n$ `Depth [m]`                <int> 0\n$ `Age [ka BP]`              <int> 0\n$ `CaCO3 [%]`                <int> 0\n$ `Ba [¬µg/g] (Leachate)`     <int> 0\n$ `Sr [¬µg/g] (Leachate)`     <int> 0\n$ `Ca [¬µg/g] (Leachate)`     <int> 0\n$ `Al [¬µg/g] (Leachate)`     <int> 0\n$ `Fe [¬µg/g] (Leachate)`     <int> 0\n$ `Ba [¬µg/g] (Residue)`      <int> 0\n$ `Sr [¬µg/g] (Residue)`      <int> 0\n$ `Ca [¬µg/g] (Residue)`      <int> 0\n$ `Al [¬µg/g] (Residue)`      <int> 0\n$ `Fe [¬µg/g] (Residue)`      <int> 0"
  },
  {
    "objectID": "slides/04-get.html#quick-checklist-when-you-read-new-data-into-r",
    "href": "slides/04-get.html#quick-checklist-when-you-read-new-data-into-r",
    "title": "Get and Clean Data",
    "section": "Quick checklist when you read new data into R",
    "text": "Quick checklist when you read new data into R\n\n\nCheck for missing values.\nCheck the column types, are they what you expect?\nCheck the row number and the column names.\nOptional, check the head() and the tail() of the file.\n\n\nNow let‚Äôs tidy the data."
  },
  {
    "objectID": "slides/04-get.html#exercise-1",
    "href": "slides/04-get.html#exercise-1",
    "title": "Get and Clean Data",
    "section": "Exercise",
    "text": "Exercise\nTidytuesday is a weekly data project aimed at learning, collaborating and networking the R ecosystem.\nFind this week‚Äôs dataset and read it in R. Run the checklist from the previous slide on the data that you‚Äôve read.\nIf you are donw early, proceed reading data from the previous week or find a colleague to help.\nCheck Tidytuesday submissions on Twitter with the hashtag #TidyTuesday\n\n\n2022 CBSER Summer School"
  },
  {
    "objectID": "slides/05-clean.html#which-dataset-is-tidy",
    "href": "slides/05-clean.html#which-dataset-is-tidy",
    "title": "Clean and Tidy Data",
    "section": "Which Dataset is Tidy?",
    "text": "Which Dataset is Tidy?\nA common practical way to structure (empirical) data.\n\n\nEvery column is a variable.\nEvery row is an observation.\nEvery cell is a single value.\n(Every observational unit is in its own table).\n\n\nPlus: fixed variables should come first, followed by measured variables.\nReference: An Introduction to Tidy Data"
  },
  {
    "objectID": "slides/05-clean.html#section",
    "href": "slides/05-clean.html#section",
    "title": "Clean and Tidy Data",
    "section": "",
    "text": "Joey\n\n\nMonica\n\n\nRachel\n\n\nPhoebe\n\n\nRoss\n\n\nChandler\n\n\nTribbiani\n\n\nGeller\n\n\nGreen\n\n\nBuffay\n\n\nGeller\n\n\nBing\n\n\n27\n\n\n24\n\n\n23\n\n\n27\n\n\n26\n\n\n26"
  },
  {
    "objectID": "slides/05-clean.html#semantics-of-tidy-data",
    "href": "slides/05-clean.html#semantics-of-tidy-data",
    "title": "Clean and Tidy Data",
    "section": "Semantics of (tidy) Data",
    "text": "Semantics of (tidy) Data\nAlways quoting the Tidy Data article:\n\nA dataset is a collection of values.\nEvery value belongs to a variable and an observation.\nA variable contains all values that measure the same underlying attribute (like height, temperature, duration) across units.\nAn observation contains all values measured on the same unit (like a person, or a day, or a race) across attributes"
  },
  {
    "objectID": "slides/05-clean.html#tools-tidy-data-with-tidyr",
    "href": "slides/05-clean.html#tools-tidy-data-with-tidyr",
    "title": "Clean and Tidy Data",
    "section": "Tools: Tidy data with Tidyr",
    "text": "Tools: Tidy data with Tidyr\n\n\n\n\nTidyr provides functions for:\n\nPivoting data.\nRectangling data.\nNesting data.\nCombining and splitting columns.\nMake missing values explicit."
  },
  {
    "objectID": "slides/05-clean.html#pangea-data",
    "href": "slides/05-clean.html#pangea-data",
    "title": "Clean and Tidy Data",
    "section": "Pangea Data",
    "text": "Pangea Data\nRemember the dataset from Pangaea?\n\npangaea_filename <- 'Dataset_S2_HCl-leaching.tab'\n\npangaea_path <- here('data-int/Wu-etal_2022/datasets', pangaea_filename)\n\npangaea_data <- \n  pangaea_path %>% \n  read_delim(delim = '\\t',\n             skip = 49)\n\n\npangaea_data %>% \n  glimpse()\n\nRows: 128\nColumns: 19\n$ Event                      <chr> \"SL73BC\", \"SL73BC\", \"SL73BC\", \"SL73BC\", \"SL‚Ä¶\n$ Latitude                   <dbl> 39.6617, 39.6617, 39.6617, 39.6617, 39.6617‚Ä¶\n$ Longitude                  <dbl> 24.5117, 24.5117, 24.5117, 24.5117, 24.5117‚Ä¶\n$ `Elevation [m]`            <dbl> -339, -339, -339, -339, -339, -339, -339, -‚Ä¶\n$ `Sample label (barite-Sr)` <chr> \"SL73-1\", \"SL73-2\", \"SL73-3\", \"SL73-4\", \"SL‚Ä¶\n$ `Samp type`                <chr> \"non-S1\", \"non-S1\", \"non-S1\", \"S1b\", \"S1b\",‚Ä¶\n$ `Depth [m]`                <dbl> 0.0045, 0.0465, 0.0665, 0.1215, 0.1765, 0.1‚Ä¶\n$ `Age [ka BP]`              <dbl> 1.66, 3.13, 4.13, 5.75, 7.30, 7.78, 8.65, 9‚Ä¶\n$ `CaCO3 [%]`                <dbl> 61.5, 55.1, 53.0, 43.4, 41.8, 42.3, 42.6, 3‚Ä¶\n$ `Ba [¬µg/g] (Leachate)`     <dbl> 72.6, 64.3, 37.4, 63.5, 101.0, 141.0, 75.2,‚Ä¶\n$ `Sr [¬µg/g] (Leachate)`     <dbl> 767, 681, 690, 552, 527, 528, 551, 482, 391‚Ä¶\n$ `Ca [¬µg/g] (Leachate)`     <dbl> 188951.9, 163260.4, 162188.7, 125937.6, 124‚Ä¶\n$ `Al [¬µg/g] (Leachate)`     <dbl> 10612.7, 11428.4, 5463.0, 3261.5, 2121.7, 1‚Ä¶\n$ `Fe [¬µg/g] (Leachate)`     <dbl> 5935.0, 6814.3, 2465.7, 3936.8, 189.6, 7711‚Ä¶\n$ `Ba [¬µg/g] (Residue)`      <dbl> 171.0, 198.0, 251.0, 290.0, 315.0, 259.0, 3‚Ä¶\n$ `Sr [¬µg/g] (Residue)`      <dbl> 66.6, 71.3, 90.3, 99.8, 106.0, 90.7, 108.0,‚Ä¶\n$ `Ca [¬µg/g] (Residue)`      <dbl> 2315.5, 2369.6, 3007.7, 3447.9, 3713.2, 331‚Ä¶\n$ `Al [¬µg/g] (Residue)`      <dbl> 29262.5, 35561.4, 45862.4, 52485.6, 55083.0‚Ä¶\n$ `Fe [¬µg/g] (Residue)`      <dbl> 14834.8, 18301.4, 24534.5, 30745.3, 28532.2‚Ä¶"
  },
  {
    "objectID": "slides/05-clean.html#clean-the-column-names-with-janitor",
    "href": "slides/05-clean.html#clean-the-column-names-with-janitor",
    "title": "Clean and Tidy Data",
    "section": "Clean the column names with Janitor",
    "text": "Clean the column names with Janitor\nwe can remove capitalization, spaces, and strange characters from the column names with the function clean_names() from the Janitor Package.\n\npangaea_data <- \n  pangaea_data %>% \n  janitor::clean_names()\n\npangaea_data %>%\n  glimpse()\n\nRows: 128\nColumns: 19\n$ event                  <chr> \"SL73BC\", \"SL73BC\", \"SL73BC\", \"SL73BC\", \"SL73BC‚Ä¶\n$ latitude               <dbl> 39.6617, 39.6617, 39.6617, 39.6617, 39.6617, 39‚Ä¶\n$ longitude              <dbl> 24.5117, 24.5117, 24.5117, 24.5117, 24.5117, 24‚Ä¶\n$ elevation_m            <dbl> -339, -339, -339, -339, -339, -339, -339, -339,‚Ä¶\n$ sample_label_barite_sr <chr> \"SL73-1\", \"SL73-2\", \"SL73-3\", \"SL73-4\", \"SL73-5‚Ä¶\n$ samp_type              <chr> \"non-S1\", \"non-S1\", \"non-S1\", \"S1b\", \"S1b\", \"S1‚Ä¶\n$ depth_m                <dbl> 0.0045, 0.0465, 0.0665, 0.1215, 0.1765, 0.1915,‚Ä¶\n$ age_ka_bp              <dbl> 1.66, 3.13, 4.13, 5.75, 7.30, 7.78, 8.65, 9.94,‚Ä¶\n$ ca_co3_percent         <dbl> 61.5, 55.1, 53.0, 43.4, 41.8, 42.3, 42.6, 39.1,‚Ä¶\n$ ba_mg_g_leachate       <dbl> 72.6, 64.3, 37.4, 63.5, 101.0, 141.0, 75.2, 99.‚Ä¶\n$ sr_mg_g_leachate       <dbl> 767, 681, 690, 552, 527, 528, 551, 482, 391, 70‚Ä¶\n$ ca_mg_g_leachate       <dbl> 188951.9, 163260.4, 162188.7, 125937.6, 124733.‚Ä¶\n$ al_mg_g_leachate       <dbl> 10612.7, 11428.4, 5463.0, 3261.5, 2121.7, 12740‚Ä¶\n$ fe_mg_g_leachate       <dbl> 5935.0, 6814.3, 2465.7, 3936.8, 189.6, 7711.3, ‚Ä¶\n$ ba_mg_g_residue        <dbl> 171.0, 198.0, 251.0, 290.0, 315.0, 259.0, 310.0‚Ä¶\n$ sr_mg_g_residue        <dbl> 66.6, 71.3, 90.3, 99.8, 106.0, 90.7, 108.0, 96.‚Ä¶\n$ ca_mg_g_residue        <dbl> 2315.5, 2369.6, 3007.7, 3447.9, 3713.2, 3316.7,‚Ä¶\n$ al_mg_g_residue        <dbl> 29262.5, 35561.4, 45862.4, 52485.6, 55083.0, 44‚Ä¶\n$ fe_mg_g_residue        <dbl> 14834.8, 18301.4, 24534.5, 30745.3, 28532.2, 22‚Ä¶\n\n\nWatch out: Janitor transforms ¬µ into m (so micrograms become milligrams)."
  },
  {
    "objectID": "slides/05-clean.html#place-fixed-variables-in-the-first-columns",
    "href": "slides/05-clean.html#place-fixed-variables-in-the-first-columns",
    "title": "Clean and Tidy Data",
    "section": "Place fixed variables in the first columns",
    "text": "Place fixed variables in the first columns\nWhich column is a fixed variable?\nI‚Äôm not sure if ca_co3_percent is a measured variable, and if it belongs to another informational unit.\nBesides that, the fixed variables are already in front."
  },
  {
    "objectID": "slides/05-clean.html#there-are-values-stored-in-the-column-names",
    "href": "slides/05-clean.html#there-are-values-stored-in-the-column-names",
    "title": "Clean and Tidy Data",
    "section": "There are values stored in the column names",
    "text": "There are values stored in the column names\nLet‚Äôs pivot the measured variables.\n\npangaea_long <- \n  pangaea_data %>% \n  pivot_longer(\n    cols = contains(match = c('leachate', 'residue')),\n    values_to = 'concentration',\n    names_to = 'element'\n  )\n\npangaea_long\n\n# A tibble: 1,280 √ó 11\n   event latit‚Ä¶¬π longi‚Ä¶¬≤ eleva‚Ä¶¬≥ sampl‚Ä¶‚Å¥ samp_‚Ä¶‚Åµ depth_m age_k‚Ä¶‚Å∂ ca_co‚Ä¶‚Å∑ element\n   <chr>   <dbl>   <dbl>   <dbl> <chr>   <chr>     <dbl>   <dbl>   <dbl> <chr>  \n 1 SL73‚Ä¶    39.7    24.5    -339 SL73-1  non-S1   0.0045    1.66    61.5 ba_mg_‚Ä¶\n 2 SL73‚Ä¶    39.7    24.5    -339 SL73-1  non-S1   0.0045    1.66    61.5 sr_mg_‚Ä¶\n 3 SL73‚Ä¶    39.7    24.5    -339 SL73-1  non-S1   0.0045    1.66    61.5 ca_mg_‚Ä¶\n 4 SL73‚Ä¶    39.7    24.5    -339 SL73-1  non-S1   0.0045    1.66    61.5 al_mg_‚Ä¶\n 5 SL73‚Ä¶    39.7    24.5    -339 SL73-1  non-S1   0.0045    1.66    61.5 fe_mg_‚Ä¶\n 6 SL73‚Ä¶    39.7    24.5    -339 SL73-1  non-S1   0.0045    1.66    61.5 ba_mg_‚Ä¶\n 7 SL73‚Ä¶    39.7    24.5    -339 SL73-1  non-S1   0.0045    1.66    61.5 sr_mg_‚Ä¶\n 8 SL73‚Ä¶    39.7    24.5    -339 SL73-1  non-S1   0.0045    1.66    61.5 ca_mg_‚Ä¶\n 9 SL73‚Ä¶    39.7    24.5    -339 SL73-1  non-S1   0.0045    1.66    61.5 al_mg_‚Ä¶\n10 SL73‚Ä¶    39.7    24.5    -339 SL73-1  non-S1   0.0045    1.66    61.5 fe_mg_‚Ä¶\n# ‚Ä¶ with 1,270 more rows, 1 more variable: concentration <dbl>, and abbreviated\n#   variable names ¬π‚Äãlatitude, ¬≤‚Äãlongitude, ¬≥‚Äãelevation_m,\n#   ‚Å¥‚Äãsample_label_barite_sr, ‚Åµ‚Äãsamp_type, ‚Å∂‚Äãage_ka_bp, ‚Å∑‚Äãca_co3_percent\n# ‚Ñπ Use `print(n = ...)` to see more rows, and `colnames()` to see all variable names\n\npangaea_long %>% glimpse()\n\nRows: 1,280\nColumns: 11\n$ event                  <chr> \"SL73BC\", \"SL73BC\", \"SL73BC\", \"SL73BC\", \"SL73BC‚Ä¶\n$ latitude               <dbl> 39.6617, 39.6617, 39.6617, 39.6617, 39.6617, 39‚Ä¶\n$ longitude              <dbl> 24.5117, 24.5117, 24.5117, 24.5117, 24.5117, 24‚Ä¶\n$ elevation_m            <dbl> -339, -339, -339, -339, -339, -339, -339, -339,‚Ä¶\n$ sample_label_barite_sr <chr> \"SL73-1\", \"SL73-1\", \"SL73-1\", \"SL73-1\", \"SL73-1‚Ä¶\n$ samp_type              <chr> \"non-S1\", \"non-S1\", \"non-S1\", \"non-S1\", \"non-S1‚Ä¶\n$ depth_m                <dbl> 0.0045, 0.0045, 0.0045, 0.0045, 0.0045, 0.0045,‚Ä¶\n$ age_ka_bp              <dbl> 1.66, 1.66, 1.66, 1.66, 1.66, 1.66, 1.66, 1.66,‚Ä¶\n$ ca_co3_percent         <dbl> 61.5, 61.5, 61.5, 61.5, 61.5, 61.5, 61.5, 61.5,‚Ä¶\n$ element                <chr> \"ba_mg_g_leachate\", \"sr_mg_g_leachate\", \"ca_mg_‚Ä¶\n$ concentration          <dbl> 72.6, 767.0, 188951.9, 10612.7, 5935.0, 171.0, ‚Ä¶\n\n\nWhen we pivot data we move them from a wide to a long format and vice-versa.\n\n(Image from Alisson Horst, check her other stats illustrations here)"
  },
  {
    "objectID": "slides/05-clean.html#one-cell-contains-multiple-values",
    "href": "slides/05-clean.html#one-cell-contains-multiple-values",
    "title": "Clean and Tidy Data",
    "section": "One cell contains multiple values",
    "text": "One cell contains multiple values\nNow it‚Äôs clear that element contains more than one value.\nFor example: ba_mg_g_leachate is not a single values and could be split into:\n\nelement: ba.\nunit: mg_g.\nfraction: leachate.\n\nLet‚Äôs split this column at the _ and reconstitute it in a tidy way\n\npangaea_tidy <- \n  pangaea_long %>% \n  separate(element, into = c('element', 'unit_num', 'unit_dem', 'fraction'), sep = '_') %>% \n  unite(col = 'unit', unit_num:unit_dem, sep = '_')"
  },
  {
    "objectID": "slides/05-clean.html#exercise",
    "href": "slides/05-clean.html#exercise",
    "title": "Clean and Tidy Data",
    "section": "Exercise",
    "text": "Exercise\nTidy last week‚Äôs schedule.\n\n\n\n2022 CBSER Summer School"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Data Analysis in R",
    "section": "",
    "text": "Hands-on Lessons\n\nMeet R\nManipulate Data\nVisualize Data\nGet Data into R\nClean Data with R"
  }
]